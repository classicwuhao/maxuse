model UNIVERSITY


class Module
attributes
	code:			Integer
	credits:		Integer
	year: 			Integer
	description:	Integer
end


class Person
attributes
	age:	Integer
	mature:	Boolean
	name:	Integer
end


class Student < Person
attributes
	id:		Integer
	year:	Integer
end

class Department
attributes
	name: Integer
end

class Assignment
attributes
	code: Integer
	due: Integer
end

association study between
	Student [1..1] role student
	Module [0..*] role modules
end

association contain between
	Student [1..*] role student
	Department [1..*] role department
end

association design between
	Department [1..*] role department
	Module [1..*] role modules
end

association homework between
	Assignment [1..*] role assignment
	Module [1..*] role modules
end

association finish between
	Assignment [1..*] role assignment
	Student [1..*] role student
end

constraints

context Person
	inv inv1: Person.allInstances()->forAll(p|p.age>0 and p.age<18)

context Student
	inv inv2: self.age > 18
	inv inv3: self.year>=1 and self.year<=6
	inv inv4: Student.allInstances()->forAll(s1,s2:Student|s1<>s2 implies s1.id <> s2.id)
	inv inv5: Student.allInstances()->forAll(s1|s1.modules->forAll(m1|s1.year=m1.year))
	inv inv6: Student.allInstances()->exists(s|s.year=6) and Student.allInstances()->exists(s|s.year<6)
	inv inv7: Student.allInstances()->forAll(s|s.modules->notEmpty())

context Module
	inv inv8: self.year>=1 and self.year<=5
	
module queryset0
	select Person.* with Person::* as q0
	select Module.* with Module::* as q1
	select Person.*, Student.* but Person as q2
end

module queryset1
	select Person.*, Student.*, Module.*, Assignment:*:* with Student::*, Module::* but Person as q0
end

module queryset2
	select Student.*@5 with Student::* inject {Student.allInstances()->forAll(s|s.modules->size()=10)} as q0
end
