model modelInheritance

enum Enum0 { Enum0Elem0, Enum0Elem1, Enum0Elem2 } 

enum Enum1 { Enum1Elem0, Enum1Elem1, Enum1Elem2, Enum1Elem3, Enum1Elem4, Enum1Elem5, Enum1Elem6 } 

@Weight = 1
class Class0
attributes 
	Class0BoolAttr0 : Boolean 
	Class0BoolAttr1 : Boolean 
	Class0IntAttr2 : Integer 
	Class0IntAttr3 : Integer 
	Class0EnumAttr4 : Enum0 
end 

@Weight = 1
class Class1 < Class7
attributes 
	Class1BoolAttr0 : Boolean 
	Class1BoolAttr1 : Boolean 
	Class1IntAttr2 : Integer 
	Class1IntAttr3 : Integer 
	Class1EnumAttr4 : Enum0 
end 

@Weight = 1
class Class2 < Class6
attributes 
	Class2BoolAttr0 : Boolean 
	Class2BoolAttr1 : Boolean 
	Class2IntAttr2 : Integer 
	Class2IntAttr3 : Integer 
	Class2EnumAttr4 : Enum0 
end 

@Weight = 1
class Class3 < Class6,Class7
attributes 
	Class3BoolAttr0 : Boolean 
	Class3BoolAttr1 : Boolean 
	Class3IntAttr2 : Integer 
	Class3IntAttr3 : Integer 
	Class3EnumAttr4 : Enum1 
end 

@Weight = 1
class Class4
attributes 
	Class4BoolAttr0 : Boolean 
	Class4BoolAttr1 : Boolean 
	Class4IntAttr2 : Integer 
	Class4IntAttr3 : Integer 
	Class4EnumAttr4 : Enum1 
end 

@Weight = 1
class Class5 < Class9
attributes 
	Class5BoolAttr0 : Boolean 
	Class5BoolAttr1 : Boolean 
	Class5IntAttr2 : Integer 
	Class5IntAttr3 : Integer 
	Class5EnumAttr4 : Enum1 
end 

@Weight = 1
class Class6 < Class8
attributes 
	Class6BoolAttr0 : Boolean 
	Class6BoolAttr1 : Boolean 
	Class6IntAttr2 : Integer 
	Class6IntAttr3 : Integer 
	Class6IntAttr4 : Integer 
end 

@Weight = 1
class Class7 < Class2
attributes 
	Class7BoolAttr0 : Boolean 
	Class7BoolAttr1 : Boolean 
	Class7IntAttr2 : Integer 
	Class7IntAttr3 : Integer 
	Class7IntAttr4 : Integer 
end 

@Weight = 1
class Class8
attributes 
	Class8BoolAttr0 : Boolean 
	Class8BoolAttr1 : Boolean 
	Class8IntAttr2 : Integer 
	Class8IntAttr3 : Integer 
	Class8IntAttr4 : Integer 
end 

@Weight = 1
class Class9 < Class2,Class11
attributes 
	Class9BoolAttr0 : Boolean 
	Class9BoolAttr1 : Boolean 
	Class9IntAttr2 : Integer 
	Class9IntAttr3 : Integer 
	Class9IntAttr4 : Integer 
end 

@Weight = 1
class Class10
attributes 
	Class10BoolAttr0 : Boolean 
	Class10BoolAttr1 : Boolean 
	Class10IntAttr2 : Integer 
	Class10IntAttr3 : Integer 
	Class10IntAttr4 : Integer 
end 

@Weight = 1
class Class11 < Class6
attributes 
	Class11BoolAttr0 : Boolean 
	Class11BoolAttr1 : Boolean 
	Class11IntAttr2 : Integer 
	Class11IntAttr3 : Integer 
	Class11IntAttr4 : Integer 
end 

@Weight = 1
class Class12
attributes 
	Class12BoolAttr0 : Boolean 
	Class12BoolAttr1 : Boolean 
	Class12IntAttr2 : Integer 
	Class12IntAttr3 : Integer 
	Class12IntAttr4 : Integer 
end 

@Weight = 1
association Class0_Class2 between 
	 Class0 [1] role role0
	 Class2 [1] role role1
end 

@Weight = 1
association Class1_Class12 between 
	 Class1 [1] role role2
	 Class12 [1] role role3
end 

@Weight = 1
association Class2_Class10 between 
	 Class2 [1] role role4
	 Class10 [1] role role5
end 

@Weight = 1
association Class4_Class4 between 
	 Class4 [1] role role8
	 Class4 [1] role role9
end 

constraints 

@Class0{Weight = 1} 
context Class0
	 inv: self.Class0IntAttr2 >= 7
	 inv: self.Class0IntAttr2 <> 15
	 inv: Class0.allInstances()->forAll( c0_1,c0_2 | c0_1.Class0IntAttr3 < c0_2.Class0IntAttr2 ) 
	 inv: Class0.allInstances()->forAll( c0_1,c0_2 | c0_1.Class0IntAttr3 <= c0_2.Class0IntAttr2 ) 
	 inv: not self.Class0BoolAttr0
	 inv: self.Class0EnumAttr4 <> #Enum0Elem0
	 inv: self.Class0EnumAttr4 <> #Enum0Elem0 and self.Class0IntAttr2 = 7
	 inv: self.Class0IntAttr2 >= 7 xor self.Class0IntAttr2 = 15 and self.Class0BoolAttr0
	 inv: self.Class0IntAttr2 <= 17 and self.Class0IntAttr2 <> 5 xor self.Class0IntAttr2 > 11
	 inv: self.Class0IntAttr2 <> 16 xor Class0.allInstances()->forAll( c0_1,c0_2 | c0_1.Class0IntAttr2 > c0_2.Class0IntAttr3 ) xor self.Class0IntAttr2 = 10
	 inv: self.Class0IntAttr3 = 2 and self.Class0EnumAttr4 <> #Enum0Elem1
	 inv: Class0.allInstances()->exists(c1,c2|c1.Class0IntAttr3 = Class0IntAttr2) 
	 inv: Class0.allInstances()->forAll(c1 | c1.Class0EnumAttr4 <> #Enum0Elem2) 
	 inv: Class0.allInstances()->exists(c1 | c1.Class0IntAttr3 > 12) 
	 inv: Class0.allInstances()->exists(c1,c2|c1.Class0IntAttr3 = Class0IntAttr2) 

@Class1{Weight = 1} 
context Class1
	 inv: self.Class1IntAttr2 > 18
	 inv: self.Class1IntAttr2 >= 15
	 inv: Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr2 > c1_2.Class1IntAttr3 ) 
	 inv: Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr3 > c1_2.Class1IntAttr2 ) 
	 inv: not self.Class1BoolAttr1
	 inv: self.Class1EnumAttr4 = #Enum0Elem0
	 inv: self.Class1IntAttr2 < 6 or self.Class1BoolAttr0 and self.Class1BoolAttr1 and self.Class1IntAttr3 = 12
	 inv: self.Class1EnumAttr4 = #Enum0Elem0 xor Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr3 < c1_2.Class1IntAttr2 ) xor self.Class1BoolAttr0 xor self.Class1BoolAttr1
	 inv: self.Class1BoolAttr1 and self.Class1BoolAttr0 and self.Class1BoolAttr1
	 inv: self.Class1BoolAttr1 xor self.Class1EnumAttr4 <> #Enum0Elem0
	 inv: self.Class1IntAttr2 < 0 xor Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr3 <> c1_2.Class1IntAttr2 ) or Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr2 >= c1_2.Class1IntAttr3 )
	 inv: Class1.allInstances()->forAll(c1,c2 | c1.Class1BoolAttr1 or c2.Class1BoolAttr0) 
	 inv: Class1.allInstances()->exists(c1,c2 | c1.Class1BoolAttr1 xor c2.Class1BoolAttr0) 
	 inv: Class1.allInstances()->exists(c1,c2 | c1.Class1BoolAttr0 xor c2.Class1BoolAttr1) 
	 inv: Class1.allInstances()->exists(c1,c2 | c1.Class1BoolAttr0 and c2.Class1BoolAttr1) 

@Class2{Weight = 1} 
context Class2
	 inv: self.Class2IntAttr3 = 3
	 inv: self.Class2IntAttr2 < 19
	 inv: Class2.allInstances()->forAll( c2_1,c2_2 | c2_1.Class2IntAttr3 = c2_2.Class2IntAttr2 ) 
	 inv: Class2.allInstances()->forAll( c2_1,c2_2 | c2_1.Class2IntAttr2 <> c2_2.Class2IntAttr3 ) 
	 inv: self.Class2BoolAttr0
	 inv: self.Class2EnumAttr4 = #Enum0Elem2
	 inv: Class2.allInstances()->forAll( c2_1,c2_2 | c2_1.Class2IntAttr3 > c2_2.Class2IntAttr2 ) or self.Class2IntAttr3 < 5 and self.Class2IntAttr3 < 16
	 inv: self.Class2BoolAttr1 or self.Class2BoolAttr0 or self.Class2EnumAttr4 <> #Enum0Elem2
	 inv: self.Class2EnumAttr4 = #Enum0Elem0 or Class2.allInstances()->forAll( c2_1,c2_2 | c2_1.Class2IntAttr2 > c2_2.Class2IntAttr3 ) xor self.Class2IntAttr3 < 18
	 inv: self.Class2EnumAttr4 <> #Enum0Elem2 and self.Class2IntAttr2 <= 14
	 inv: self.Class2IntAttr2 = 11 and self.Class2IntAttr3 >= 11 or self.Class2IntAttr3 <> 11
	 inv: Class2.allInstances()->forAll(c1 | c1.Class2IntAttr3 = 7) 
	 inv: Class2.allInstances()->exists(c1 | c1.Class2IntAttr3 <> 12) 
	 inv: Class2.allInstances()->exists(c1,c2|c1.Class2IntAttr3 > Class2IntAttr2) 
	 inv: Class2.allInstances()->exists(c1 | c1.Class2IntAttr2 > 3) 

@Class3{Weight = 1} 
context Class3
	 inv: self.Class3IntAttr2 > 14
	 inv: self.Class3IntAttr3 >= 13
	 inv: Class3.allInstances()->forAll( c3_1,c3_2 | c3_1.Class3IntAttr3 <= c3_2.Class3IntAttr2 ) 
	 inv: Class3.allInstances()->forAll( c3_1,c3_2 | c3_1.Class3IntAttr3 > c3_2.Class3IntAttr2 ) 
	 inv: self.Class3BoolAttr1 and self.Class3BoolAttr0
	 inv: self.Class3EnumAttr4 <> #Enum1Elem0
	 inv: self.Class3EnumAttr4 = #Enum1Elem0 and self.Class3IntAttr2 > 19 or self.Class3BoolAttr1 xor self.Class3BoolAttr0
	 inv: self.Class3BoolAttr0 and Class3.allInstances()->forAll( c3_1,c3_2 | c3_1.Class3IntAttr3 >= c3_2.Class3IntAttr2 ) xor self.Class3EnumAttr4 <> #Enum1Elem5
	 inv: self.Class3BoolAttr1 or self.Class3BoolAttr0 and self.Class3IntAttr3 <= 18
	 inv: self.Class3IntAttr3 = 5 or self.Class3BoolAttr1 xor self.Class3BoolAttr0
	 inv: self.Class3BoolAttr0 and self.Class3EnumAttr4 <> #Enum1Elem0
	 inv: Class3.allInstances()->forAll(c1,c2 | c1.Class3BoolAttr1 or c2.Class3BoolAttr0) 
	 inv: Class3.allInstances()->exists(c1 | c1.Class3IntAttr2 < 18) 
	 inv: Class3.allInstances()->exists(c1 | c1.Class3EnumAttr4 = #Enum1Elem3) 
	 inv: Class3.allInstances()->forAll(c1 | c1.Class3EnumAttr4 = #Enum1Elem5) 

@Class4{Weight = 1} 
context Class4
	 inv: self.Class4IntAttr3 <= 4
	 inv: self.Class4IntAttr3 = 3
	 inv: Class4.allInstances()->forAll( c4_1,c4_2 | c4_1.Class4IntAttr2 > c4_2.Class4IntAttr3 ) 
	 inv: Class4.allInstances()->forAll( c4_1,c4_2 | c4_1.Class4IntAttr3 = c4_2.Class4IntAttr2 ) 
	 inv: self.Class4BoolAttr1 and self.Class4BoolAttr0
	 inv: self.Class4EnumAttr4 = #Enum1Elem3
	 inv: self.Class4IntAttr3 <> 10 xor Class4.allInstances()->forAll( c4_1,c4_2 | c4_1.Class4IntAttr2 <= c4_2.Class4IntAttr3 ) xor self.Class4IntAttr2 < 4
	 inv: self.Class4IntAttr2 >= 15 and self.Class4BoolAttr0 or self.Class4BoolAttr1
	 inv: not self.Class4BoolAttr1 or Class4.allInstances()->forAll( c4_1,c4_2 | c4_1.Class4IntAttr3 < c4_2.Class4IntAttr2 ) or self.Class4IntAttr2 <= 10
	 inv: self.Class4EnumAttr4 <> #Enum1Elem1 xor self.Class4IntAttr2 <= 9 xor self.Class4IntAttr2 > 1
	 inv: self.Class4BoolAttr1 xor self.Class4BoolAttr0 and self.Class4IntAttr3 <= 10
	 inv: Class4.allInstances()->exists(c1 | c1.Class4IntAttr3 < 15) 
	 inv: Class4.allInstances()->exists(c1,c2 | c1.Class4BoolAttr1 xor c2.Class4BoolAttr0) 
	 inv: Class4.allInstances()->exists(c1,c2 | c1.Class4BoolAttr1 or c2.Class4BoolAttr0) 
	 inv: Class4.allInstances()->exists(c1 | c1.Class4IntAttr2 >= 16) 

@Class5{Weight = 1} 
context Class5
	 inv: self.Class5IntAttr3 >= 8
	 inv: self.Class5IntAttr2 <> 3
	 inv: self.Class5IntAttr3 <= 8
	 inv: Class5.allInstances()->forAll( c5_1,c5_2 | c5_1.Class5IntAttr2 = c5_2.Class5IntAttr3 ) 
	 inv: Class5.allInstances()->forAll( c5_1,c5_2 | c5_1.Class5IntAttr2 > c5_2.Class5IntAttr3 ) 
	 inv: Class5.allInstances()->forAll( c5_1,c5_2 | c5_1.Class5IntAttr3 <> c5_2.Class5IntAttr2 ) 
	 inv: self.Class5BoolAttr1 or self.Class5BoolAttr0
	 inv: self.Class5BoolAttr1 and not self.Class5BoolAttr0
	 inv: self.Class5EnumAttr4 <> #Enum1Elem0
	 inv: self.Class5EnumAttr4 = #Enum1Elem0
	 inv: self.Class5EnumAttr4 <> #Enum1Elem4 or self.Class5IntAttr2 > 16
	 inv: self.Class5IntAttr3 <= 11 or self.Class5EnumAttr4 = #Enum1Elem1
	 inv: self.Class5BoolAttr1 or not self.Class5BoolAttr1
	 inv: Class5.allInstances()->forAll( c5_1,c5_2 | c5_1.Class5IntAttr3 > c5_2.Class5IntAttr2 ) xor self.Class5BoolAttr0 xor self.Class5BoolAttr1
	 inv: self.Class5BoolAttr0 or self.Class5BoolAttr1 and self.Class5BoolAttr0 xor self.Class5BoolAttr1
	 inv: Class5.allInstances()->exists(c1,c2|c1.Class5IntAttr3 >= Class5IntAttr2) 
	 inv: Class5.allInstances()->forAll(c1 | c1.Class5IntAttr2 <= 6) 
	 inv: Class5.allInstances()->forAll(c1,c2 | c1.Class5BoolAttr1 or c2.Class5BoolAttr0) 
	 inv: Class5.allInstances()->forAll(c1,c2|c1.Class5IntAttr2 < Class5IntAttr3) 

@Class6{Weight = 1} 
context Class6

	inv: Class6.allInstances()->forAll(c6|Class7.allInstances()->forAll(c7|c6<>c7))

	 inv: self.Class6IntAttr4 > 2
	 inv: self.Class6IntAttr3 < 7
	 inv: Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr2 >= c6_2.Class6IntAttr4 ) 
	 inv: self.Class6BoolAttr0 or self.Class6BoolAttr1
	 inv: not self.Class6BoolAttr0
	 inv: self.Class6IntAttr4 > 3 or self.Class6BoolAttr1 and self.Class6BoolAttr0
	 inv: Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr4 <> c6_2.Class6IntAttr3 ) xor self.Class6IntAttr3 >= 9
	 inv: self.Class6BoolAttr1 xor self.Class6BoolAttr0 xor self.Class6IntAttr4 <> 8 xor self.Class6BoolAttr0 and self.Class6BoolAttr1
	 inv: self.Class6BoolAttr0 xor self.Class6BoolAttr1 and self.Class6IntAttr3 > 19
	 inv: self.Class6BoolAttr1 xor self.Class6BoolAttr0 and Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr4 >= c6_2.Class6IntAttr2 ) xor self.Class6BoolAttr1 and self.Class6BoolAttr0
	 inv: Class6.allInstances()->forAll(c1,c2 | c1.Class6BoolAttr1 and c2.Class6BoolAttr0) 
	 inv: Class6.allInstances()->forAll(c1 | c1.Class6IntAttr4 <= 9) 
	 inv: Class6.allInstances()->forAll(c1,c2 | c1.Class6BoolAttr1 xor c2.Class6BoolAttr0) 
	 inv: Class6.allInstances()->exists(c1,c2|c1.Class6IntAttr2 >= Class6IntAttr3) 

@Class7{Weight = 1} 
context Class7
	 inv: self.Class7IntAttr2 < 9
	 inv: self.Class7IntAttr2 = 9
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr2 < c7_2.Class7IntAttr3 ) 
	 inv: self.Class7BoolAttr0 and self.Class7BoolAttr1
	 inv: not self.Class7BoolAttr0
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr4 <= c7_2.Class7IntAttr3 ) or self.Class7IntAttr3 < 8 or self.Class7IntAttr2 <= 18
	 inv: self.Class7BoolAttr0 xor self.Class7BoolAttr1 xor not self.Class7BoolAttr1 and self.Class7IntAttr3 < 0
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr3 = c7_2.Class7IntAttr2 ) or self.Class7BoolAttr1 or self.Class7BoolAttr0
	 inv: self.Class7IntAttr4 = 11 xor Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr4 >= c7_2.Class7IntAttr2 )
	 inv: self.Class7IntAttr4 > 10 xor self.Class7IntAttr4 = 16 or self.Class7BoolAttr0 or self.Class7BoolAttr1
	 inv: Class7.allInstances()->exists(c1,c2|c1.Class7IntAttr2 = Class7IntAttr3) 
	 inv: Class7.allInstances()->exists(c1 | c1.Class7IntAttr4 > 0) 
	 inv: Class7.allInstances()->exists(c1,c2 | c1.Class7BoolAttr0 xor c2.Class7BoolAttr1) 
	 inv: Class7.allInstances()->exists(c1 | c1.Class7IntAttr2 < 14) 

@Class8{Weight = 1} 
context Class8
	 inv: self.Class8IntAttr4 = 16
	 inv: self.Class8IntAttr4 <> 19
	 inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 <> c8_2.Class8IntAttr3 ) 
	 inv: self.Class8BoolAttr0 or self.Class8BoolAttr1
	 inv: self.Class8BoolAttr0 xor self.Class8BoolAttr1
	 inv: self.Class8IntAttr3 > 14 xor Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr4 > c8_2.Class8IntAttr2 ) xor self.Class8BoolAttr1 and self.Class8BoolAttr0
	 inv: self.Class8IntAttr3 = 3 and self.Class8BoolAttr0 and self.Class8BoolAttr1 xor Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 <= c8_2.Class8IntAttr4 )
	 inv: self.Class8IntAttr3 < 5 or self.Class8IntAttr3 >= 7
	 inv: self.Class8BoolAttr0 and self.Class8BoolAttr1 or self.Class8IntAttr4 < 9
	 inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 = c8_2.Class8IntAttr3 ) or self.Class8IntAttr3 = 8
	 inv: Class8.allInstances()->forAll(c1 | c1.Class8IntAttr4 = 1) 
	 inv: Class8.allInstances()->forAll(c1 | c1.Class8IntAttr4 >= 7) 
	 inv: Class8.allInstances()->forAll(c1,c2|c1.Class8IntAttr4 <= Class8IntAttr2) 
	 inv: Class8.allInstances()->exists(c1 | c1.Class8IntAttr2 = 18) 

@Class9{Weight = 1} 
context Class9
	 inv: self.Class9IntAttr2 <= 17
	 inv: self.Class9IntAttr2 < 17
	 inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr2 <= c9_2.Class9IntAttr3 ) 
	 inv: self.Class9BoolAttr0 and self.Class9BoolAttr1
	 inv: self.Class9BoolAttr0 or self.Class9BoolAttr1
	 inv: self.Class9BoolAttr1 xor self.Class9BoolAttr0 xor self.Class9IntAttr2 <> 2
	 inv: self.Class9BoolAttr1 xor self.Class9BoolAttr1 xor self.Class9BoolAttr0
	 inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr3 <= c9_2.Class9IntAttr2 ) xor self.Class9IntAttr2 >= 15 and self.Class9IntAttr2 = 6
	 inv: self.Class9BoolAttr1 and Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr2 = c9_2.Class9IntAttr3 ) or Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr4 > c9_2.Class9IntAttr3 )
	 inv: self.Class9BoolAttr1 xor self.Class9BoolAttr0 or Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr3 <= c9_2.Class9IntAttr2 )
	 inv: Class9.allInstances()->forAll(c1,c2 | c1.Class9BoolAttr1 xor c2.Class9BoolAttr0) 
	 inv: Class9.allInstances()->forAll(c1,c2|c1.Class9IntAttr2 >= Class9IntAttr3) 
	 inv: Class9.allInstances()->exists(c1 | c1.Class9IntAttr3 <> 9) 
	 inv: Class9.allInstances()->exists(c1,c2 | c1.Class9BoolAttr0 xor c2.Class9BoolAttr1) 

@Class10{Weight = 1} 
context Class10
	 inv: self.Class10IntAttr2 <> 0
	 inv: self.Class10IntAttr3 > 17
	 inv: Class10.allInstances()->forAll( c0_1,c0_2 | c0_1.Class10IntAttr4 >= c0_2.Class10IntAttr2 ) 
	 inv: self.Class10BoolAttr1 xor self.Class10BoolAttr0
	 inv: self.Class10BoolAttr1 or self.Class10BoolAttr0
	 inv: self.Class10IntAttr4 < 5 xor self.Class10BoolAttr1 and self.Class10BoolAttr0 or not self.Class10BoolAttr0
	 inv: self.Class10BoolAttr0 and self.Class10BoolAttr1
	 inv: not self.Class10BoolAttr1 or self.Class10IntAttr2 >= 17 or self.Class10IntAttr2 > 8
	 inv: self.Class10IntAttr4 > 18 and self.Class10IntAttr3 >= 7 and not self.Class10BoolAttr0
	 inv: self.Class10IntAttr3 = 3 and self.Class10BoolAttr0 and self.Class10BoolAttr1
	 inv: Class10.allInstances()->forAll(c1,c2 | c1.Class10BoolAttr1 and c2.Class10BoolAttr0) 
	 inv: Class10.allInstances()->forAll(c1,c2|c1.Class10IntAttr3 <> Class10IntAttr4) 
	 inv: Class10.allInstances()->forAll(c1 | c1.Class10IntAttr3 <= 14) 
	 inv: Class10.allInstances()->exists(c1 | c1.Class10IntAttr3 > 16) 

@Class11{Weight = 1} 
context Class11
	
	inv: Class11.allInstances()->forAll(c11|Class2.allInstances()->forAll(c2|c11<>c2))

	 inv: self.Class11IntAttr2 >= 17
	 inv: self.Class11IntAttr3 > 13
	 inv: Class11.allInstances()->forAll( c1_1,c1_2 | c1_1.Class11IntAttr2 = c1_2.Class11IntAttr3 ) 
	 inv: self.Class11BoolAttr1 or self.Class11BoolAttr0
	 inv: self.Class11BoolAttr1
	 inv: self.Class11IntAttr4 <= 5 and Class11.allInstances()->forAll( c1_1,c1_2 | c1_1.Class11IntAttr2 <= c1_2.Class11IntAttr3 )
	 inv: not self.Class11BoolAttr0 and self.Class11IntAttr2 <> 1
	 inv: self.Class11IntAttr4 > 17 xor self.Class11IntAttr3 > 5 xor self.Class11IntAttr2 = 8
	 inv: self.Class11BoolAttr1 xor self.Class11BoolAttr0
	 inv: self.Class11BoolAttr0 xor self.Class11IntAttr4 <= 1 xor self.Class11IntAttr3 = 11
	 inv: Class11.allInstances()->exists(c1,c2|c1.Class11IntAttr4 < Class11IntAttr3) 
	 inv: Class11.allInstances()->forAll(c1,c2 | c1.Class11BoolAttr0 and c2.Class11BoolAttr1) 
	 inv: Class11.allInstances()->exists(c1,c2 | c1.Class11BoolAttr1 and c2.Class11BoolAttr0) 
	 inv: Class11.allInstances()->exists(c1 | c1.Class11IntAttr4 = 2) 

@Class12{Weight = 1} 
context Class12
	 inv: self.Class12IntAttr4 > 3
	 inv: self.Class12IntAttr2 <= 13
	 inv: Class12.allInstances()->forAll( c2_1,c2_2 | c2_1.Class12IntAttr3 >= c2_2.Class12IntAttr4 ) 
	 inv: self.Class12BoolAttr1
	 inv: not self.Class12BoolAttr0
	 inv: self.Class12BoolAttr1 and self.Class12BoolAttr0 or self.Class12BoolAttr0 or self.Class12BoolAttr1
	 inv: self.Class12BoolAttr0 and self.Class12BoolAttr1 xor self.Class12IntAttr3 >= 10
	 inv: self.Class12BoolAttr0 and self.Class12IntAttr2 > 6
	 inv: self.Class12BoolAttr1 xor self.Class12BoolAttr0 and self.Class12IntAttr2 >= 18 and self.Class12IntAttr2 <= 9
	 inv: self.Class12BoolAttr0 or self.Class12BoolAttr1 or self.Class12IntAttr2 = 16
	 inv: Class12.allInstances()->forAll(c1 | not c1.Class12BoolAttr1) 
	 inv: Class12.allInstances()->exists(c1,c2 | c1.Class12BoolAttr0 and c2.Class12BoolAttr1) 
	 inv: Class12.allInstances()->exists(c1,c2 | c1.Class12BoolAttr0 or c2.Class12BoolAttr1) 
	 inv: Class12.allInstances()->exists(c1 | c1.Class12IntAttr4 > 18) 

