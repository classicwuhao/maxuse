model modelOne

enum Enum0 { Enum0Elem0, Enum0Elem1, Enum0Elem2 } 

enum Enum1 { Enum1Elem0, Enum1Elem1, Enum1Elem2, Enum1Elem3, Enum1Elem4, Enum1Elem5, Enum1Elem6 } 

@Weight = 1
class Class0
attributes 
	Class0BoolAttr0 : Boolean 
	Class0BoolAttr1 : Boolean 
	Class0IntAttr2 : Integer 
	Class0IntAttr3 : Integer 
	Class0EnumAttr4 : Enum1 
end 

@Weight = 1
class Class1
attributes 
	Class1BoolAttr0 : Boolean 
	Class1BoolAttr1 : Boolean 
	Class1IntAttr2 : Integer 
	Class1IntAttr3 : Integer 
	Class1EnumAttr4 : Enum0 
end 

@Weight = 1
class Class2
attributes 
	Class2BoolAttr0 : Boolean 
	Class2BoolAttr1 : Boolean 
	Class2IntAttr2 : Integer 
	Class2IntAttr3 : Integer 
	Class2EnumAttr4 : Enum0 
end 

@Weight = 1
class Class3
attributes 
	Class3IntAttr0 : Integer 
	Class3IntAttr1 : Integer 
	Class3IntAttr2 : Integer 
end 

@Weight = 1
class Class4
attributes 
	Class4IntAttr0 : Integer 
	Class4IntAttr1 : Integer 
	Class4IntAttr2 : Integer 
end 

@Weight = 1
association Class0_Class2 between 
	 Class0 [1] role role0
	 Class2 [1] role role1
end 

@Weight = 1
association Class1_Class0 between 
	 Class1 [1] role role2
	 Class0 [1] role role3
end 

@Weight = 1
association Class2_Class1 between 
	 Class2 [1] role role4
	 Class1 [1] role role5
end 

@Weight = 1
association Class3_Class3 between 
	 Class3 [1] role role6
	 Class3 [1] role role7
end 

@Weight = 1
association Class4_Class4 between 
	 Class4 [1] role role8
	 Class4 [1] role role9
end 

constraints 

@Class0{Weight = 1} 
context Class0
	 inv: self.Class0IntAttr2 >= 15
	 inv: self.Class0IntAttr3 >= 15
	 inv: Class0.allInstances()->forAll( c0_1,c0_2 | c0_1.Class0IntAttr3 >= c0_2.Class0IntAttr2 ) 
	 inv: Class0.allInstances()->forAll( c0_1,c0_2 | c0_1.Class0IntAttr2 >= c0_2.Class0IntAttr3 ) 
	 inv: self.Class0BoolAttr1
	 inv: self.Class0EnumAttr4 <> #Enum1Elem1 or self.Class0BoolAttr0
	 inv: self.Class0BoolAttr1 xor self.Class0BoolAttr0 and self.Class0IntAttr2 < 1 and self.Class0BoolAttr1 or self.Class0BoolAttr0
	 inv: self.Class0IntAttr3 <> 15 xor self.Class0IntAttr2 >= 11

@Class1{Weight = 1} 
context Class1
	 inv: self.Class1IntAttr3 >= 8
	 inv: self.Class1IntAttr2 <= 13
	 inv: Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr3 >= c1_2.Class1IntAttr2 ) 
	 inv: Class1.allInstances()->forAll( c1_1,c1_2 | c1_1.Class1IntAttr2 = c1_2.Class1IntAttr3 ) 
	 inv: not self.Class1BoolAttr0
	 inv: self.Class1IntAttr3 <> 19 or self.Class1BoolAttr0 or self.Class1BoolAttr1 or self.Class1IntAttr3 = 8
	 inv: self.Class1IntAttr2 < 17 xor self.Class1IntAttr2 <= 10
	 inv: self.Class1IntAttr3 <> 7 xor self.Class1IntAttr3 >= 6 and self.Class1IntAttr2 > 17

@Class2{Weight = 1} 
context Class2
	 inv: self.Class2IntAttr3 > 0
	 inv: self.Class2IntAttr2 = 19
	 inv: Class2.allInstances()->forAll( c2_1,c2_2 | c2_1.Class2IntAttr2 <> c2_2.Class2IntAttr3 ) 
	 inv: Class2.allInstances()->forAll( c2_1,c2_2 | c2_1.Class2IntAttr2 <= c2_2.Class2IntAttr3 ) 
	 inv: self.Class2BoolAttr0
	 inv: self.Class2IntAttr2 < 1 or self.Class2BoolAttr1 and self.Class2BoolAttr0
	 inv: self.Class2IntAttr2 <> 1 or self.Class2IntAttr3 >= 2 or self.Class2IntAttr3 <> 2
	 inv: self.Class2IntAttr3 < 11 and self.Class2IntAttr3 > 15 or self.Class2BoolAttr1 xor self.Class2BoolAttr0

@Class3{Weight = 1} 
context Class3
	 inv: self.Class3IntAttr1 <= 1
	 inv: self.Class3IntAttr2 <> 9
	 inv: Class3.allInstances()->forAll( c3_1,c3_2 | c3_1.Class3IntAttr0 < c3_2.Class3IntAttr1 ) 

@Class4{Weight = 1} 
context Class4
	 inv: self.Class4IntAttr1 <> 3
	 inv: self.Class4IntAttr1 <> 11
	 inv: Class4.allInstances()->forAll( c4_1,c4_2 | c4_1.Class4IntAttr0 > c4_2.Class4IntAttr2 ) 

