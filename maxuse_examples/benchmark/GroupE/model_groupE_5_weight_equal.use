model model_groupE_5_weight_equal

enum Enum0 { Enum0Elem0, Enum0Elem1, Enum0Elem2, Enum0Elem3, Enum0Elem4 } 

enum Enum1 { Enum1Elem0, Enum1Elem1, Enum1Elem2, Enum1Elem3, Enum1Elem4, Enum1Elem5 } 

enum Enum2 { Enum2Elem0, Enum2Elem1, Enum2Elem2, Enum2Elem3, Enum2Elem4, Enum2Elem5, Enum2Elem6 } 

@Weight = 1
class Class0
attributes 
	Class0BoolAttr0 : Boolean 
	Class0IntAttr1 : Integer 
	Class0EnumAttr2 : Enum2 
end 

@Weight = 1
class Class1
attributes 
	Class1BoolAttr0 : Boolean 
	Class1IntAttr1 : Integer 
	Class1EnumAttr2 : Enum2 
end 

@Weight = 1
class Class2
attributes 
	Class2BoolAttr0 : Boolean 
	Class2IntAttr1 : Integer 
	Class2EnumAttr2 : Enum0 
end 

@Weight = 1
class Class3
attributes 
	Class3BoolAttr0 : Boolean 
	Class3IntAttr1 : Integer 
	Class3EnumAttr2 : Enum2 
end 

@Weight = 1
class Class4
attributes 
	Class4BoolAttr0 : Boolean 
	Class4IntAttr1 : Integer 
	Class4EnumAttr2 : Enum2 
end 

@Weight = 1
class Class5
attributes 
	Class5BoolAttr0 : Boolean 
	Class5IntAttr1 : Integer 
	Class5EnumAttr2 : Enum1 
end 

@Weight = 1
class Class6
attributes 
	Class6BoolAttr0 : Boolean 
	Class6BoolAttr1 : Boolean 
	Class6IntAttr2 : Integer 
	Class6IntAttr3 : Integer 
	Class6EnumAttr5 : Enum0 
	Class6EnumAttr4 : Enum0 
	Class6EnumAttr6 : Enum0 
end 

@Weight = 1
class Class7
attributes 
	Class7BoolAttr0 : Boolean 
	Class7BoolAttr1 : Boolean 
	Class7IntAttr2 : Integer 
	Class7IntAttr3 : Integer 
	Class7EnumAttr4 : Enum2 
	Class7EnumAttr6 : Enum2 
	Class7EnumAttr5 : Enum1 
end 

@Weight = 1
class Class8
attributes 
	Class8BoolAttr0 : Boolean 
	Class8BoolAttr1 : Boolean 
	Class8IntAttr2 : Integer 
	Class8IntAttr3 : Integer 
	Class8EnumAttr6 : Enum2 
	Class8EnumAttr4 : Enum1 
	Class8EnumAttr5 : Enum1 
end 

@Weight = 1
class Class9
attributes 
	Class9BoolAttr0 : Boolean 
	Class9BoolAttr1 : Boolean 
	Class9IntAttr2 : Integer 
	Class9IntAttr3 : Integer 
	Class9EnumAttr5 : Enum2 
	Class9EnumAttr6 : Enum2 
	Class9EnumAttr4 : Enum1 
end 

@Weight = 1
class Class10 < Class16
attributes 
	Class10BoolAttr0 : Boolean 
	Class10BoolAttr1 : Boolean 
	Class10BoolAttr2 : Boolean 
	Class10IntAttr3 : Integer 
	Class10IntAttr4 : Integer 
	Class10EnumAttr5 : Enum2 
	Class10EnumAttr6 : Enum0 
end 

@Weight = 1
class Class11
attributes 
	Class11BoolAttr0 : Boolean 
	Class11BoolAttr1 : Boolean 
	Class11BoolAttr2 : Boolean 
	Class11IntAttr3 : Integer 
	Class11IntAttr4 : Integer 
	Class11EnumAttr6 : Enum2 
	Class11EnumAttr5 : Enum0 
end 

@Weight = 1
class Class12
attributes 
	Class12BoolAttr0 : Boolean 
	Class12BoolAttr1 : Boolean 
	Class12BoolAttr2 : Boolean 
	Class12IntAttr3 : Integer 
	Class12IntAttr4 : Integer 
	Class12EnumAttr6 : Enum0 
	Class12EnumAttr5 : Enum0 
end 

@Weight = 1
class Class13
attributes 
	Class13BoolAttr0 : Boolean 
	Class13BoolAttr1 : Boolean 
	Class13BoolAttr2 : Boolean 
	Class13BoolAttr3 : Boolean 
	Class13IntAttr4 : Integer 
	Class13IntAttr5 : Integer 
	Class13IntAttr6 : Integer 
	Class13EnumAttr9 : Enum0 
	Class13EnumAttr8 : Enum1 
	Class13EnumAttr7 : Enum0 
	Class13EnumAttr12 : Enum1 
	Class13EnumAttr11 : Enum0 
	Class13EnumAttr10 : Enum0 
end 

@Weight = 1
class Class14
attributes 
	Class14BoolAttr0 : Boolean 
	Class14BoolAttr1 : Boolean 
	Class14BoolAttr2 : Boolean 
	Class14BoolAttr3 : Boolean 
	Class14IntAttr4 : Integer 
	Class14IntAttr5 : Integer 
	Class14IntAttr6 : Integer 
	Class14EnumAttr10 : Enum0 
	Class14EnumAttr11 : Enum1 
	Class14EnumAttr7 : Enum1 
	Class14EnumAttr12 : Enum0 
	Class14EnumAttr8 : Enum0 
	Class14EnumAttr9 : Enum0 
end 

@Weight = 1
class Class15
attributes 
	Class15BoolAttr0 : Boolean 
	Class15BoolAttr1 : Boolean 
	Class15BoolAttr2 : Boolean 
	Class15BoolAttr3 : Boolean 
	Class15IntAttr4 : Integer 
	Class15IntAttr5 : Integer 
	Class15IntAttr6 : Integer 
	Class15EnumAttr8 : Enum1 
	Class15EnumAttr9 : Enum1 
	Class15EnumAttr7 : Enum1 
	Class15EnumAttr10 : Enum0 
	Class15EnumAttr12 : Enum0 
	Class15EnumAttr11 : Enum0 
end 

@Weight = 1
class Class16 < Class14
attributes 
	Class16BoolAttr0 : Boolean 
	Class16BoolAttr1 : Boolean 
	Class16BoolAttr2 : Boolean 
	Class16BoolAttr3 : Boolean 
	Class16IntAttr4 : Integer 
	Class16IntAttr5 : Integer 
	Class16IntAttr6 : Integer 
	Class16EnumAttr9 : Enum1 
	Class16EnumAttr8 : Enum2 
	Class16EnumAttr7 : Enum1 
	Class16EnumAttr12 : Enum0 
	Class16EnumAttr11 : Enum1 
	Class16EnumAttr10 : Enum2 
end 

@Weight = 1
class Class17
attributes 
	Class17BoolAttr0 : Boolean 
	Class17BoolAttr1 : Boolean 
	Class17BoolAttr2 : Boolean 
	Class17BoolAttr3 : Boolean 
	Class17IntAttr4 : Integer 
	Class17IntAttr5 : Integer 
	Class17IntAttr6 : Integer 
	Class17EnumAttr7 : Enum0 
	Class17EnumAttr10 : Enum1 
	Class17EnumAttr11 : Enum2 
	Class17EnumAttr12 : Enum2 
	Class17EnumAttr8 : Enum2 
	Class17EnumAttr9 : Enum1 
end 

@Weight = 1
association Class0_Class0 between 
	 Class0 [0..*] role role0
	 Class0 [1..*] role role1
end 

@Weight = 1
association Class1_Class12 between 
	 Class1 [1] role role2
	 Class12 [1..3] role role3
end 

@Weight = 1
association Class2_Class1 between 
	 Class2 [1] role role4
	 Class1 [4] role role5
end 

@Weight = 1
association Class3_Class10 between 
	 Class3 [1..*] role role6
	 Class10 [0..*] role role7
end 

@Weight = 1
association Class4_Class14 between 
	 Class4 [1] role role8
	 Class14 [1] role role9
end 

@Weight = 1
association Class5_Class3 between 
	 Class5 [0..*] role role10
	 Class3 [1..2] role role11
end 

@Weight = 1
association Class6_Class4 between 
	 Class6 [1..*] role role12
	 Class4 [1] role role13
end 

@Weight = 1
association Class7_Class8 between 
	 Class7 [0..1] role role14
	 Class8 [*] role role15
end 

@Weight = 1
association Class8_Class17 between 
	 Class8 [1..*] role role16
	 Class17 [1] role role17
end 

@Weight = 1
association Class9_Class16 between 
	 Class9 [3..4] role role18
	 Class16 [1] role role19
end 

@Weight = 1
association Class10_Class9 between 
	 Class10 [1] role role20
	 Class9 [1..4] role role21
end 

@Weight = 1
association Class11_Class2 between 
	 Class11 [1..*] role role22
	 Class2 [1..*] role role23
end 

@Weight = 1
association Class12_Class5 between 
	 Class12 [3..4] role role24
	 Class5 [0..*] role role25
end 

@Weight = 1
association Class13_Class7 between 
	 Class13 [1] role role26
	 Class7 [0..4] role role27
end 

@Weight = 1
association Class14_Class13 between 
	 Class14 [1..4] role role28
	 Class13 [1..3] role role29
end 

@Weight = 1
association Class15_Class15 between 
	 Class15 [2..4] role role30
	 Class15 [1..*] role role31
end 

@Weight = 1
association Class16_Class6 between 
	 Class16 [1..*] role role32
	 Class6 [2..4] role role33
end 

@Weight = 1
association Class17_Class11 between 
	 Class17 [4] role role34
	 Class11 [0..1] role role35
end 

constraints 

@Class0{Weight = 1} 
context Class0
	 inv: self.Class0EnumAttr2 <> #Enum2Elem3 or self.Class0IntAttr1 < 4 xor self.Class0IntAttr1 > 19
	 inv: self.Class0EnumAttr2 <> #Enum2Elem0 and self.Class0IntAttr1 <> 0

@Class1{Weight = 1} 
context Class1
	 inv: not self.Class1BoolAttr0 and self.Class1IntAttr1 >= 11
	 inv: self.Class1IntAttr1 = 11 or self.Class1IntAttr1 < 9 and self.Class1IntAttr1 > 17

@Class2{Weight = 1} 
context Class2
	 inv: self.Class2IntAttr1 > 11 xor self.Class2EnumAttr2 <> #Enum0Elem4
	 inv: self.Class2IntAttr1 = 0 and self.Class2EnumAttr2 <> #Enum0Elem1 or self.Class2BoolAttr0

@Class3{Weight = 1} 
context Class3
	 inv: self.Class3IntAttr1 = 1 or self.Class3IntAttr1 <= 4
	 inv: self.Class3IntAttr1 <= 16 and self.Class3IntAttr1 < 8 and self.Class3EnumAttr2 = #Enum2Elem3

@Class4{Weight = 1} 
context Class4
	 inv: self.Class4IntAttr1 = 8 and self.Class4IntAttr1 < 18
	 inv: self.Class4EnumAttr2 <> #Enum2Elem1 xor self.Class4EnumAttr2 = #Enum2Elem2 xor self.Class4IntAttr1 < 14

@Class5{Weight = 1} 
context Class5
	 inv: not self.Class5BoolAttr0 or self.Class5EnumAttr2 = #Enum1Elem0 and self.Class5EnumAttr2 <> #Enum1Elem0
	 inv: self.Class5IntAttr1 >= 0 or self.Class5EnumAttr2 = #Enum1Elem2

@Class6{Weight = 1} 
context Class6
	 inv: Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr3 <> c6_2.Class6IntAttr2 ) 
	 inv: Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr2 <= c6_2.Class6IntAttr3 ) 
	 inv: Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr3 = c6_2.Class6IntAttr2 ) 
	 inv: not self.Class6BoolAttr0
	 inv: self.Class6BoolAttr1 and self.Class6BoolAttr0
	 inv: self.Class6EnumAttr6 = #Enum0Elem0
	 inv: self.Class6EnumAttr4 = #Enum0Elem4
	 inv: self.Class6EnumAttr6 = #Enum0Elem1
	 inv: self.Class6BoolAttr1 xor self.Class6BoolAttr0 xor Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr2 < c6_2.Class6IntAttr3 ) or self.Class6IntAttr3 > 7
	 inv: Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr2 > c6_2.Class6IntAttr3 ) or self.Class6BoolAttr0 xor self.Class6IntAttr3 < 8
	 inv: self.Class6EnumAttr6 <> #Enum0Elem2 or Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr2 >= c6_2.Class6IntAttr3 ) or Class6.allInstances()->forAll( c6_1,c6_2 | c6_1.Class6IntAttr2 >= c6_2.Class6IntAttr3 )
	 inv: self.Class6BoolAttr0 or self.Class6BoolAttr1 and self.Class6EnumAttr5 = #Enum0Elem1
	 inv: Class6.allInstances()->exists(c1 | c1.Class6IntAttr2 = 5) 
	 inv: Class6.allInstances()->forAll(c1,c2 | c1.Class6BoolAttr1 or c2.Class6BoolAttr0) 
	 inv: Class6.allInstances()->forAll(c1 | not c1.Class6BoolAttr1) 

@Class7{Weight = 1} 
context Class7
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr2 > c7_2.Class7IntAttr3 ) 
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr2 <> c7_2.Class7IntAttr3 ) 
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr2 < c7_2.Class7IntAttr3 ) 
	 inv: self.Class7BoolAttr1 xor self.Class7BoolAttr0
	 inv: not self.Class7BoolAttr1
	 inv: self.Class7EnumAttr5 <> #Enum1Elem1
	 inv: self.Class7EnumAttr6 <> #Enum2Elem3
	 inv: self.Class7EnumAttr6 <> #Enum2Elem6
	 inv: self.Class7IntAttr3 = 12 or Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr2 >= c7_2.Class7IntAttr3 ) xor self.Class7IntAttr3 <> 19
	 inv: self.Class7IntAttr2 <= 19 and self.Class7BoolAttr1 and self.Class7BoolAttr0
	 inv: self.Class7IntAttr3 >= 8 xor self.Class7BoolAttr0 or self.Class7BoolAttr1 xor self.Class7BoolAttr0 and self.Class7BoolAttr1
	 inv: Class7.allInstances()->forAll( c7_1,c7_2 | c7_1.Class7IntAttr3 >= c7_2.Class7IntAttr2 ) xor self.Class7IntAttr2 = 9 or self.Class7BoolAttr1 and self.Class7BoolAttr0
	 inv: Class7.allInstances()->exists(c1,c2|c1.Class7IntAttr2 <> Class7IntAttr3) 
	 inv: Class7.allInstances()->exists(c1,c2|c1.Class7IntAttr3 <= Class7IntAttr2) 
	 inv: Class7.allInstances()->exists(c1,c2 | c1.Class7BoolAttr1 and c2.Class7BoolAttr0) 

@Class8{Weight = 1} 
context Class8
	 inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 > c8_2.Class8IntAttr3 ) 
	 inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 <= c8_2.Class8IntAttr3 ) 
	 inv: Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 <> c8_2.Class8IntAttr3 ) 
	 inv: self.Class8BoolAttr1 xor self.Class8BoolAttr0
	 inv: self.Class8BoolAttr0 and self.Class8BoolAttr1
	 inv: self.Class8EnumAttr4 <> #Enum1Elem0
	 inv: self.Class8EnumAttr6 = #Enum2Elem2
	 inv: self.Class8EnumAttr6 = #Enum2Elem4
	 inv: self.Class8EnumAttr5 <> #Enum1Elem0 or self.Class8IntAttr3 < 15 xor self.Class8IntAttr2 >= 18
	 inv: self.Class8EnumAttr4 = #Enum1Elem0 and self.Class8IntAttr2 >= 13 xor self.Class8IntAttr3 > 19
	 inv: self.Class8IntAttr2 > 16 and self.Class8IntAttr3 > 4 xor self.Class8EnumAttr6 <> #Enum2Elem4
	 inv: self.Class8BoolAttr0 or self.Class8BoolAttr1 and Class8.allInstances()->forAll( c8_1,c8_2 | c8_1.Class8IntAttr2 < c8_2.Class8IntAttr3 ) xor self.Class8IntAttr2 = 10
	 inv: Class8.allInstances()->exists(c1 | not c1.Class8BoolAttr1) 
	 inv: Class8.allInstances()->forAll(c1 | c1.Class8EnumAttr4 = #Enum1Elem0) 
	 inv: Class8.allInstances()->forAll(c1,c2|c1.Class8IntAttr3 > Class8IntAttr2) 

@Class9{Weight = 1} 
context Class9
	 inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr3 > c9_2.Class9IntAttr2 ) 
	 inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr3 >= c9_2.Class9IntAttr2 ) 
	 inv: Class9.allInstances()->forAll( c9_1,c9_2 | c9_1.Class9IntAttr3 <= c9_2.Class9IntAttr2 ) 
	 inv: not self.Class9BoolAttr1
	 inv: not self.Class9BoolAttr0
	 inv: self.Class9EnumAttr5 = #Enum2Elem4
	 inv: self.Class9EnumAttr4 <> #Enum1Elem0
	 inv: self.Class9EnumAttr6 <> #Enum2Elem4
	 inv: self.Class9BoolAttr1 and self.Class9BoolAttr0 or self.Class9BoolAttr1 or self.Class9EnumAttr4 <> #Enum1Elem4
	 inv: self.Class9BoolAttr1 or self.Class9BoolAttr0 or self.Class9BoolAttr1 xor self.Class9BoolAttr0
	 inv: self.Class9EnumAttr5 = #Enum2Elem2 xor self.Class9EnumAttr4 = #Enum1Elem2
	 inv: self.Class9EnumAttr4 = #Enum1Elem0 xor self.Class9IntAttr2 <> 13
	 inv: Class9.allInstances()->forAll(c1 | c1.Class9BoolAttr0) 
	 inv: Class9.allInstances()->exists(c1 | c1.Class9IntAttr2 = 3) 
	 inv: Class9.allInstances()->forAll(c1,c2 | c1.Class9BoolAttr0 or c2.Class9BoolAttr1) 

@Class10{Weight = 1} 
context Class10
	 inv: self.Class10IntAttr4 <= 4
	 inv: self.Class10IntAttr3 <= 6
	 inv: Class10.allInstances()->forAll( c0_1,c0_2 | c0_1.Class10IntAttr4 > c0_2.Class10IntAttr3 ) 
	 inv: Class10.allInstances()->forAll( c0_1,c0_2 | c0_1.Class10IntAttr4 > c0_2.Class10IntAttr3 ) 
	 inv: Class10.allInstances()->forAll( c0_1,c0_2 | c0_1.Class10IntAttr3 <> c0_2.Class10IntAttr4 ) 
	 inv: self.Class10EnumAttr6 = #Enum0Elem3 and Class10.allInstances()->forAll( c0_1,c0_2 | c0_1.Class10IntAttr4 = c0_2.Class10IntAttr3 )
	 inv: self.Class10IntAttr4 <= 15 xor self.Class10BoolAttr0 or self.Class10BoolAttr2 or self.Class10EnumAttr6 <> #Enum0Elem0

@Class11{Weight = 1} 
context Class11
	 inv: self.Class11IntAttr4 < 19
	 inv: self.Class11IntAttr3 < 8
	 inv: Class11.allInstances()->forAll( c1_1,c1_2 | c1_1.Class11IntAttr4 <= c1_2.Class11IntAttr3 ) 
	 inv: Class11.allInstances()->forAll( c1_1,c1_2 | c1_1.Class11IntAttr4 = c1_2.Class11IntAttr3 ) 
	 inv: Class11.allInstances()->forAll( c1_1,c1_2 | c1_1.Class11IntAttr3 >= c1_2.Class11IntAttr4 ) 
	 inv: self.Class11EnumAttr6 = #Enum2Elem4 and self.Class11BoolAttr1 and self.Class11BoolAttr0
	 inv: self.Class11BoolAttr2 xor self.Class11BoolAttr0 and self.Class11IntAttr3 < 13 xor self.Class11IntAttr4 < 14

@Class12{Weight = 1} 
context Class12
	 inv: self.Class12IntAttr4 = 3
	 inv: self.Class12IntAttr3 > 18
	 inv: Class12.allInstances()->forAll( c2_1,c2_2 | c2_1.Class12IntAttr4 > c2_2.Class12IntAttr3 ) 
	 inv: Class12.allInstances()->forAll( c2_1,c2_2 | c2_1.Class12IntAttr4 < c2_2.Class12IntAttr3 ) 
	 inv: Class12.allInstances()->forAll( c2_1,c2_2 | c2_1.Class12IntAttr3 < c2_2.Class12IntAttr4 ) 
	 inv: self.Class12BoolAttr1 xor self.Class12BoolAttr0 or self.Class12BoolAttr2 xor self.Class12IntAttr3 <= 7
	 @Weight= default 
	 inv: self.Class12EnumAttr6 <> #Enum0Elem2 or self.Class12BoolAttr1 or self.Class12BoolAttr0 or self.Class12IntAttr4 < 18

@Class13{Weight = 1} 
context Class13
	 inv: self.Class13IntAttr4 = 1
	 inv: Class13.allInstances()->forAll( c3_1,c3_2 | c3_1.Class13IntAttr4 = c3_2.Class13IntAttr6 ) 
	 inv: self.Class13BoolAttr3
	 inv: not self.Class13BoolAttr3
	 inv: self.Class13BoolAttr0 or self.Class13BoolAttr1
	 inv: self.Class13EnumAttr11 <> #Enum0Elem1
	 inv: self.Class13EnumAttr9 <> #Enum0Elem2
	 inv: self.Class13EnumAttr7 <> #Enum0Elem2
	 inv: self.Class13EnumAttr10 = #Enum0Elem4
	 inv: not self.Class13BoolAttr3
	 inv: self.Class13BoolAttr3 or self.Class13BoolAttr1
	 inv: Class13.allInstances()->forAll( c3_1,c3_2 | c3_1.Class13IntAttr4 > c3_2.Class13IntAttr6 ) xor self.Class13BoolAttr1 xor self.Class13BoolAttr2 xor self.Class13EnumAttr7 = #Enum0Elem3
	 inv: self.Class13IntAttr4 > 9 and self.Class13IntAttr5 <= 1 and self.Class13IntAttr5 = 5
	 inv: Class13.allInstances()->forAll(c1 | c1.Class13EnumAttr7 = #Enum0Elem1) 
	 inv: Class13.allInstances()->exists(c1 | c1.Class13EnumAttr8 = #Enum1Elem0) 

@Class14{Weight = 1} 
context Class14
	 inv: Class14.allInstances()->forAll( c4_1,c4_2 | c4_1.Class14IntAttr6 < c4_2.Class14IntAttr5 ) 
	 inv: not self.Class14BoolAttr3
	 inv: self.Class14BoolAttr3 or self.Class14BoolAttr0
	 inv: self.Class14BoolAttr1 or self.Class14BoolAttr2
	 inv: self.Class14EnumAttr7 = #Enum1Elem3
	 inv: self.Class14EnumAttr7 = #Enum1Elem2
	 inv: self.Class14EnumAttr12 = #Enum0Elem0
	 inv: self.Class14EnumAttr10 = #Enum0Elem2
	 inv: self.Class14BoolAttr0 or self.Class14BoolAttr2 and Class14.allInstances()->forAll( c4_1,c4_2 | c4_1.Class14IntAttr5 > c4_2.Class14IntAttr4 ) or self.Class14BoolAttr3
	 inv: self.Class14IntAttr4 <> 12 and self.Class14BoolAttr0 and self.Class14BoolAttr3 and self.Class14IntAttr5 > 0
	 inv: self.Class14EnumAttr12 = #Enum0Elem3 or self.Class14IntAttr6 < 11
	 inv: self.Class14EnumAttr10 <> #Enum0Elem2 xor self.Class14EnumAttr12 = #Enum0Elem2
	 inv: Class14.allInstances()->exists(c1 | c1.Class14BoolAttr2) 
	 inv: Class14.allInstances()->forAll(c1,c2 | c1.Class14BoolAttr2 xor c2.Class14BoolAttr1) 

@Class15{Weight = 1} 
context Class15
	 inv: Class15.allInstances()->forAll( c5_1,c5_2 | c5_1.Class15IntAttr4 <> c5_2.Class15IntAttr5 ) 
	 inv: not self.Class15BoolAttr1
	 inv: self.Class15BoolAttr1
	 inv: self.Class15BoolAttr3
	 inv: self.Class15EnumAttr8 <> #Enum1Elem5
	 inv: self.Class15EnumAttr9 = #Enum1Elem5
	 inv: self.Class15EnumAttr8 <> #Enum1Elem2
	 inv: self.Class15EnumAttr9 = #Enum1Elem4
	 inv: self.Class15IntAttr6 < 11 xor self.Class15IntAttr4 = 11
	 inv: Class15.allInstances()->forAll( c5_1,c5_2 | c5_1.Class15IntAttr6 < c5_2.Class15IntAttr4 ) xor self.Class15IntAttr4 <> 2
	 inv: Class15.allInstances()->forAll( c5_1,c5_2 | c5_1.Class15IntAttr6 < c5_2.Class15IntAttr5 ) or Class15.allInstances()->forAll( c5_1,c5_2 | c5_1.Class15IntAttr4 <> c5_2.Class15IntAttr6 ) xor self.Class15EnumAttr11 <> #Enum0Elem0
	 inv: self.Class15BoolAttr0 or self.Class15BoolAttr2 xor self.Class15IntAttr5 = 17 xor self.Class15BoolAttr1 xor self.Class15BoolAttr2
	 inv: Class15.allInstances()->forAll(c1 | c1.Class15IntAttr4 < 11) 
	 inv: Class15.allInstances()->exists(c1 | c1.Class15IntAttr4 >= 15) 

@Class16{Weight = 1} 
context Class16
	 inv: self.Class16IntAttr6 <> 3
	 inv: self.Class16IntAttr5 = 10
	 inv: Class16.allInstances()->forAll( c6_1,c6_2 | c6_1.Class16IntAttr4 <> c6_2.Class16IntAttr5 ) 
	 inv: not self.Class16BoolAttr3
	 inv: self.Class16BoolAttr0
	 inv: self.Class16BoolAttr2
	 inv: self.Class16EnumAttr8 <> #Enum2Elem6
	 inv: self.Class16EnumAttr9 <> #Enum1Elem2
	 inv: self.Class16EnumAttr7 <> #Enum1Elem1
	 inv: self.Class16EnumAttr8 = #Enum2Elem5
	 inv: self.Class16IntAttr4 <> 7 or self.Class16EnumAttr11 = #Enum1Elem2 and not self.Class16BoolAttr0
	 inv: Class16.allInstances()->forAll( c6_1,c6_2 | c6_1.Class16IntAttr4 <= c6_2.Class16IntAttr6 ) xor Class16.allInstances()->forAll( c6_1,c6_2 | c6_1.Class16IntAttr5 = c6_2.Class16IntAttr6 ) and self.Class16IntAttr5 <= 10
	 inv: self.Class16EnumAttr8 <> #Enum2Elem5 or self.Class16BoolAttr1 or self.Class16BoolAttr2 and self.Class16EnumAttr7 = #Enum1Elem0
	 inv: self.Class16IntAttr5 > 8 or self.Class16BoolAttr1 xor self.Class16BoolAttr3 and Class16.allInstances()->forAll( c6_1,c6_2 | c6_1.Class16IntAttr4 < c6_2.Class16IntAttr6 )
	 inv: Class16.allInstances()->forAll(c1 | c1.Class16IntAttr4 > 12) 
	 inv: Class16.allInstances()->exists(c1 | c1.Class16IntAttr4 <= 0) 

@Class17{Weight = 1} 
context Class17
	 inv: self.Class17IntAttr6 <= 9
	 inv: Class17.allInstances()->forAll( c7_1,c7_2 | c7_1.Class17IntAttr5 = c7_2.Class17IntAttr6 ) 
	 inv: self.Class17BoolAttr2 xor self.Class17BoolAttr0
	 inv: self.Class17BoolAttr1
	 inv: self.Class17BoolAttr0 or self.Class17BoolAttr2
	 inv: self.Class17EnumAttr12 <> #Enum2Elem5
	 inv: self.Class17EnumAttr12 <> #Enum2Elem3
	 inv: self.Class17EnumAttr8 <> #Enum2Elem6
	 inv: self.Class17EnumAttr7 <> #Enum0Elem2
	 inv: self.Class17BoolAttr3 xor self.Class17BoolAttr1 or self.Class17IntAttr6 <= 13
	 inv: Class17.allInstances()->forAll( c7_1,c7_2 | c7_1.Class17IntAttr6 >= c7_2.Class17IntAttr5 ) or self.Class17BoolAttr2 or self.Class17BoolAttr1 and Class17.allInstances()->forAll( c7_1,c7_2 | c7_1.Class17IntAttr6 = c7_2.Class17IntAttr4 )
	 inv: self.Class17IntAttr4 >= 5 or Class17.allInstances()->forAll( c7_1,c7_2 | c7_1.Class17IntAttr4 >= c7_2.Class17IntAttr6 ) and self.Class17EnumAttr9 = #Enum1Elem3
	 inv: Class17.allInstances()->forAll( c7_1,c7_2 | c7_1.Class17IntAttr5 <> c7_2.Class17IntAttr6 ) xor self.Class17EnumAttr11 <> #Enum2Elem4 or self.Class17IntAttr4 > 1
	 inv: Class17.allInstances()->exists(c1 | c1.Class17BoolAttr2) 
	 inv: Class17.allInstances()->exists(c1,c2|c1.Class17IntAttr4 < Class17IntAttr6) 

