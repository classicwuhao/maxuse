
;this file is automatically generated: Fri Sep 02 14:05:23 IST 2016

;declarations generated

(declare-fun class10_Class10IntAttr3 ( Int) Int )
(declare-fun class10_Class10IntAttr4 ( Int) Int )
(declare-fun ka9237da9_c0a3_4f65_bdc8_82936eac6269 () Int )
(declare-fun class11_Class11IntAttr4 ( Int) Int )
(declare-fun oclExcludes ( Int Int) Bool )
(declare-fun class11_Class11IntAttr3 ( Int) Int )
(declare-fun class14_Class14BoolAttr0 ( Int) Bool )
(declare-fun class14_Class14BoolAttr1 ( Int) Bool )
(declare-fun class8_Class8IntAttr2 ( Int) Int )
(declare-fun k4a78f86e_3534_420e_887a_6cae00001f42 () Int )
(declare-fun type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 ( Int) Bool )
(declare-fun class8_Class8IntAttr3 ( Int) Int )
(declare-fun rel_39907bc0_e50f_4aa0_823d_72636ed44852_Class12_Class5 ( Int Int) Bool )
(declare-fun class9_Class9BoolAttr0 ( Int) Bool )
(declare-fun type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 ( Int) Bool )
(declare-fun class9_Class9BoolAttr1 ( Int) Bool )
(declare-fun class12_Class12BoolAttr2 ( Int) Bool )
(declare-fun class12_Class12BoolAttr1 ( Int) Bool )
(declare-fun class12_Class12BoolAttr0 ( Int) Bool )
(declare-fun rel_a0029989_1ca9_4bab_816b_4336912eae8c_Class5_Class3 ( Int Int) Bool )
(declare-fun aux101 () Int )
(declare-fun aux102 () Int )
(declare-fun aux100 () Int )
(declare-fun class16_Class16IntAttr5 ( Int) Int )
(declare-fun class16_Class16IntAttr6 ( Int) Int )
(declare-fun kf2c075ff_9a29_4e1d_a65d_4f467cf8a1df () Int )
(declare-fun class17_Class17IntAttr5 ( Int) Int )
(declare-fun class17_Class17IntAttr6 ( Int) Int )
(declare-fun class16_Class16IntAttr4 ( Int) Int )
(declare-fun class17_Class17IntAttr4 ( Int) Int )
(declare-fun aux109 () Int )
(declare-fun k42947453_8b79_416f_ac9c_66c4ab32681c () Int )
(declare-fun k0096d4a8_e7d6_4920_84fd_7515d25423f5 () Int )
(declare-fun aux107 () Int )
(declare-fun aux108 () Int )
(declare-fun aux105 () Int )
(declare-fun class3_Class3IntAttr1 ( Int) Int )
(declare-fun aux106 () Int )
(declare-fun aux103 () Int )
(declare-fun aux104 () Int )
(declare-fun Cardinality ( Int) Int )
(declare-fun rel_cbcf8a49_7faa_4f0f_891a_aad24c4ce864_Class14_Class13 ( Int Int) Bool )
(declare-fun class14_Class14BoolAttr2 ( Int) Bool )
(declare-fun class14_Class14BoolAttr3 ( Int) Bool )
(declare-fun class0_Class0IntAttr1 ( Int) Int )
(declare-fun type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 ( Int) Bool )
(declare-fun aux123 () Int )
(declare-fun aux124 () Int )
(declare-fun aux121 () Int )
(declare-fun aux122 () Int )
(declare-fun type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 ( Int) Bool )
(declare-fun class13_Class13IntAttr4 ( Int) Int )
(declare-fun aux120 () Int )
(declare-fun class13_Class13IntAttr6 ( Int) Int )
(declare-fun class13_Class13IntAttr5 ( Int) Int )
(declare-fun kdee941b1_f9e5_4313_9348_e2cbcdcd32c6 () Int )
(declare-fun ka4f76ea1_4d8e_4a26_9be7_04757654a754 () Int )
(declare-fun class12_Class12IntAttr4 ( Int) Int )
(declare-fun class12_Class12IntAttr3 ( Int) Int )
(declare-fun aux129 () Int )
(declare-fun aux127 () Int )
(declare-fun aux128 () Int )
(declare-fun aux125 () Int )
(declare-fun aux126 () Int )
(declare-fun aux112 () Int )
(declare-fun aux113 () Int )
(declare-fun aux110 () Int )
(declare-fun kf6d226b9_1bc7_4de8_965a_4575a52c6fce () Int )
(declare-fun aux111 () Int )
(declare-fun class15_Class15IntAttr5 ( Int) Int )
(declare-fun class15_Class15IntAttr6 ( Int) Int )
(declare-fun class15_Class15IntAttr4 ( Int) Int )
(declare-fun class14_Class14IntAttr4 ( Int) Int )
(declare-fun class17_Class17BoolAttr0 ( Int) Bool )
(declare-fun class17_Class17BoolAttr1 ( Int) Bool )
(declare-fun class17_Class17BoolAttr2 ( Int) Bool )
(declare-fun class17_Class17BoolAttr3 ( Int) Bool )
(declare-fun class14_Class14IntAttr6 ( Int) Int )
(declare-fun class14_Class14IntAttr5 ( Int) Int )
(declare-fun k5bdeff42_9b09_4243_9beb_a67dc66af56c () Int )
(declare-fun kd496562a_d15d_4371_9b7c_4952e44a6961 () Int )
(declare-fun aux118 () Int )
(declare-fun aux119 () Int )
(declare-fun aux116 () Int )
(declare-fun aux117 () Int )
(declare-fun aux114 () Int )
(declare-fun aux115 () Int )
(declare-fun type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 ( Int) Bool )
(declare-fun aux140 () Int )
(declare-fun aux67 () Int )
(declare-fun aux66 () Int )
(declare-fun aux69 () Int )
(declare-fun aux68 () Int )
(declare-fun aux63 () Int )
(declare-fun aux62 () Int )
(declare-fun aux65 () Int )
(declare-fun aux64 () Int )
(declare-fun k064cc699_f877_4d25_a581_95ce28642c06 () Int )
(declare-fun aux70 () Int )
(declare-fun aux72 () Int )
(declare-fun aux71 () Int )
(declare-fun kcb305357_8f14_4c7b_89be_dc9819c8dbd5 () Int )
(declare-fun aux134 () Int )
(declare-fun aux135 () Int )
(declare-fun aux132 () Int )
(declare-fun aux133 () Int )
(declare-fun aux130 () Int )
(declare-fun aux131 () Int )
(declare-fun aux78 () Int )
(declare-fun aux77 () Int )
(declare-fun aux79 () Int )
(declare-fun rel_38817758_cfa2_49a5_9bb6_07a3c1e1dc19_Class1_Class12 ( Int Int) Bool )
(declare-fun aux74 () Int )
(declare-fun aux73 () Int )
(declare-fun aux76 () Int )
(declare-fun aux75 () Int )
(declare-fun aux81 () Int )
(declare-fun aux80 () Int )
(declare-fun aux83 () Int )
(declare-fun aux82 () Int )
(declare-fun rel_d2bfc7a9_6be4_4da4_b555_247fa06afc22_Class8_Class17 ( Int Int) Bool )
(declare-fun aux138 () Int )
(declare-fun aux139 () Int )
(declare-fun aux136 () Int )
(declare-fun aux137 () Int )
(declare-fun aux89 () Int )
(declare-fun aux88 () Int )
(declare-fun aux85 () Int )
(declare-fun aux84 () Int )
(declare-fun aux87 () Int )
(declare-fun aux86 () Int )
(declare-fun aux92 () Int )
(declare-fun aux91 () Int )
(declare-fun aux94 () Int )
(declare-fun aux93 () Int )
(declare-fun aux90 () Int )
(declare-fun k9c106126_8660_41ee_a4e3_bb327ecf9118 () Int )
(declare-fun rel_33aad130_4393_4f08_86f4_3774f901ee2a_Class16_Class6 ( Int Int) Bool )
(declare-fun k8f7ae0ae_7e0d_4f0a_9b83_3b5be59b92e2 () Int )
(declare-fun aux99 () Int )
(declare-fun aux96 () Int )
(declare-fun aux95 () Int )
(declare-fun aux98 () Int )
(declare-fun aux97 () Int )
(declare-fun aux27 () Int )
(declare-fun aux26 () Int )
(declare-fun aux29 () Int )
(declare-fun aux28 () Int )
(declare-fun aux23 () Int )
(declare-fun aux22 () Int )
(declare-fun aux25 () Int )
(declare-fun aux24 () Int )
(declare-fun aux21 () Int )
(declare-fun aux20 () Int )
(declare-fun rel_b7bc32d7_5803_4f5c_863d_390c6b206b04_Class9_Class16 ( Int Int) Bool )
(declare-fun class4_Class4IntAttr1 ( Int) Int )
(declare-fun weight9 () Int )
(declare-fun weight8 () Int )
(declare-fun rel_3188ea58_4e43_4e8b_adca_3df871f7ba7a_Class4_Class14 ( Int Int) Bool )
(declare-fun type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 ( Int) Bool )
(declare-fun aux38 () Int )
(declare-fun aux37 () Int )
(declare-fun aux39 () Int )
(declare-fun aux34 () Int )
(declare-fun aux33 () Int )
(declare-fun aux36 () Int )
(declare-fun aux35 () Int )
(declare-fun aux30 () Int )
(declare-fun aux32 () Int )
(declare-fun aux31 () Int )
(declare-fun k9f4e5c8f_6bad_4015_9950_b932493fcd00 () Int )
(declare-fun class7_Class7IntAttr3 ( Int) Int )
(declare-fun class7_Class7IntAttr2 ( Int) Int )
(declare-fun aux1 () Int )
(declare-fun aux0 () Int )
(declare-fun aux3 () Int )
(declare-fun aux2 () Int )
(declare-fun aux49 () Int )
(declare-fun aux48 () Int )
(declare-fun aux45 () Int )
(declare-fun kcbbdd4e8_7884_4fc7_a938_4e44207cd4cc () Int )
(declare-fun aux44 () Int )
(declare-fun aux47 () Int )
(declare-fun aux46 () Int )
(declare-fun aux41 () Int )
(declare-fun aux40 () Int )
(declare-fun aux43 () Int )
(declare-fun aux42 () Int )
(declare-fun k0a2ca774_7f00_49d2_9a11_9900dd127c3d () Int )
(declare-fun aux50 () Int )
(declare-fun aux9 () Int )
(declare-fun aux8 () Int )
(declare-fun aux5 () Int )
(declare-fun aux4 () Int )
(declare-fun aux7 () Int )
(declare-fun aux6 () Int )
(declare-fun rel_9e20f821_f167_4e8b_875c_486eeddc16a5_Class7_Class8 ( Int Int) Bool )
(declare-fun aux59 () Int )
(declare-fun weight7 () Int )
(declare-fun aux56 () Int )
(declare-fun weight6 () Int )
(declare-fun aux55 () Int )
(declare-fun weight5 () Int )
(declare-fun aux58 () Int )
(declare-fun weight4 () Int )
(declare-fun aux57 () Int )
(declare-fun weight3 () Int )
(declare-fun aux52 () Int )
(declare-fun weight2 () Int )
(declare-fun kdcd8c4cf_eab4_470f_865b_7122c7041967 () Int )
(declare-fun aux51 () Int )
(declare-fun weight1 () Int )
(declare-fun aux54 () Int )
(declare-fun weight0 () Int )
(declare-fun aux53 () Int )
(declare-fun aux61 () Int )
(declare-fun aux60 () Int )
(declare-fun type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 ( Int) Bool )
(declare-fun weight90 () Int )
(declare-fun type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 ( Int) Bool )
(declare-fun weight99 () Int )
(declare-fun class13_Class13BoolAttr3 ( Int) Bool )
(declare-fun weight93 () Int )
(declare-fun class13_Class13BoolAttr2 ( Int) Bool )
(declare-fun weight94 () Int )
(declare-fun class13_Class13BoolAttr1 ( Int) Bool )
(declare-fun rel_a6b2c786_7b06_4a5b_a333_7eae1a392be2_Class11_Class2 ( Int Int) Bool )
(declare-fun weight91 () Int )
(declare-fun class13_Class13BoolAttr0 ( Int) Bool )
(declare-fun weight92 () Int )
(declare-fun weight97 () Int )
(declare-fun weight98 () Int )
(declare-fun weight95 () Int )
(declare-fun weight96 () Int )
(declare-fun k00538bfc_fd12_45d8_90d1_30ded018ef41 () Int )
(declare-fun k1314a9039_d543_4a91_b405_8fba693c33b2 () Int )
(declare-fun class8_Class8BoolAttr1 ( Int) Bool )
(declare-fun class8_Class8BoolAttr0 ( Int) Bool )
(declare-fun rel_fad1ad34_7d79_449c_82ef_1a81d1c14372_Class0_Class0 ( Int Int) Bool )
(declare-fun kc4682171_cbe9_4495_b17d_4c1761426c72 () Int )
(declare-fun aux19 () Int )
(declare-fun type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 ( Int) Bool )
(declare-fun aux16 () Int )
(declare-fun aux15 () Int )
(declare-fun aux18 () Int )
(declare-fun aux17 () Int )
(declare-fun aux12 () Int )
(declare-fun aux11 () Int )
(declare-fun aux14 () Int )
(declare-fun aux13 () Int )
(declare-fun aux10 () Int )
(declare-fun oclSelect ( Int Bool) Int )
(declare-fun class1_Class1IntAttr1 ( Int) Int )
(declare-fun rel_3da8073d_7ce5_4171_99b2_c7d011a21be0_Class13_Class7 ( Int Int) Bool )
(declare-fun kb0ee2e83_4dab_4ba9_8f6f_5548ebf45abf () Int )
(declare-fun kaeaae99c_ef5f_4682_aa38_b1c60d494459 () Int )
(declare-fun weight57 () Int )
(declare-fun weight58 () Int )
(declare-fun weight55 () Int )
(declare-fun weight56 () Int )
(declare-fun weight59 () Int )
(declare-fun weight50 () Int )
(declare-fun weight53 () Int )
(declare-fun weight54 () Int )
(declare-fun k1b2d42b29_3aac_4d7c_9d3b_635f3300500a () Int )
(declare-fun weight51 () Int )
(declare-fun weight52 () Int )
(declare-fun rel_9af84217_43b2_49ac_ad52_cc6a272439a9_Class10_Class9 ( Int Int) Bool )
(declare-fun class15_Class15BoolAttr1 ( Int) Bool )
(declare-fun class15_Class15BoolAttr0 ( Int) Bool )
(declare-fun class15_Class15BoolAttr3 ( Int) Bool )
(declare-fun class15_Class15BoolAttr2 ( Int) Bool )
(declare-fun weight68 () Int )
(declare-fun weight69 () Int )
(declare-fun weight66 () Int )
(declare-fun weight67 () Int )
(declare-fun weight60 () Int )
(declare-fun weight61 () Int )
(declare-fun weight64 () Int )
(declare-fun weight65 () Int )
(declare-fun weight62 () Int )
(declare-fun weight63 () Int )
(declare-fun class9_Class9IntAttr3 ( Int) Int )
(declare-fun class9_Class9IntAttr2 ( Int) Int )
(declare-fun weight79 () Int )
(declare-fun weight77 () Int )
(declare-fun weight78 () Int )
(declare-fun weight71 () Int )
(declare-fun weight72 () Int )
(declare-fun weight70 () Int )
(declare-fun weight75 () Int )
(declare-fun obj_801ea87f_a353_4375_844e_ebb28752cbe0 ( Int) Int )
(declare-fun weight76 () Int )
(declare-fun weight73 () Int )
(declare-fun weight74 () Int )
(declare-fun class6_Class6IntAttr2 ( Int) Int )
(declare-fun class6_Class6IntAttr3 ( Int) Int )
(declare-fun type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 ( Int) Bool )
(declare-fun k5064a7c7_46b1_454c_b123_9142f2e41c25 () Int )
(declare-fun rel_454a40e6_97f8_4a77_806b_f0867abb0bf0_Class17_Class11 ( Int Int) Bool )
(declare-fun type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 ( Int) Bool )
(declare-fun weight88 () Int )
(declare-fun rel_da4e3b61_a74b_404d_958b_0c366f5ea0dc_Class15_Class15 ( Int Int) Bool )
(declare-fun weight89 () Int )
(declare-fun weight82 () Int )
(declare-fun weight83 () Int )
(declare-fun weight80 () Int )
(declare-fun weight81 () Int )
(declare-fun weight86 () Int )
(declare-fun weight87 () Int )
(declare-fun weight84 () Int )
(declare-fun weight85 () Int )
(declare-fun rel_be60a460_3c78_4213_95ae_d47d3bab16cf_Class6_Class4 ( Int Int) Bool )
(declare-fun kbe10f899_3aae_4670_813b_84473739d516 () Int )
(declare-fun weight129 () Int )
(declare-fun class16_Class16BoolAttr3 ( Int) Bool )
(declare-fun weight13 () Int )
(declare-fun weight130 () Int )
(declare-fun class16_Class16BoolAttr2 ( Int) Bool )
(declare-fun weight14 () Int )
(declare-fun weight131 () Int )
(declare-fun weight11 () Int )
(declare-fun weight12 () Int )
(declare-fun weight17 () Int )
(declare-fun weight18 () Int )
(declare-fun class16_Class16BoolAttr1 ( Int) Bool )
(declare-fun weight15 () Int )
(declare-fun class16_Class16BoolAttr0 ( Int) Bool )
(declare-fun weight16 () Int )
(declare-fun class4_Class4BoolAttr0 ( Int) Bool )
(declare-fun weight138 () Int )
(declare-fun weight139 () Int )
(declare-fun weight136 () Int )
(declare-fun weight137 () Int )
(declare-fun weight134 () Int )
(declare-fun weight10 () Int )
(declare-fun weight135 () Int )
(declare-fun weight132 () Int )
(declare-fun weight133 () Int )
(declare-fun weight19 () Int )
(declare-fun k2288d44f9_ecd1_4c91_8eb9_af5a897f12e9 () Int )
(declare-fun Enum0 ( Int) Int )
(declare-fun Enum1 ( Int) Int )
(declare-fun weight24 () Int )
(declare-fun Enum2 ( Int) Int )
(declare-fun weight25 () Int )
(declare-fun weight22 () Int )
(declare-fun weight23 () Int )
(declare-fun weight140 () Int )
(declare-fun weight28 () Int )
(declare-fun weight29 () Int )
(declare-fun weight26 () Int )
(declare-fun class5_Class5BoolAttr0 ( Int) Bool )
(declare-fun weight27 () Int )
(declare-fun weight20 () Int )
(declare-fun weight21 () Int )
(declare-fun class10_Class10BoolAttr2 ( Int) Bool )
(declare-fun type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 ( Int) Bool )
(declare-fun weight109 () Int )
(declare-fun weight107 () Int )
(declare-fun weight108 () Int )
(declare-fun class10_Class10BoolAttr1 ( Int) Bool )
(declare-fun class10_Class10BoolAttr0 ( Int) Bool )
(declare-fun weight35 () Int )
(declare-fun weight36 () Int )
(declare-fun weight33 () Int )
(declare-fun weight34 () Int )
(declare-fun weight39 () Int )
(declare-fun container_ ( Int) Int )
(declare-fun weight37 () Int )
(declare-fun weight38 () Int )
(declare-fun weight116 () Int )
(declare-fun weight117 () Int )
(declare-fun weight114 () Int )
(declare-fun weight115 () Int )
(declare-fun weight31 () Int )
(declare-fun weight112 () Int )
(declare-fun weight32 () Int )
(declare-fun weight113 () Int )
(declare-fun weight110 () Int )
(declare-fun weight30 () Int )
(declare-fun weight111 () Int )
(declare-fun class11_Class11BoolAttr0 ( Int) Bool )
(declare-fun class11_Class11BoolAttr1 ( Int) Bool )
(declare-fun class11_Class11BoolAttr2 ( Int) Bool )
(declare-fun kcebdcdf7_cd1a_4970_9315_a1ddfbe26dbb () Int )
(declare-fun weight118 () Int )
(declare-fun weight119 () Int )
(declare-fun weight46 () Int )
(declare-fun weight47 () Int )
(declare-fun weight120 () Int )
(declare-fun weight44 () Int )
(declare-fun weight45 () Int )
(declare-fun weight48 () Int )
(declare-fun weight49 () Int )
(declare-fun weight127 () Int )
(declare-fun weight128 () Int )
(declare-fun weight125 () Int )
(declare-fun weight126 () Int )
(declare-fun weight42 () Int )
(declare-fun weight123 () Int )
(declare-fun weight43 () Int )
(declare-fun weight124 () Int )
(declare-fun weight40 () Int )
(declare-fun weight121 () Int )
(declare-fun weight41 () Int )
(declare-fun weight122 () Int )
(declare-fun k2f118ea27_6610_4408_90b7_190e7ba6bc2a () Int )
(declare-fun class1_Class1BoolAttr0 ( Int) Bool )
(declare-fun class2_Class2IntAttr1 ( Int) Int )
(declare-fun type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 ( Int) Bool )
(declare-fun rel_640acd0d_3113_4791_8229_c0213ea0cd40_Class3_Class10 ( Int Int) Bool )
(declare-fun type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 ( Int) Bool )
(declare-fun class7_Class7BoolAttr0 ( Int) Bool )
(declare-fun class7_Class7BoolAttr1 ( Int) Bool )
(declare-fun class6_Class6BoolAttr1 ( Int) Bool )
(declare-fun class6_Class6BoolAttr0 ( Int) Bool )
(declare-fun oclIncludes ( Int Int) Bool )
(declare-fun class5_Class5IntAttr1 ( Int) Int )
(declare-fun rel_d32d36e6_b04f_400b_a26c_a2eb7bd3f823_Class2_Class1 ( Int Int) Bool )
(declare-fun weight105 () Int )
(declare-fun weight106 () Int )
(declare-fun weight103 () Int )
(declare-fun type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 ( Int) Bool )
(declare-fun weight104 () Int )
(declare-fun weight101 () Int )
(declare-fun weight102 () Int )
(declare-fun weight100 () Int )
(declare-fun type_01081500_5812_4a42_814b_42d87b4760fc_Class14 ( Int) Bool )
(declare-fun class0_Class0BoolAttr0 ( Int) Bool )
(declare-fun type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 ( Int) Bool )
(declare-fun ObjAt ( Int Int) Int )
(declare-fun class3_Class3BoolAttr0 ( Int) Bool )
(declare-fun class2_Class2BoolAttr0 ( Int) Bool )
(declare-fun k2057de33_820e_4460_9eea_f00834574cfd () Int )
(declare-fun type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 ( Int) Bool )

;formula(s) generated
(assert (forall ((p Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 p )  (and (>= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  4)))))
(assert (forall ((p Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 p )  (and (>= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  5)))))
(assert (forall ((p Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 p )  (and (>= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  0) (<= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  6)))))
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_fad1ad34_7d79_449c_82ef_1a81d1c14372_Class0_Class0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 x )  ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  0)) (and (= (* ( Cardinality ( container_ y )  )  0) (* ( Cardinality ( container_ x )  )  k5064a7c7_46b1_454c_b123_9142f2e41c25)) (>= k5064a7c7_46b1_454c_b123_9142f2e41c25 0))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  k8f7ae0ae_7e0d_4f0a_9b83_3b5be59b92e2)) (>= k8f7ae0ae_7e0d_4f0a_9b83_3b5be59b92e2 0))) (and (= (* ( Cardinality ( container_ x )  )  k1b2d42b29_3aac_4d7c_9d3b_635f3300500a) (* ( Cardinality ( container_ y )  )  k2f118ea27_6610_4408_90b7_190e7ba6bc2a)) (and (>= k1b2d42b29_3aac_4d7c_9d3b_635f3300500a 0) (>= k2f118ea27_6610_4408_90b7_190e7ba6bc2a 0)))))) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_fad1ad34_7d79_449c_82ef_1a81d1c14372_Class0_Class0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 x )  ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  0)) (and (= (* ( Cardinality ( container_ y )  )  0) (* ( Cardinality ( container_ x )  )  k5064a7c7_46b1_454c_b123_9142f2e41c25)) (>= k5064a7c7_46b1_454c_b123_9142f2e41c25 0))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  k8f7ae0ae_7e0d_4f0a_9b83_3b5be59b92e2)) (>= k8f7ae0ae_7e0d_4f0a_9b83_3b5be59b92e2 0))) (and (= (* ( Cardinality ( container_ x )  )  k1b2d42b29_3aac_4d7c_9d3b_635f3300500a) (* ( Cardinality ( container_ y )  )  k2f118ea27_6610_4408_90b7_190e7ba6bc2a)) (and (>= k1b2d42b29_3aac_4d7c_9d3b_635f3300500a 0) (>= k2f118ea27_6610_4408_90b7_190e7ba6bc2a 0)))))))
(assert (and (=> (= aux0 0) (= weight0 1)) (=> (= aux0 1) (= weight0 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_9af84217_43b2_49ac_ad52_cc6a272439a9_Class10_Class9 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 x ) ) ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_9af84217_43b2_49ac_ad52_cc6a272439a9_Class10_Class9 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 x ) ) ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  ka9237da9_c0a3_4f65_bdc8_82936eac6269)) (>= ka9237da9_c0a3_4f65_bdc8_82936eac6269 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kc4682171_cbe9_4495_b17d_4c1761426c72)) (>= kc4682171_cbe9_4495_b17d_4c1761426c72 0))))) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_9af84217_43b2_49ac_ad52_cc6a272439a9_Class10_Class9 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 x ) ) ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  ka9237da9_c0a3_4f65_bdc8_82936eac6269)) (>= ka9237da9_c0a3_4f65_bdc8_82936eac6269 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kc4682171_cbe9_4495_b17d_4c1761426c72)) (>= kc4682171_cbe9_4495_b17d_4c1761426c72 0))))))
(assert (and (=> (= aux1 0) (= weight1 1)) (=> (= aux1 1) (= weight1 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_a6b2c786_7b06_4a5b_a333_7eae1a392be2_Class11_Class2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 x )  ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_a6b2c786_7b06_4a5b_a333_7eae1a392be2_Class11_Class2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 x )  ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  k2057de33_820e_4460_9eea_f00834574cfd)) (>= k2057de33_820e_4460_9eea_f00834574cfd 0))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  kaeaae99c_ef5f_4682_aa38_b1c60d494459)) (>= kaeaae99c_ef5f_4682_aa38_b1c60d494459 0))))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_a6b2c786_7b06_4a5b_a333_7eae1a392be2_Class11_Class2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 x )  ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  k2057de33_820e_4460_9eea_f00834574cfd)) (>= k2057de33_820e_4460_9eea_f00834574cfd 0))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  kaeaae99c_ef5f_4682_aa38_b1c60d494459)) (>= kaeaae99c_ef5f_4682_aa38_b1c60d494459 0))))))
(assert (and (=> (= aux2 0) (= weight2 1)) (=> (= aux2 1) (= weight2 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_39907bc0_e50f_4aa0_823d_72636ed44852_Class12_Class5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 x )  ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (and (>= aux3 0) (<= aux3 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_39907bc0_e50f_4aa0_823d_72636ed44852_Class12_Class5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 x )  ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  3)) (and (= (* ( Cardinality ( container_ y )  )  3) (* ( Cardinality ( container_ x )  )  k4a78f86e_3534_420e_887a_6cae00001f42)) (>= k4a78f86e_3534_420e_887a_6cae00001f42 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  4))) (and (= (* ( Cardinality ( container_ y )  )  4) (* ( Cardinality ( container_ x )  )  k42947453_8b79_416f_ac9c_66c4ab32681c)) (>= k42947453_8b79_416f_ac9c_66c4ab32681c 0))))) (and (= aux3 1) true)) (and (= aux3 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_39907bc0_e50f_4aa0_823d_72636ed44852_Class12_Class5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 x )  ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  3)) (and (= (* ( Cardinality ( container_ y )  )  3) (* ( Cardinality ( container_ x )  )  k4a78f86e_3534_420e_887a_6cae00001f42)) (>= k4a78f86e_3534_420e_887a_6cae00001f42 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  4))) (and (= (* ( Cardinality ( container_ y )  )  4) (* ( Cardinality ( container_ x )  )  k42947453_8b79_416f_ac9c_66c4ab32681c)) (>= k42947453_8b79_416f_ac9c_66c4ab32681c 0))))))
(assert (and (=> (= aux3 0) (= weight3 1)) (=> (= aux3 1) (= weight3 0))))
(assert (and (>= aux4 0) (<= aux4 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_3da8073d_7ce5_4171_99b2_c7d011a21be0_Class13_Class7 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 x )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux4 1) true)) (and (= aux4 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_3da8073d_7ce5_4171_99b2_c7d011a21be0_Class13_Class7 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 x )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux4 0) (= weight4 1)) (=> (= aux4 1) (= weight4 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_cbcf8a49_7faa_4f0f_891a_aad24c4ce864_Class14_Class13 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x )  ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_cbcf8a49_7faa_4f0f_891a_aad24c4ce864_Class14_Class13 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x )  ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux5 0) (<= aux5 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_cbcf8a49_7faa_4f0f_891a_aad24c4ce864_Class14_Class13 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x )  ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  2))) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  2))))) (and (= aux5 1) true)) (and (= aux5 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_cbcf8a49_7faa_4f0f_891a_aad24c4ce864_Class14_Class13 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x )  ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  2))) (= (* ( Cardinality ( container_ x )  )  3) (* ( Cardinality ( container_ y )  )  2))))))
(assert (and (=> (= aux5 0) (= weight5 1)) (=> (= aux5 1) (= weight5 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_da4e3b61_a74b_404d_958b_0c366f5ea0dc_Class15_Class15 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 x )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (and (>= aux6 0) (<= aux6 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_da4e3b61_a74b_404d_958b_0c366f5ea0dc_Class15_Class15 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 x )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2)) (and (= (* ( Cardinality ( container_ y )  )  2) (* ( Cardinality ( container_ x )  )  kcb305357_8f14_4c7b_89be_dc9819c8dbd5)) (>= kcb305357_8f14_4c7b_89be_dc9819c8dbd5 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  4))) (and (= (* ( Cardinality ( container_ y )  )  4) (* ( Cardinality ( container_ x )  )  k9c106126_8660_41ee_a4e3_bb327ecf9118)) (>= k9c106126_8660_41ee_a4e3_bb327ecf9118 0))))) (and (= aux6 1) true)) (and (= aux6 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_da4e3b61_a74b_404d_958b_0c366f5ea0dc_Class15_Class15 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 x )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2)) (and (= (* ( Cardinality ( container_ y )  )  2) (* ( Cardinality ( container_ x )  )  kcb305357_8f14_4c7b_89be_dc9819c8dbd5)) (>= kcb305357_8f14_4c7b_89be_dc9819c8dbd5 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  4))) (and (= (* ( Cardinality ( container_ y )  )  4) (* ( Cardinality ( container_ x )  )  k9c106126_8660_41ee_a4e3_bb327ecf9118)) (>= k9c106126_8660_41ee_a4e3_bb327ecf9118 0))))))
(assert (and (=> (= aux6 0) (= weight6 1)) (=> (= aux6 1) (= weight6 0))))
(assert (and (>= aux7 0) (<= aux7 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_33aad130_4393_4f08_86f4_3774f901ee2a_Class16_Class6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x ) ) ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  kd496562a_d15d_4371_9b7c_4952e44a6961)) (>= kd496562a_d15d_4371_9b7c_4952e44a6961 0))) (and (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  k0096d4a8_e7d6_4920_84fd_7515d25423f5)) (>= k0096d4a8_e7d6_4920_84fd_7515d25423f5 0))))) (and (= aux7 1) true)) (and (= aux7 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_33aad130_4393_4f08_86f4_3774f901ee2a_Class16_Class6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 x ) ) ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  kd496562a_d15d_4371_9b7c_4952e44a6961)) (>= kd496562a_d15d_4371_9b7c_4952e44a6961 0))) (and (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  k0096d4a8_e7d6_4920_84fd_7515d25423f5)) (>= k0096d4a8_e7d6_4920_84fd_7515d25423f5 0))))))
(assert (and (=> (= aux7 0) (= weight7 1)) (=> (= aux7 1) (= weight7 0))))
(assert (and (>= aux8 0) (<= aux8 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_454a40e6_97f8_4a77_806b_f0867abb0bf0_Class17_Class11 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 x )  ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux8 1) true)) (and (= aux8 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_454a40e6_97f8_4a77_806b_f0867abb0bf0_Class17_Class11 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 x )  ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux8 0) (= weight8 1)) (=> (= aux8 1) (= weight8 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_38817758_cfa2_49a5_9bb6_07a3c1e1dc19_Class1_Class12 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 x )  ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (and (>= aux9 0) (<= aux9 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_38817758_cfa2_49a5_9bb6_07a3c1e1dc19_Class1_Class12 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 x )  ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k064cc699_f877_4d25_a581_95ce28642c06)) (>= k064cc699_f877_4d25_a581_95ce28642c06 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kcebdcdf7_cd1a_4970_9315_a1ddfbe26dbb)) (>= kcebdcdf7_cd1a_4970_9315_a1ddfbe26dbb 0))))) (and (= aux9 1) true)) (and (= aux9 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_38817758_cfa2_49a5_9bb6_07a3c1e1dc19_Class1_Class12 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 x )  ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k064cc699_f877_4d25_a581_95ce28642c06)) (>= k064cc699_f877_4d25_a581_95ce28642c06 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kcebdcdf7_cd1a_4970_9315_a1ddfbe26dbb)) (>= kcebdcdf7_cd1a_4970_9315_a1ddfbe26dbb 0))))))
(assert (and (=> (= aux9 0) (= weight9 1)) (=> (= aux9 1) (= weight9 0))))
(assert (and (>= aux10 0) (<= aux10 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_d32d36e6_b04f_400b_a26c_a2eb7bd3f823_Class2_Class1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 x )  ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kf2c075ff_9a29_4e1d_a65d_4f467cf8a1df)) (>= kf2c075ff_9a29_4e1d_a65d_4f467cf8a1df 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k00538bfc_fd12_45d8_90d1_30ded018ef41)) (>= k00538bfc_fd12_45d8_90d1_30ded018ef41 0))))) (and (= aux10 1) true)) (and (= aux10 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_d32d36e6_b04f_400b_a26c_a2eb7bd3f823_Class2_Class1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 x )  ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kf2c075ff_9a29_4e1d_a65d_4f467cf8a1df)) (>= kf2c075ff_9a29_4e1d_a65d_4f467cf8a1df 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k00538bfc_fd12_45d8_90d1_30ded018ef41)) (>= k00538bfc_fd12_45d8_90d1_30ded018ef41 0))))))
(assert (and (=> (= aux10 0) (= weight10 1)) (=> (= aux10 1) (= weight10 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_640acd0d_3113_4791_8229_c0213ea0cd40_Class3_Class10 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 x )  (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 y )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 y ) ))) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux11 0) (<= aux11 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_640acd0d_3113_4791_8229_c0213ea0cd40_Class3_Class10 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 x )  (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 y )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 y ) ))) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  kf6d226b9_1bc7_4de8_965a_4575a52c6fce)) (>= kf6d226b9_1bc7_4de8_965a_4575a52c6fce 0))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  k0a2ca774_7f00_49d2_9a11_9900dd127c3d)) (>= k0a2ca774_7f00_49d2_9a11_9900dd127c3d 0))))) (and (= aux11 1) true)) (and (= aux11 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_640acd0d_3113_4791_8229_c0213ea0cd40_Class3_Class10 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 x )  (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 y )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 y ) ))) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  kf6d226b9_1bc7_4de8_965a_4575a52c6fce)) (>= kf6d226b9_1bc7_4de8_965a_4575a52c6fce 0))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  k0a2ca774_7f00_49d2_9a11_9900dd127c3d)) (>= k0a2ca774_7f00_49d2_9a11_9900dd127c3d 0))))))
(assert (and (=> (= aux11 0) (= weight11 1)) (=> (= aux11 1) (= weight11 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_3188ea58_4e43_4e8b_adca_3df871f7ba7a_Class4_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_3188ea58_4e43_4e8b_adca_3df871f7ba7a_Class4_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux12 0) (<= aux12 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_3188ea58_4e43_4e8b_adca_3df871f7ba7a_Class4_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2))))) (and (= aux12 1) true)) (and (= aux12 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_3188ea58_4e43_4e8b_adca_3df871f7ba7a_Class4_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 x )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  2))))))
(assert (and (=> (= aux12 0) (= weight12 1)) (=> (= aux12 1) (= weight12 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_a0029989_1ca9_4bab_816b_4336912eae8c_Class5_Class3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 x )  ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux13 0) (<= aux13 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_a0029989_1ca9_4bab_816b_4336912eae8c_Class5_Class3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 x )  ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  2)) (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  2))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  ka4f76ea1_4d8e_4a26_9be7_04757654a754)) (>= ka4f76ea1_4d8e_4a26_9be7_04757654a754 0))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  kb0ee2e83_4dab_4ba9_8f6f_5548ebf45abf)) (>= kb0ee2e83_4dab_4ba9_8f6f_5548ebf45abf 0))))) (and (= aux13 1) true)) (and (= aux13 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_a0029989_1ca9_4bab_816b_4336912eae8c_Class5_Class3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 x )  ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  2)) (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  2))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  ka4f76ea1_4d8e_4a26_9be7_04757654a754)) (>= ka4f76ea1_4d8e_4a26_9be7_04757654a754 0))) (and (= (* ( Cardinality ( container_ x )  )  4) (* ( Cardinality ( container_ y )  )  kb0ee2e83_4dab_4ba9_8f6f_5548ebf45abf)) (>= kb0ee2e83_4dab_4ba9_8f6f_5548ebf45abf 0))))))
(assert (and (=> (= aux13 0) (= weight13 1)) (=> (= aux13 1) (= weight13 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_be60a460_3c78_4213_95ae_d47d3bab16cf_Class6_Class4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 x )  ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_be60a460_3c78_4213_95ae_d47d3bab16cf_Class6_Class4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 x )  ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux14 0) (<= aux14 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_be60a460_3c78_4213_95ae_d47d3bab16cf_Class6_Class4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 x )  ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  3))) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  3))))) (and (= aux14 1) true)) (and (= aux14 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_be60a460_3c78_4213_95ae_d47d3bab16cf_Class6_Class4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 x )  ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  3))) (= (* ( Cardinality ( container_ x )  )  2) (* ( Cardinality ( container_ y )  )  3))))))
(assert (and (=> (= aux14 0) (= weight14 1)) (=> (= aux14 1) (= weight14 0))))
(assert (and (>= aux15 0) (<= aux15 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_9e20f821_f167_4e8b_875c_486eeddc16a5_Class7_Class8 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 x )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  0)) (and (= (* ( Cardinality ( container_ y )  )  0) (* ( Cardinality ( container_ x )  )  kdee941b1_f9e5_4313_9348_e2cbcdcd32c6)) (>= kdee941b1_f9e5_4313_9348_e2cbcdcd32c6 0))) (and (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  kdcd8c4cf_eab4_470f_865b_7122c7041967)) (>= kdcd8c4cf_eab4_470f_865b_7122c7041967 0))) (and (= (* ( Cardinality ( container_ x )  )  k1314a9039_d543_4a91_b405_8fba693c33b2) (* ( Cardinality ( container_ y )  )  k2288d44f9_ecd1_4c91_8eb9_af5a897f12e9)) (and (>= k1314a9039_d543_4a91_b405_8fba693c33b2 0) (>= k2288d44f9_ecd1_4c91_8eb9_af5a897f12e9 0)))))) (and (= aux15 1) true)) (and (= aux15 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_9e20f821_f167_4e8b_875c_486eeddc16a5_Class7_Class8 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 x )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  0)) (and (= (* ( Cardinality ( container_ y )  )  0) (* ( Cardinality ( container_ x )  )  kdee941b1_f9e5_4313_9348_e2cbcdcd32c6)) (>= kdee941b1_f9e5_4313_9348_e2cbcdcd32c6 0))) (and (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  kdcd8c4cf_eab4_470f_865b_7122c7041967)) (>= kdcd8c4cf_eab4_470f_865b_7122c7041967 0))) (and (= (* ( Cardinality ( container_ x )  )  k1314a9039_d543_4a91_b405_8fba693c33b2) (* ( Cardinality ( container_ y )  )  k2288d44f9_ecd1_4c91_8eb9_af5a897f12e9)) (and (>= k1314a9039_d543_4a91_b405_8fba693c33b2 0) (>= k2288d44f9_ecd1_4c91_8eb9_af5a897f12e9 0)))))))
(assert (and (=> (= aux15 0) (= weight15 1)) (=> (= aux15 1) (= weight15 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_d2bfc7a9_6be4_4da4_b555_247fa06afc22_Class8_Class17 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 x )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (and (>= aux16 0) (<= aux16 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_d2bfc7a9_6be4_4da4_b555_247fa06afc22_Class8_Class17 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 x )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kcbbdd4e8_7884_4fc7_a938_4e44207cd4cc)) (>= kcbbdd4e8_7884_4fc7_a938_4e44207cd4cc 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k5bdeff42_9b09_4243_9beb_a67dc66af56c)) (>= k5bdeff42_9b09_4243_9beb_a67dc66af56c 0))))) (and (= aux16 1) true)) (and (= aux16 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_d2bfc7a9_6be4_4da4_b555_247fa06afc22_Class8_Class17 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 x )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kcbbdd4e8_7884_4fc7_a938_4e44207cd4cc)) (>= kcbbdd4e8_7884_4fc7_a938_4e44207cd4cc 0))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k5bdeff42_9b09_4243_9beb_a67dc66af56c)) (>= k5bdeff42_9b09_4243_9beb_a67dc66af56c 0))))))
(assert (and (=> (= aux16 0) (= weight16 1)) (=> (= aux16 1) (= weight16 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_b7bc32d7_5803_4f5c_863d_390c6b206b04_Class9_Class16 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 x )  (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 y )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) ))) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux17 0) (<= aux17 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_b7bc32d7_5803_4f5c_863d_390c6b206b04_Class9_Class16 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 x )  (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 y )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) ))) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  kbe10f899_3aae_4670_813b_84473739d516)) (>= kbe10f899_3aae_4670_813b_84473739d516 0))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  k9f4e5c8f_6bad_4015_9950_b932493fcd00)) (>= k9f4e5c8f_6bad_4015_9950_b932493fcd00 0))))) (and (= aux17 1) true)) (and (= aux17 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_b7bc32d7_5803_4f5c_863d_390c6b206b04_Class9_Class16 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 x )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 y )  )  (and ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 x )  (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 y )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 y ) ))) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  kbe10f899_3aae_4670_813b_84473739d516)) (>= kbe10f899_3aae_4670_813b_84473739d516 0))) (and (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  k9f4e5c8f_6bad_4015_9950_b932493fcd00)) (>= k9f4e5c8f_6bad_4015_9950_b932493fcd00 0))))))
(assert (and (=> (= aux17 0) (= weight17 1)) (=> (= aux17 1) (= weight17 0))))
(assert (and (>= aux18 0) (<= aux18 1)))
(assert (or (or (forall ((v Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 v )  (or (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3) ) (or (forall ((v Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 v )  (< ( class0_Class0IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4))) (forall ((v Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 v )  (> ( class0_Class0IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  19))))))) (and (= aux18 1) true)) (and (= aux18 0) false)))
(assert (and (=> (= aux18 0) (= weight18 1)) (=> (= aux18 1) (= weight18 0))))
(assert (and (>= aux19 0) (<= aux19 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0) ))) (forall ((v Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 v )  (not (= ( class0_Class0IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0) )))) (and (= aux19 1) true)) (and (= aux19 0) false)))
(assert (and (=> (= aux19 0) (= weight19 1)) (=> (= aux19 1) (= weight19 0))))
(assert (and (>= aux20 0) (<= aux20 1)))
(assert (or (or (forall ((c0_1 Int)) (=> ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 c0_1 )  (exists ((v Int)) (and ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 v )  ( rel_fad1ad34_7d79_449c_82ef_1a81d1c14372_Class0_Class0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_1 )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))) (and (= aux20 1) true)) (and (= aux20 0) false)))
(assert (and (=> (= aux20 0) (= weight20 1)) (=> (= aux20 1) (= weight20 0))))
(assert (and (>= aux21 0) (<= aux21 1)))
(assert (or (or (forall ((v Int)) (=> (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v ) ) (<= ( class10_Class10IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4))) (and (= aux21 1) true)) (and (= aux21 0) false)))
(assert (and (=> (= aux21 0) (= weight21 1)) (=> (= aux21 1) (= weight21 0))))
(assert (and (>= aux22 0) (<= aux22 1)))
(assert (or (or (forall ((c0_1 Int)(c0_2 Int)) (=> (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_1 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_1 ) ) (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_2 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_2 ) )) (> ( class10_Class10IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_1 )  )  ( class10_Class10IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_2 )  ) ))) (and (= aux22 1) true)) (and (= aux22 0) false)))
(assert (and (=> (= aux22 0) (= weight22 1)) (=> (= aux22 1) (= weight22 0))))
(assert (and (>= aux23 0) (<= aux23 1)))
(assert (or (or (forall ((c0_1 Int)(c0_2 Int)) (=> (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_1 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_1 ) ) (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_2 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_2 ) )) (> ( class10_Class10IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_1 )  )  ( class10_Class10IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_2 )  ) ))) (and (= aux23 1) true)) (and (= aux23 0) false)))
(assert (and (=> (= aux23 0) (= weight23 1)) (=> (= aux23 1) (= weight23 0))))
(assert (and (>= aux24 0) (<= aux24 1)))
(assert (or (or (forall ((c0_1 Int)(c0_2 Int)) (=> (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_1 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_1 ) ) (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_2 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_2 ) )) (not (= ( class10_Class10IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_1 )  )  ( class10_Class10IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_2 )  ) ) ))) (and (= aux24 1) true)) (and (= aux24 0) false)))
(assert (and (=> (= aux24 0) (= weight24 1)) (=> (= aux24 1) (= weight24 0))))
(assert (and (>= aux25 0) (<= aux25 1)))
(assert (or (or (and (forall ((v Int)) (=> (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v ) ) (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3))) (forall ((c0_1 Int)(c0_2 Int)) (=> (and (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_1 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_1 ) ) (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 c0_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c0_2 ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c0_2 ) )) (= ( class10_Class10IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_1 )  )  ( class10_Class10IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c0_2 )  ) )))) (and (= aux25 1) true)) (and (= aux25 0) false)))
(assert (and (=> (= aux25 0) (= weight25 1)) (=> (= aux25 1) (= weight25 0))))
(assert (and (>= aux26 0) (<= aux26 1)))
(assert (or (or (forall ((c1_2 Int)(c1_1 Int)) (=> (and ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 c1_1 )  ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 c1_2 ) ) (<= ( class11_Class11IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1_1 )  )  ( class11_Class11IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1_2 )  ) ))) (and (= aux26 1) true)) (and (= aux26 0) false)))
(assert (and (=> (= aux26 0) (= weight26 1)) (=> (= aux26 1) (= weight26 0))))
(assert (and (>= aux27 0) (<= aux27 1)))
(assert (or (or (forall ((c1_2 Int)(c1_1 Int)) (=> (and ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 c1_1 )  ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 c1_2 ) ) (>= ( class11_Class11IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1_1 )  )  ( class11_Class11IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1_2 )  ) ))) (and (= aux27 1) true)) (and (= aux27 0) false)))
(assert (and (=> (= aux27 0) (= weight27 1)) (=> (= aux27 1) (= weight27 0))))
(assert (and (>= aux28 0) (<= aux28 1)))
(assert (or (or (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  (and ( class11_Class11BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4))) (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  ( class11_Class11BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (and (= aux28 1) true)) (and (= aux28 0) false)))
(assert (and (=> (= aux28 0) (= weight28 1)) (=> (= aux28 1) (= weight28 0))))
(assert (and (>= aux29 0) (<= aux29 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  (or ( class11_Class11BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  ( class11_Class11BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  (< ( class11_Class11IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  13))))))) (forall ((v Int)) (=> ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 v )  (< ( class11_Class11IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  14)))) (and (= aux29 1) true)) (and (= aux29 0) false)))
(assert (and (=> (= aux29 0) (= weight29 1)) (=> (= aux29 1) (= weight29 0))))
(assert (and (>= aux30 0) (<= aux30 1)))
(assert (or (or (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  (= ( class12_Class12IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3))) (and (= aux30 1) true)) (and (= aux30 0) false)))
(assert (and (=> (= aux30 0) (= weight30 1)) (=> (= aux30 1) (= weight30 0))))
(assert (and (>= aux31 0) (<= aux31 1)))
(assert (or (or (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  (> ( class12_Class12IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  18))) (and (= aux31 1) true)) (and (= aux31 0) false)))
(assert (and (=> (= aux31 0) (= weight31 1)) (=> (= aux31 1) (= weight31 0))))
(assert (and (>= aux32 0) (<= aux32 1)))
(assert (or (or (forall ((c2_1 Int)(c2_2 Int)) (=> (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 c2_1 )  ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 c2_2 ) ) (> ( class12_Class12IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2_1 )  )  ( class12_Class12IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2_2 )  ) ))) (and (= aux32 1) true)) (and (= aux32 0) false)))
(assert (and (=> (= aux32 0) (= weight32 1)) (=> (= aux32 1) (= weight32 0))))
(assert (and (>= aux33 0) (<= aux33 1)))
(assert (or (or (forall ((c2_1 Int)(c2_2 Int)) (=> (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 c2_1 )  ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 c2_2 ) ) (< ( class12_Class12IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2_1 )  )  ( class12_Class12IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2_2 )  ) ))) (and (= aux33 1) true)) (and (= aux33 0) false)))
(assert (and (=> (= aux33 0) (= weight33 1)) (=> (= aux33 1) (= weight33 0))))
(assert (and (>= aux34 0) (<= aux34 1)))
(assert (or (or (forall ((c2_1 Int)(c2_2 Int)) (=> (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 c2_1 )  ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 c2_2 ) ) (< ( class12_Class12IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2_1 )  )  ( class12_Class12IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2_2 )  ) ))) (and (= aux34 1) true)) (and (= aux34 0) false)))
(assert (and (=> (= aux34 0) (= weight34 1)) (=> (= aux34 1) (= weight34 0))))
(assert (and (>= aux35 0) (<= aux35 1)))
(assert (or (or (or (or (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  ( class12_Class12BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  ( class12_Class12BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (or (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  ( class12_Class12BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  (<= ( class12_Class12IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  7))))) (and (= aux35 1) true)) (and (= aux35 0) false)))
(assert (and (=> (= aux35 0) (= weight35 1)) (=> (= aux35 1) (= weight35 0))))
(assert (and (>= aux36 0) (<= aux36 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  (or ( class12_Class12BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (or (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2) ))) (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  ( class12_Class12BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (forall ((v Int)) (=> ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  (< ( class12_Class12IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  18)))) (and (= aux36 1) true)) (and (= aux36 0) false)))
(assert (and (=> (= aux36 0) (= weight36 1)) (=> (= aux36 1) (= weight36 0))))
(assert (and (>= aux37 0) (<= aux37 1)))
(assert (or (or (forall ((c3_2 Int)(c3_1 Int)) (=> (and ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 c3_1 )  ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 c3_2 ) ) (= ( class13_Class13IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c3_1 )  )  ( class13_Class13IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c3_2 )  ) ))) (and (= aux37 1) true)) (and (= aux37 0) false)))
(assert (and (=> (= aux37 0) (= weight37 1)) (=> (= aux37 1) (= weight37 0))))
(assert (and (>= aux38 0) (<= aux38 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  ( class13_Class13BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  ( class13_Class13BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (= aux38 1) true)) (and (= aux38 0) false)))
(assert (and (=> (= aux38 0) (= weight38 1)) (=> (= aux38 1) (= weight38 0))))
(assert (and (>= aux39 0) (<= aux39 1)))
(assert (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  1) ))) (and (= aux39 1) true)) (and (= aux39 0) false)))
(assert (and (=> (= aux39 0) (= weight39 1)) (=> (= aux39 1) (= weight39 0))))
(assert (and (>= aux40 0) (<= aux40 1)))
(assert (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2) ))) (and (= aux40 1) true)) (and (= aux40 0) false)))
(assert (and (=> (= aux40 0) (= weight40 1)) (=> (= aux40 1) (= weight40 0))))
(assert (and (>= aux41 0) (<= aux41 1)))
(assert (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2) ))) (and (= aux41 1) true)) (and (= aux41 0) false)))
(assert (and (=> (= aux41 0) (= weight41 1)) (=> (= aux41 1) (= weight41 0))))
(assert (and (>= aux42 0) (<= aux42 1)))
(assert (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (not ( class13_Class13BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ))) (and (= aux42 1) true)) (and (= aux42 0) false)))
(assert (and (=> (= aux42 0) (= weight42 1)) (=> (= aux42 1) (= weight42 0))))
(assert (and (>= aux43 0) (<= aux43 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  ( class13_Class13BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  ( class13_Class13BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (= aux43 1) true)) (and (= aux43 0) false)))
(assert (and (=> (= aux43 0) (= weight43 1)) (=> (= aux43 1) (= weight43 0))))
(assert (and (>= aux44 0) (<= aux44 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (or ( class13_Class13BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (or (forall ((c3_2 Int)(c3_1 Int)) (=> (and ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 c3_1 )  ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 c3_2 ) ) (> ( class13_Class13IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c3_1 )  )  ( class13_Class13IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c3_2 )  ) ))) (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  ( class13_Class13BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3)))) (and (= aux44 1) true)) (and (= aux44 0) false)))
(assert (and (=> (= aux44 0) (= weight44 1)) (=> (= aux44 1) (= weight44 0))))
(assert (and (>= aux45 0) (<= aux45 1)))
(assert (or (or (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (and (= ( class13_Class13IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  5) (and (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (> ( class13_Class13IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  9))) (forall ((v Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 v )  (<= ( class13_Class13IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  1))))))) (and (= aux45 1) true)) (and (= aux45 0) false)))
(assert (and (=> (= aux45 0) (= weight45 1)) (=> (= aux45 1) (= weight45 0))))
(assert (and (>= aux46 0) (<= aux46 1)))
(assert (or (or (forall ((c1 Int)) (=> ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 c1 )  (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  1))) (and (= aux46 1) true)) (and (= aux46 0) false)))
(assert (and (=> (= aux46 0) (= weight46 1)) (=> (= aux46 1) (= weight46 0))))
(assert (and (>= aux47 0) (<= aux47 1)))
(assert (or (or (exists ((c1 Int)) (and ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 c1 )  (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  0))) (and (= aux47 1) true)) (and (= aux47 0) false)))
(assert (and (=> (= aux47 0) (= weight47 1)) (=> (= aux47 1) (= weight47 0))))
(assert (and (>= aux48 0) (<= aux48 1)))
(assert (or (or (forall ((c4_2 Int)(c4_1 Int)) (=> (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c4_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c4_2 ) ) (< ( class14_Class14IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c4_1 )  )  ( class14_Class14IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c4_2 )  ) ))) (and (= aux48 1) true)) (and (= aux48 0) false)))
(assert (and (=> (= aux48 0) (= weight48 1)) (=> (= aux48 1) (= weight48 0))))
(assert (and (>= aux49 0) (<= aux49 1)))
(assert (or (or (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  (not ( class14_Class14BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ))) (and (= aux49 1) true)) (and (= aux49 0) false)))
(assert (and (=> (= aux49 0) (= weight49 1)) (=> (= aux49 1) (= weight49 0))))
(assert (and (>= aux50 0) (<= aux50 1)))
(assert (or (or (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2))) (and (= aux50 1) true)) (and (= aux50 0) false)))
(assert (and (=> (= aux50 0) (= weight50 1)) (=> (= aux50 1) (= weight50 0))))
(assert (and (>= aux51 0) (<= aux51 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  (or ( class14_Class14BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  ( class14_Class14BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((c4_2 Int)(c4_1 Int)) (=> (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c4_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c4_2 ) ) (> ( class14_Class14IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c4_1 )  )  ( class14_Class14IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c4_2 )  ) ))))))) (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  ( class14_Class14BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (= aux51 1) true)) (and (= aux51 0) false)))
(assert (and (=> (= aux51 0) (= weight51 1)) (=> (= aux51 1) (= weight51 0))))
(assert (and (>= aux52 0) (<= aux52 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  (and ( class14_Class14BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  (not (= ( class14_Class14IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  12) ))) (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  ( class14_Class14BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (forall ((v Int)) (=> ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v )  (> ( class14_Class14IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0)))) (and (= aux52 1) true)) (and (= aux52 0) false)))
(assert (and (=> (= aux52 0) (= weight52 1)) (=> (= aux52 1) (= weight52 0))))
(assert (and (>= aux53 0) (<= aux53 1)))
(assert (or (or (exists ((c1 Int)) (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c1 )  ( class14_Class14BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  ) )) (and (= aux53 1) true)) (and (= aux53 0) false)))
(assert (and (=> (= aux53 0) (= weight53 1)) (=> (= aux53 1) (= weight53 0))))
(assert (and (>= aux54 0) (<= aux54 1)))
(assert (or (or (forall ((c1 Int)(c2 Int)) (=> (and ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c2 ) ) (or ( class14_Class14BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  ( class14_Class14BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2 )  ) ))) (and (= aux54 1) true)) (and (= aux54 0) false)))
(assert (and (=> (= aux54 0) (= weight54 1)) (=> (= aux54 1) (= weight54 0))))
(assert (and (>= aux55 0) (<= aux55 1)))
(assert (or (or (forall ((c5_2 Int)(c5_1 Int)) (=> (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_1 )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_2 ) ) (not (= ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_1 )  )  ( class15_Class15IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_2 )  ) ) ))) (and (= aux55 1) true)) (and (= aux55 0) false)))
(assert (and (=> (= aux55 0) (= weight55 1)) (=> (= aux55 1) (= weight55 0))))
(assert (and (>= aux56 0) (<= aux56 1)))
(assert (or (or (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  ( class15_Class15BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (and (= aux56 1) true)) (and (= aux56 0) false)))
(assert (and (=> (= aux56 0) (= weight56 1)) (=> (= aux56 1) (= weight56 0))))
(assert (and (>= aux57 0) (<= aux57 1)))
(assert (or (or (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (not (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  5) ))) (and (= aux57 1) true)) (and (= aux57 0) false)))
(assert (and (=> (= aux57 0) (= weight57 1)) (=> (= aux57 1) (= weight57 0))))
(assert (and (>= aux58 0) (<= aux58 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (< ( class15_Class15IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  11))) (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (= ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  11)))) (and (= aux58 1) true)) (and (= aux58 0) false)))
(assert (and (=> (= aux58 0) (= weight58 1)) (=> (= aux58 1) (= weight58 0))))
(assert (and (>= aux59 0) (<= aux59 1)))
(assert (or (or (or (forall ((c5_2 Int)(c5_1 Int)) (=> (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_1 )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_2 ) ) (< ( class15_Class15IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_1 )  )  ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_2 )  ) ))) (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (not (= ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2) )))) (and (= aux59 1) true)) (and (= aux59 0) false)))
(assert (and (=> (= aux59 0) (= weight59 1)) (=> (= aux59 1) (= weight59 0))))
(assert (and (>= aux60 0) (<= aux60 1)))
(assert (or (or (forall ((c5_2 Int)(c5_1 Int)) (=> (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_1 )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_2 ) ) (or (< ( class15_Class15IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_1 )  )  ( class15_Class15IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_2 )  ) ) (or (forall ((c5_2 Int)(c5_1 Int)) (=> (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_1 )  ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c5_2 ) ) (not (= ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_1 )  )  ( class15_Class15IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c5_2 )  ) ) ))) (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0) ))))))) (and (= aux60 1) true)) (and (= aux60 0) false)))
(assert (and (=> (= aux60 0) (= weight60 1)) (=> (= aux60 1) (= weight60 0))))
(assert (and (>= aux61 0) (<= aux61 1)))
(assert (or (or (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (or ( class15_Class15BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (or (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (or ( class15_Class15BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (or (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  ( class15_Class15BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  (= ( class15_Class15IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  17))))))) (forall ((v Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 v )  ( class15_Class15BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (and (= aux61 1) true)) (and (= aux61 0) false)))
(assert (and (=> (= aux61 0) (= weight61 1)) (=> (= aux61 1) (= weight61 0))))
(assert (and (>= aux62 0) (<= aux62 1)))
(assert (or (or (forall ((c1 Int)) (=> ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c1 )  (< ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  11))) (and (= aux62 1) true)) (and (= aux62 0) false)))
(assert (and (=> (= aux62 0) (= weight62 1)) (=> (= aux62 1) (= weight62 0))))
(assert (and (>= aux63 0) (<= aux63 1)))
(assert (or (or (exists ((c1 Int)) (and ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 c1 )  (>= ( class15_Class15IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  15))) (and (= aux63 1) true)) (and (= aux63 0) false)))
(assert (and (=> (= aux63 0) (= weight63 1)) (=> (= aux63 1) (= weight63 0))))
(assert (and (>= aux64 0) (<= aux64 1)))
(assert (or (or (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (not (= ( class16_Class16IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3) ))) (and (= aux64 1) true)) (and (= aux64 0) false)))
(assert (and (=> (= aux64 0) (= weight64 1)) (=> (= aux64 1) (= weight64 0))))
(assert (and (>= aux65 0) (<= aux65 1)))
(assert (or (or (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (or (not (= ( class16_Class16IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  7) ) (and (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2))) (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (not ( class16_Class16BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ))))))) (and (= aux65 1) true)) (and (= aux65 0) false)))
(assert (and (=> (= aux65 0) (= weight65 1)) (=> (= aux65 1) (= weight65 0))))
(assert (and (>= aux66 0) (<= aux66 1)))
(assert (or (or (forall ((c6_1 Int)(c6_2 Int)) (=> (and (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c6_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c6_1 ) ) (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c6_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c6_2 ) )) (or (<= ( class16_Class16IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class16_Class16IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) ) (and (forall ((c6_1 Int)(c6_2 Int)) (=> (and (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c6_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c6_1 ) ) (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c6_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c6_2 ) )) (= ( class16_Class16IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class16_Class16IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) ))) (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (<= ( class16_Class16IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  10))))))) (and (= aux66 1) true)) (and (= aux66 0) false)))
(assert (and (=> (= aux66 0) (= weight66 1)) (=> (= aux66 1) (= weight66 0))))
(assert (and (>= aux67 0) (<= aux67 1)))
(assert (or (or (or (or (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  5) ))) (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) ( class16_Class16BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) ( class16_Class16BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0))))) (and (= aux67 1) true)) (and (= aux67 0) false)))
(assert (and (=> (= aux67 0) (= weight67 1)) (=> (= aux67 1) (= weight67 0))))
(assert (and (>= aux68 0) (<= aux68 1)))
(assert (or (or (or (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (> ( class16_Class16IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  8))) (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) (or ( class16_Class16BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 v )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 v ) ) ( class16_Class16BoolAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((c6_1 Int)(c6_2 Int)) (=> (and (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c6_1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c6_1 ) ) (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c6_2 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c6_2 ) )) (< ( class16_Class16IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class16_Class16IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) )))))))) (and (= aux68 1) true)) (and (= aux68 0) false)))
(assert (and (=> (= aux68 0) (= weight68 1)) (=> (= aux68 1) (= weight68 0))))
(assert (and (>= aux69 0) (<= aux69 1)))
(assert (or (or (forall ((c1 Int)) (=> (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c1 ) ) (> ( class16_Class16IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  12))) (and (= aux69 1) true)) (and (= aux69 0) false)))
(assert (and (=> (= aux69 0) (= weight69 1)) (=> (= aux69 1) (= weight69 0))))
(assert (and (>= aux70 0) (<= aux70 1)))
(assert (or (or (exists ((c1 Int)) (and (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 c1 )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 c1 ) ) (<= ( class16_Class16IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  0))) (and (= aux70 1) true)) (and (= aux70 0) false)))
(assert (and (=> (= aux70 0) (= weight70 1)) (=> (= aux70 1) (= weight70 0))))
(assert (and (>= aux71 0) (<= aux71 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3) ))) (and (= aux71 1) true)) (and (= aux71 0) false)))
(assert (and (=> (= aux71 0) (= weight71 1)) (=> (= aux71 1) (= weight71 0))))
(assert (and (>= aux72 0) (<= aux72 1)))
(assert (or (or (or (or (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_1 )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_2 ) ) (>= ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class17_Class17IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))) (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_1 )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_2 ) ) (= ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class17_Class17IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))))) (and (= aux72 1) true)) (and (= aux72 0) false)))
(assert (and (=> (= aux72 0) (= weight72 1)) (=> (= aux72 1) (= weight72 0))))
(assert (and (>= aux73 0) (<= aux73 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (or (>= ( class17_Class17IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  5) (and (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_1 )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_2 ) ) (>= ( class17_Class17IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))) (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3))))))) (and (= aux73 1) true)) (and (= aux73 0) false)))
(assert (and (=> (= aux73 0) (= weight73 1)) (=> (= aux73 1) (= weight73 0))))
(assert (and (>= aux74 0) (<= aux74 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (or (> ( class17_Class17IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  1) (or (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_1 )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_2 ) ) (not (= ( class17_Class17IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ) ))) (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4) ))))))) (and (= aux74 1) true)) (and (= aux74 0) false)))
(assert (and (=> (= aux74 0) (= weight74 1)) (=> (= aux74 1) (= weight74 0))))
(assert (and (>= aux75 0) (<= aux75 1)))
(assert (or (or (exists ((c1 Int)) (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c1 )  ( class17_Class17BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  ) )) (and (= aux75 1) true)) (and (= aux75 0) false)))
(assert (and (=> (= aux75 0) (= weight75 1)) (=> (= aux75 1) (= weight75 0))))
(assert (and (>= aux76 0) (<= aux76 1)))
(assert (or (or (exists ((c1 Int)(c2 Int)) (and (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c1 )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c2 ) ) (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (< ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ( class17_Class17IntAttr4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  ) ))))) (and (= aux76 1) true)) (and (= aux76 0) false)))
(assert (and (=> (= aux76 0) (= weight76 1)) (=> (= aux76 1) (= weight76 0))))
(assert (and (>= aux77 0) (<= aux77 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (<= ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  9))) (and (= aux77 1) true)) (and (= aux77 0) false)))
(assert (and (=> (= aux77 0) (= weight77 1)) (=> (= aux77 1) (= weight77 0))))
(assert (and (>= aux78 0) (<= aux78 1)))
(assert (or (or (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_1 )  ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 c7_2 ) ) (= ( class17_Class17IntAttr5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class17_Class17IntAttr6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))) (and (= aux78 1) true)) (and (= aux78 0) false)))
(assert (and (=> (= aux78 0) (= weight78 1)) (=> (= aux78 1) (= weight78 0))))
(assert (and (>= aux79 0) (<= aux79 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (= aux79 1) true)) (and (= aux79 0) false)))
(assert (and (=> (= aux79 0) (= weight79 1)) (=> (= aux79 1) (= weight79 0))))
(assert (and (>= aux80 0) (<= aux80 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (and (= aux80 1) true)) (and (= aux80 0) false)))
(assert (and (=> (= aux80 0) (= weight80 1)) (=> (= aux80 1) (= weight80 0))))
(assert (and (>= aux81 0) (<= aux81 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  ( class17_Class17BoolAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (= aux81 1) true)) (and (= aux81 0) false)))
(assert (and (=> (= aux81 0) (= weight81 1)) (=> (= aux81 1) (= weight81 0))))
(assert (and (>= aux82 0) (<= aux82 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  5) ))) (and (= aux82 1) true)) (and (= aux82 0) false)))
(assert (and (=> (= aux82 0) (= weight82 1)) (=> (= aux82 1) (= weight82 0))))
(assert (and (>= aux83 0) (<= aux83 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 v )  (not ( class1_Class1BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ))) (forall ((v Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 v )  (>= ( class1_Class1IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  11)))) (and (= aux83 1) true)) (and (= aux83 0) false)))
(assert (and (=> (= aux83 0) (= weight83 1)) (=> (= aux83 1) (= weight83 0))))
(assert (and (>= aux84 0) (<= aux84 1)))
(assert (or (or (forall ((v Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 v )  (or (= ( class1_Class1IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  11) (and (forall ((v Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 v )  (< ( class1_Class1IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  9))) (forall ((v Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 v )  (> ( class1_Class1IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  17))))))) (and (= aux84 1) true)) (and (= aux84 0) false)))
(assert (and (=> (= aux84 0) (= weight84 1)) (=> (= aux84 1) (= weight84 0))))
(assert (and (>= aux85 0) (<= aux85 1)))
(assert (or (or (forall ((c1_1 Int)) (=> ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 c1_1 )  (forall ((v Int)) (and (and ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 v )  ( rel_38817758_cfa2_49a5_9bb6_07a3c1e1dc19_Class1_Class12 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1_1 )   ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ) (= ( Cardinality ( container_ v )  )  1))))) (and (= aux85 1) true)) (and (= aux85 0) false)))
(assert (and (=> (= aux85 0) (= weight85 1)) (=> (= aux85 1) (= weight85 0))))
(assert (and (>= aux86 0) (<= aux86 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 v )  (> ( class2_Class2IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  11))) (forall ((v Int)) (=> ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4) )))) (and (= aux86 1) true)) (and (= aux86 0) false)))
(assert (and (=> (= aux86 0) (= weight86 1)) (=> (= aux86 1) (= weight86 0))))
(assert (and (>= aux87 0) (<= aux87 1)))
(assert (or (or (forall ((v Int)) (=> ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 v )  (or ( class2_Class2BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 v )  (= ( class2_Class2IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0))) (forall ((v Int)) (=> ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  1) ))))))) (and (= aux87 1) true)) (and (= aux87 0) false)))
(assert (and (=> (= aux87 0) (= weight87 1)) (=> (= aux87 1) (= weight87 0))))
(assert (and (>= aux88 0) (<= aux88 1)))
(assert (or (or (forall ((v Int)) (=> ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 v )  (and (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  3) (and (forall ((v Int)) (=> ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 v )  (<= ( class3_Class3IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  16))) (forall ((v Int)) (=> ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 v )  (< ( class3_Class3IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  8))))))) (and (= aux88 1) true)) (and (= aux88 0) false)))
(assert (and (=> (= aux88 0) (= weight88 1)) (=> (= aux88 1) (= weight88 0))))
(assert (and (>= aux89 0) (<= aux89 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 v )  (= ( class3_Class3IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  1))) (forall ((v Int)) (=> ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 v )  (<= ( class3_Class3IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4)))) (and (= aux89 1) true)) (and (= aux89 0) false)))
(assert (and (=> (= aux89 0) (= weight89 1)) (=> (= aux89 1) (= weight89 0))))
(assert (and (>= aux90 0) (<= aux90 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 v )  (= ( class4_Class4IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  8))) (forall ((v Int)) (=> ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 v )  (< ( class4_Class4IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  18)))) (and (= aux90 1) true)) (and (= aux90 0) false)))
(assert (and (=> (= aux90 0) (= weight90 1)) (=> (= aux90 1) (= weight90 0))))
(assert (and (>= aux91 0) (<= aux91 1)))
(assert (or (or (forall ((v Int)) (=> ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 v )  (or (< ( class4_Class4IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  14) (or (forall ((v Int)) (=> ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  1) ))) (forall ((v Int)) (=> ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 v )  (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2))))))) (and (= aux91 1) true)) (and (= aux91 0) false)))
(assert (and (=> (= aux91 0) (= weight91 1)) (=> (= aux91 1) (= weight91 0))))
(assert (and (>= aux92 0) (<= aux92 1)))
(assert (or (or (forall ((v Int)) (=> ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 v )  (or (not ( class5_Class5BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ) (and (forall ((v Int)) (=> ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 v )  (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0))) (forall ((v Int)) (=> ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 v )  (not (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0) ))))))) (and (= aux92 1) true)) (and (= aux92 0) false)))
(assert (and (=> (= aux92 0) (= weight92 1)) (=> (= aux92 1) (= weight92 0))))
(assert (and (>= aux93 0) (<= aux93 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 v )  (>= ( class5_Class5IntAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0))) (forall ((v Int)) (=> ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 v )  (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2)))) (and (= aux93 1) true)) (and (= aux93 0) false)))
(assert (and (=> (= aux93 0) (= weight93 1)) (=> (= aux93 1) (= weight93 0))))
(assert (and (>= aux94 0) (<= aux94 1)))
(assert (or (or (or (forall ((c6_1 Int)(c6_2 Int)) (=> (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_1 )  ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_2 ) ) (or (< ( class6_Class6IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class6_Class6IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) ) (or (forall ((v Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 v )  ( class6_Class6BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 v )  ( class6_Class6BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (forall ((v Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 v )  (> ( class6_Class6IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  7)))) (and (= aux94 1) true)) (and (= aux94 0) false)))
(assert (and (=> (= aux94 0) (= weight94 1)) (=> (= aux94 1) (= weight94 0))))
(assert (and (>= aux95 0) (<= aux95 1)))
(assert (or (or (forall ((c6_1 Int)(c6_2 Int)) (=> (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_1 )  ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_2 ) ) (or (> ( class6_Class6IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class6_Class6IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) ) (or (forall ((v Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 v )  ( class6_Class6BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 v )  (< ( class6_Class6IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  8))))))) (and (= aux95 1) true)) (and (= aux95 0) false)))
(assert (and (=> (= aux95 0) (= weight95 1)) (=> (= aux95 1) (= weight95 0))))
(assert (and (>= aux96 0) (<= aux96 1)))
(assert (or (or (forall ((c6_1 Int)(c6_2 Int)) (=> (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_1 )  ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_2 ) ) (or (>= ( class6_Class6IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class6_Class6IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) ) (or (forall ((v Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 v )  (not (= ( Enum0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  2) ))) (forall ((c6_1 Int)(c6_2 Int)) (=> (and ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_1 )  ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c6_2 ) ) (>= ( class6_Class6IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_1 )  )  ( class6_Class6IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c6_2 )  ) ))))))) (and (= aux96 1) true)) (and (= aux96 0) false)))
(assert (and (=> (= aux96 0) (= weight96 1)) (=> (= aux96 1) (= weight96 0))))
(assert (and (>= aux97 0) (<= aux97 1)))
(assert (or (or (forall ((c1 Int)) (=> ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 c1 )  (not ( class6_Class6BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  ))) (and (= aux97 1) true)) (and (= aux97 0) false)))
(assert (and (=> (= aux97 0) (= weight97 1)) (=> (= aux97 1) (= weight97 0))))
(assert (and (>= aux98 0) (<= aux98 1)))
(assert (or (or (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c7_1 )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c7_2 ) ) (> ( class7_Class7IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))) (and (= aux98 1) true)) (and (= aux98 0) false)))
(assert (and (=> (= aux98 0) (= weight98 1)) (=> (= aux98 1) (= weight98 0))))
(assert (and (>= aux99 0) (<= aux99 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) ))) (and (= aux99 1) true)) (and (= aux99 0) false)))
(assert (and (=> (= aux99 0) (= weight99 1)) (=> (= aux99 1) (= weight99 0))))
(assert (and (>= aux100 0) (<= aux100 1)))
(assert (or (or (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  6) ))) (and (= aux100 1) true)) (and (= aux100 0) false)))
(assert (and (=> (= aux100 0) (= weight100 1)) (=> (= aux100 1) (= weight100 0))))
(assert (and (>= aux101 0) (<= aux101 1)))
(assert (or (or (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (or (= ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  12) (or (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c7_1 )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c7_2 ) ) (>= ( class7_Class7IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (not (= ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  19) ))))))) (and (= aux101 1) true)) (and (= aux101 0) false)))
(assert (and (=> (= aux101 0) (= weight101 1)) (=> (= aux101 1) (= weight101 0))))
(assert (and (>= aux102 0) (<= aux102 1)))
(assert (or (or (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (or (or ( class7_Class7BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  (and (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))) (or (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (>= ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  8))) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))))) (and (= aux102 1) true)) (and (= aux102 0) false)))
(assert (and (=> (= aux102 0) (= weight102 1)) (=> (= aux102 1) (= weight102 0))))
(assert (and (>= aux103 0) (<= aux103 1)))
(assert (or (or (or (or (forall ((c7_2 Int)(c7_1 Int)) (=> (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c7_1 )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c7_2 ) ) (>= ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_1 )  )  ( class7_Class7IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c7_2 )  ) ))) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (= ( class7_Class7IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  9)))) (and (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  ( class7_Class7BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )))) (and (= aux103 1) true)) (and (= aux103 0) false)))
(assert (and (=> (= aux103 0) (= weight103 1)) (=> (= aux103 1) (= weight103 0))))
(assert (and (>= aux104 0) (<= aux104 1)))
(assert (or (or (exists ((c1 Int)(c2 Int)) (and (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c1 )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c2 ) ) (forall ((v Int)) (=> ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 v )  (not (= ( class7_Class7IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ( class7_Class7IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  ) ) ))))) (and (= aux104 1) true)) (and (= aux104 0) false)))
(assert (and (=> (= aux104 0) (= weight104 1)) (=> (= aux104 1) (= weight104 0))))
(assert (and (>= aux105 0) (<= aux105 1)))
(assert (or (or (exists ((c1 Int)(c2 Int)) (and (and ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c1 )  ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 c2 ) ) (and ( class7_Class7BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  ( class7_Class7BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2 )  ) ))) (and (= aux105 1) true)) (and (= aux105 0) false)))
(assert (and (=> (= aux105 0) (= weight105 1)) (=> (= aux105 1) (= weight105 0))))
(assert (and (>= aux106 0) (<= aux106 1)))
(assert (or (or (forall ((c8_2 Int)(c8_1 Int)) (=> (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_1 )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_2 ) ) (> ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_1 )  )  ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_2 )  ) ))) (and (= aux106 1) true)) (and (= aux106 0) false)))
(assert (and (=> (= aux106 0) (= weight106 1)) (=> (= aux106 1) (= weight106 0))))
(assert (and (>= aux107 0) (<= aux107 1)))
(assert (or (or (forall ((c8_2 Int)(c8_1 Int)) (=> (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_1 )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_2 ) ) (<= ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_1 )  )  ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_2 )  ) ))) (and (= aux107 1) true)) (and (= aux107 0) false)))
(assert (and (=> (= aux107 0) (= weight107 1)) (=> (= aux107 1) (= weight107 0))))
(assert (and (>= aux108 0) (<= aux108 1)))
(assert (or (or (forall ((c8_2 Int)(c8_1 Int)) (=> (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_1 )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_2 ) ) (not (= ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_1 )  )  ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_2 )  ) ) ))) (and (= aux108 1) true)) (and (= aux108 0) false)))
(assert (and (=> (= aux108 0) (= weight108 1)) (=> (= aux108 1) (= weight108 0))))
(assert (and (>= aux109 0) (<= aux109 1)))
(assert (or (or (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (or (not (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0) ) (or (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (< ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  15))) (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (>= ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  18))))))) (and (= aux109 1) true)) (and (= aux109 0) false)))
(assert (and (=> (= aux109 0) (= weight109 1)) (=> (= aux109 1) (= weight109 0))))
(assert (and (>= aux110 0) (<= aux110 1)))
(assert (or (or (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (or (> ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  19) (and (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0))) (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (>= ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  13))))))) (and (= aux110 1) true)) (and (= aux110 0) false)))
(assert (and (=> (= aux110 0) (= weight110 1)) (=> (= aux110 1) (= weight110 0))))
(assert (and (>= aux111 0) (<= aux111 1)))
(assert (or (or (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (or (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4) ) (and (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (> ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  16))) (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (> ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4))))))) (and (= aux111 1) true)) (and (= aux111 0) false)))
(assert (and (=> (= aux111 0) (= weight111 1)) (=> (= aux111 1) (= weight111 0))))
(assert (and (>= aux112 0) (<= aux112 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  ( class8_Class8BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (or (= ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  10) (and (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  ( class8_Class8BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  ) )) (forall ((c8_2 Int)(c8_1 Int)) (=> (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_1 )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c8_2 ) ) (< ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_1 )  )  ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c8_2 )  ) )))))))) (and (= aux112 1) true)) (and (= aux112 0) false)))
(assert (and (=> (= aux112 0) (= weight112 1)) (=> (= aux112 1) (= weight112 0))))
(assert (and (>= aux113 0) (<= aux113 1)))
(assert (or (or (exists ((c1 Int)) (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c1 )  (not ( class8_Class8BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  ))) (and (= aux113 1) true)) (and (= aux113 0) false)))
(assert (and (=> (= aux113 0) (= weight113 1)) (=> (= aux113 1) (= weight113 0))))
(assert (and (>= aux114 0) (<= aux114 1)))
(assert (or (or (forall ((c1 Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c1 )  (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  0))) (and (= aux114 1) true)) (and (= aux114 0) false)))
(assert (and (=> (= aux114 0) (= weight114 1)) (=> (= aux114 1) (= weight114 0))))
(assert (and (>= aux115 0) (<= aux115 1)))
(assert (or (or (forall ((c1 Int)(c2 Int)) (=> (and ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c1 )  ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 c2 ) ) (forall ((v Int)) (=> ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 v )  (> ( class8_Class8IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ( class8_Class8IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  ) ))))) (and (= aux115 1) true)) (and (= aux115 0) false)))
(assert (and (=> (= aux115 0) (= weight115 1)) (=> (= aux115 1) (= weight115 0))))
(assert (and (>= aux116 0) (<= aux116 1)))
(assert (or (or (forall ((c9_2 Int)(c9_1 Int)) (=> (and ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 c9_1 )  ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 c9_2 ) ) (> ( class9_Class9IntAttr3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c9_1 )  )  ( class9_Class9IntAttr2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c9_2 )  ) ))) (and (= aux116 1) true)) (and (= aux116 0) false)))
(assert (and (=> (= aux116 0) (= weight116 1)) (=> (= aux116 1) (= weight116 0))))
(assert (and (>= aux117 0) (<= aux117 1)))
(assert (or (or (forall ((v Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 v )  (not ( class9_Class9BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ))) (and (= aux117 1) true)) (and (= aux117 0) false)))
(assert (and (=> (= aux117 0) (= weight117 1)) (=> (= aux117 1) (= weight117 0))))
(assert (and (>= aux118 0) (<= aux118 1)))
(assert (or (or (forall ((v Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 v )  (not ( class9_Class9BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  ))) (and (= aux118 1) true)) (and (= aux118 0) false)))
(assert (and (=> (= aux118 0) (= weight118 1)) (=> (= aux118 1) (= weight118 0))))
(assert (and (>= aux119 0) (<= aux119 1)))
(assert (or (or (forall ((v Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 v )  (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4))) (and (= aux119 1) true)) (and (= aux119 0) false)))
(assert (and (=> (= aux119 0) (= weight119 1)) (=> (= aux119 1) (= weight119 0))))
(assert (and (>= aux120 0) (<= aux120 1)))
(assert (or (or (forall ((v Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 v )  (not (= ( Enum1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  0) ))) (and (= aux120 1) true)) (and (= aux120 0) false)))
(assert (and (=> (= aux120 0) (= weight120 1)) (=> (= aux120 1) (= weight120 0))))
(assert (and (>= aux121 0) (<= aux121 1)))
(assert (or (or (forall ((v Int)) (=> ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 v )  (not (= ( Enum2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 v )  )  4) ))) (and (= aux121 1) true)) (and (= aux121 0) false)))
(assert (and (=> (= aux121 0) (= weight121 1)) (=> (= aux121 1) (= weight121 0))))
(assert (and (>= aux122 0) (<= aux122 1)))
(assert (or (or (forall ((c1 Int)(c2 Int)) (=> (and ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 c1 )  ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 c2 ) ) (or ( class9_Class9BoolAttr0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c1 )  )  ( class9_Class9BoolAttr1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 c2 )  ) ))) (and (= aux122 1) true)) (and (= aux122 0) false)))
(assert (and (=> (= aux122 0) (= weight122 1)) (=> (= aux122 1) (= weight122 0))))
(assert (and (>= aux123 0) (<= aux123 1)))
(assert (and (>= aux124 0) (<= aux124 1)))
(assert (and (>= aux125 0) (<= aux125 1)))
(assert (and (>= aux126 0) (<= aux126 1)))
(assert (and (>= aux127 0) (<= aux127 1)))
(assert (and (>= aux128 0) (<= aux128 1)))
(assert (and (>= aux129 0) (<= aux129 1)))
(assert (and (>= aux130 0) (<= aux130 1)))
(assert (and (>= aux131 0) (<= aux131 1)))
(assert (and (>= aux132 0) (<= aux132 1)))
(assert (and (>= aux133 0) (<= aux133 1)))
(assert (and (>= aux134 0) (<= aux134 1)))
(assert (and (>= aux135 0) (<= aux135 1)))
(assert (and (>= aux136 0) (<= aux136 1)))
(assert (and (>= aux137 0) (<= aux137 1)))
(assert (and (>= aux138 0) (<= aux138 1)))
(assert (and (>= aux139 0) (<= aux139 1)))
(assert (and (>= aux140 0) (<= aux140 1)))
(assert (or (or (exists ((p Int)) ( type_6aadbf08_93f3_4ad8_8daa_ad7024df4d90_Class0 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux123 1) true)) (and (= aux123 0) false)))
(assert (and (=> (= aux123 0) (= weight123 1)) (=> (= aux123 1) (= weight123 0))))
(assert (or (or (exists ((p Int)) ( type_3d6b05d2_1843_499c_9bd2_1009cac10bc9_Class1 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux124 1) true)) (and (= aux124 0) false)))
(assert (and (=> (= aux124 0) (= weight124 1)) (=> (= aux124 1) (= weight124 0))))
(assert (or (or (exists ((p Int)) (and (and ( type_36034de1_d2cc_4482_bb5f_4f1ec5553891_Class10 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) )) (and (= aux125 1) true)) (and (= aux125 0) false)))
(assert (and (=> (= aux125 0) (= weight125 1)) (=> (= aux125 1) (= weight125 0))))
(assert (or (or (exists ((p Int)) ( type_e1d83536_9d3c_45dc_ad6d_0404546a81c5_Class11 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux126 1) true)) (and (= aux126 0) false)))
(assert (and (=> (= aux126 0) (= weight126 1)) (=> (= aux126 1) (= weight126 0))))
(assert (or (or (exists ((p Int)) ( type_b390a858_022c_4d82_b34e_73b1bbd13490_Class12 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux127 1) true)) (and (= aux127 0) false)))
(assert (and (=> (= aux127 0) (= weight127 1)) (=> (= aux127 1) (= weight127 0))))
(assert (or (or (exists ((p Int)) ( type_5bc5f8bc_a37a_4e50_860d_fd515488ac02_Class13 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux128 1) true)) (and (= aux128 0) false)))
(assert (and (=> (= aux128 0) (= weight128 1)) (=> (= aux128 1) (= weight128 0))))
(assert (or (or (exists ((p Int)) ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux129 1) true)) (and (= aux129 0) false)))
(assert (and (=> (= aux129 0) (= weight129 1)) (=> (= aux129 1) (= weight129 0))))
(assert (or (or (exists ((p Int)) ( type_ecf47546_1961_42ec_bf57_f004f584487c_Class15 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux130 1) true)) (and (= aux130 0) false)))
(assert (and (=> (= aux130 0) (= weight130 1)) (=> (= aux130 1) (= weight130 0))))
(assert (or (or (exists ((p Int)) (and ( type_e165a417_cfcd_4443_850c_9886444e9f3e_Class16 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  )  ( type_01081500_5812_4a42_814b_42d87b4760fc_Class14 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) )) (and (= aux131 1) true)) (and (= aux131 0) false)))
(assert (and (=> (= aux131 0) (= weight131 1)) (=> (= aux131 1) (= weight131 0))))
(assert (or (or (exists ((p Int)) ( type_d6ade2ba_625c_4466_91cf_8d2560a9e90c_Class17 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux132 1) true)) (and (= aux132 0) false)))
(assert (and (=> (= aux132 0) (= weight132 1)) (=> (= aux132 1) (= weight132 0))))
(assert (or (or (exists ((p Int)) ( type_4d2060d9_6fec_4990_9571_f88e7b99fdea_Class2 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux133 1) true)) (and (= aux133 0) false)))
(assert (and (=> (= aux133 0) (= weight133 1)) (=> (= aux133 1) (= weight133 0))))
(assert (or (or (exists ((p Int)) ( type_9a342ee5_4fa3_458d_80aa_8cb982170987_Class3 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux134 1) true)) (and (= aux134 0) false)))
(assert (and (=> (= aux134 0) (= weight134 1)) (=> (= aux134 1) (= weight134 0))))
(assert (or (or (exists ((p Int)) ( type_aa69de0b_ee43_4bf2_8ab0_f86afba2b0e0_Class4 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux135 1) true)) (and (= aux135 0) false)))
(assert (and (=> (= aux135 0) (= weight135 1)) (=> (= aux135 1) (= weight135 0))))
(assert (or (or (exists ((p Int)) ( type_eb5f8e9b_5bb3_4977_adb0_bfdceb3ab409_Class5 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux136 1) true)) (and (= aux136 0) false)))
(assert (and (=> (= aux136 0) (= weight136 1)) (=> (= aux136 1) (= weight136 0))))
(assert (or (or (exists ((p Int)) ( type_21312ed3_ce65_4eeb_92df_12c8a4d75ae5_Class6 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux137 1) true)) (and (= aux137 0) false)))
(assert (and (=> (= aux137 0) (= weight137 1)) (=> (= aux137 1) (= weight137 0))))
(assert (or (or (exists ((p Int)) ( type_2c6becad_05ea_41f7_8b26_95975495d737_Class7 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux138 1) true)) (and (= aux138 0) false)))
(assert (and (=> (= aux138 0) (= weight138 1)) (=> (= aux138 1) (= weight138 0))))
(assert (or (or (exists ((p Int)) ( type_cec29af2_d866_4704_a702_1f2ef0f37586_Class8 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux139 1) true)) (and (= aux139 0) false)))
(assert (and (=> (= aux139 0) (= weight139 1)) (=> (= aux139 1) (= weight139 0))))
(assert (or (or (exists ((p Int)) ( type_e879511e_b329_4d9f_8373_feeb191daf55_Class9 ( obj_801ea87f_a353_4375_844e_ebb28752cbe0 p )  ) ) (and (= aux140 1) true)) (and (= aux140 0) false)))
(assert (and (=> (= aux140 0) (= weight140 1)) (=> (= aux140 1) (= weight140 0))))
(assert (= (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ weight0 weight1) weight2) weight3) weight4) weight5) weight6) weight7) weight8) weight9) weight10) weight11) weight12) weight13) weight14) weight15) weight16) weight17) weight18) weight19) weight20) weight21) weight22) weight23) weight24) weight25) weight26) weight27) weight28) weight29) weight30) weight31) weight32) weight33) weight34) weight35) weight36) weight37) weight38) weight39) weight40) weight41) weight42) weight43) weight44) weight45) weight46) weight47) weight48) weight49) weight50) weight51) weight52) weight53) weight54) weight55) weight56) weight57) weight58) weight59) weight60) weight61) weight62) weight63) weight64) weight65) weight66) weight67) weight68) weight69) weight70) weight71) weight72) weight73) weight74) weight75) weight76) weight77) weight78) weight79) weight80) weight81) weight82) weight83) weight84) weight85) weight86) weight87) weight88) weight89) weight90) weight91) weight92) weight93) weight94) weight95) weight96) weight97) weight98) weight99) weight100) weight101) weight102) weight103) weight104) weight105) weight106) weight107) weight108) weight109) weight110) weight111) weight112) weight113) weight114) weight115) weight116) weight117) weight118) weight119) weight120) weight121) weight122) weight123) weight124) weight125) weight126) weight127) weight128) weight129) weight130) weight131) weight132) weight133) weight134) weight135) weight136) weight137) weight138) weight139) weight140) 129))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 0)) (= weight33 1)) (= weight34 0)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 0)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 0)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 0)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 0)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 0)) (= weight33 1)) (= weight34 0)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 0)) (= weight33 1)) (= weight34 0)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 0)) (= weight33 1)) (= weight34 0)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 0)) (= weight33 1)) (= weight34 0)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 0)) (= weight63 1)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 0)) (= weight70 1)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 0)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 0)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) (= weight52 0)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 0)) (= weight119 0)) (= weight120 1)) (= weight121 1)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 0)) (= weight33 1)) (= weight34 0)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 0)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 0)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 1)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 1)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 1)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 0)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 0)) (= weight31 1)) (= weight32 1)) (= weight33 0)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 0)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 0)) (= weight50 1)) (= weight51 1)) (= weight52 1)) (= weight53 1)) (= weight54 1)) (= weight55 1)) (= weight56 1)) (= weight57 1)) (= weight58 1)) (= weight59 1)) (= weight60 1)) (= weight61 1)) (= weight62 1)) (= weight63 0)) (= weight64 1)) (= weight65 1)) (= weight66 1)) (= weight67 1)) (= weight68 1)) (= weight69 1)) (= weight70 0)) (= weight71 1)) (= weight72 1)) (= weight73 1)) (= weight74 1)) (= weight75 1)) (= weight76 1)) (= weight77 1)) (= weight78 1)) (= weight79 1)) (= weight80 1)) (= weight81 1)) (= weight82 1)) (= weight83 1)) (= weight84 1)) (= weight85 0)) (= weight86 1)) (= weight87 1)) (= weight88 1)) (= weight89 1)) (= weight90 1)) (= weight91 1)) (= weight92 1)) (= weight93 1)) (= weight94 1)) (= weight95 1)) (= weight96 1)) (= weight97 1)) (= weight98 1)) (= weight99 1)) (= weight100 1)) (= weight101 1)) (= weight102 1)) (= weight103 1)) (= weight104 1)) (= weight105 1)) (= weight106 1)) (= weight107 0)) (= weight108 1)) (= weight109 1)) (= weight110 1)) (= weight111 1)) (= weight112 1)) (= weight113 1)) (= weight114 1)) (= weight115 1)) (= weight116 1)) (= weight117 1)) (= weight118 1)) (= weight119 1)) (= weight120 1)) (= weight121 0)) (= weight122 0)) (= weight123 1)) (= weight124 1)) (= weight125 1)) (= weight126 1)) (= weight127 1)) (= weight128 1)) (= weight129 1)) (= weight130 1)) (= weight131 1)) (= weight132 1)) (= weight133 1)) (= weight134 1)) (= weight135 1)) (= weight136 1)) (= weight137 1)) (= weight138 1)) (= weight139 1)) (= weight140 1)) ))
