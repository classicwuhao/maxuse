
;this file is automatically generated: Wed Aug 31 18:13:43 IST 2016

;declarations generated

(declare-fun type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 ( Int) Bool )
(declare-fun oclExcludes ( Int Int) Bool )
(declare-fun type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 ( Int) Bool )
(declare-fun aux19 () Int )
(declare-fun aux16 () Int )
(declare-fun aux15 () Int )
(declare-fun aux18 () Int )
(declare-fun aux17 () Int )
(declare-fun aux12 () Int )
(declare-fun aux11 () Int )
(declare-fun aux14 () Int )
(declare-fun aux13 () Int )
(declare-fun aux10 () Int )
(declare-fun class1_Class1IntAttr2 ( Int) Int )
(declare-fun oclSelect ( Int Bool) Int )
(declare-fun class3_Class3IntAttr0 ( Int) Int )
(declare-fun weight50 () Int )
(declare-fun class3_Class3IntAttr2 ( Int) Int )
(declare-fun class3_Class3IntAttr1 ( Int) Int )
(declare-fun weight51 () Int )
(declare-fun Cardinality ( Int) Int )
(declare-fun rel_9516bec6_7e00_46bd_b0e8_0ef35419e600_Class3_Class3 ( Int Int) Bool )
(declare-fun class0_Class0IntAttr2 ( Int) Int )
(declare-fun obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda ( Int) Int )
(declare-fun weight13 () Int )
(declare-fun weight14 () Int )
(declare-fun weight11 () Int )
(declare-fun weight12 () Int )
(declare-fun weight17 () Int )
(declare-fun weight18 () Int )
(declare-fun weight15 () Int )
(declare-fun weight16 () Int )
(declare-fun weight10 () Int )
(declare-fun weight19 () Int )
(declare-fun Enum0 ( Int) Int )
(declare-fun Enum1 ( Int) Int )
(declare-fun weight24 () Int )
(declare-fun Enum2 ( Int) Int )
(declare-fun weight25 () Int )
(declare-fun weight22 () Int )
(declare-fun weight23 () Int )
(declare-fun weight28 () Int )
(declare-fun weight29 () Int )
(declare-fun weight26 () Int )
(declare-fun weight27 () Int )
(declare-fun weight20 () Int )
(declare-fun weight21 () Int )
(declare-fun weight35 () Int )
(declare-fun weight36 () Int )
(declare-fun weight33 () Int )
(declare-fun weight34 () Int )
(declare-fun weight39 () Int )
(declare-fun container_ ( Int) Int )
(declare-fun weight37 () Int )
(declare-fun weight38 () Int )
(declare-fun type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 ( Int) Bool )
(declare-fun weight31 () Int )
(declare-fun weight32 () Int )
(declare-fun weight30 () Int )
(declare-fun type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 ( Int) Bool )
(declare-fun weight46 () Int )
(declare-fun weight47 () Int )
(declare-fun weight44 () Int )
(declare-fun weight45 () Int )
(declare-fun weight48 () Int )
(declare-fun weight49 () Int )
(declare-fun weight42 () Int )
(declare-fun weight43 () Int )
(declare-fun weight40 () Int )
(declare-fun weight41 () Int )
(declare-fun rel_d8bba727_7c51_4686_a7b7_642b8883be36_Class2_Class2 ( Int Int) Bool )
(declare-fun class1_Class1BoolAttr0 ( Int) Bool )
(declare-fun class1_Class1BoolAttr1 ( Int) Bool )
(declare-fun aux27 () Int )
(declare-fun aux26 () Int )
(declare-fun class2_Class2IntAttr2 ( Int) Int )
(declare-fun aux29 () Int )
(declare-fun aux28 () Int )
(declare-fun aux23 () Int )
(declare-fun aux22 () Int )
(declare-fun aux25 () Int )
(declare-fun aux24 () Int )
(declare-fun class4_Class4IntAttr0 ( Int) Int )
(declare-fun aux21 () Int )
(declare-fun aux20 () Int )
(declare-fun class4_Class4IntAttr2 ( Int) Int )
(declare-fun class4_Class4IntAttr1 ( Int) Int )
(declare-fun weight9 () Int )
(declare-fun weight8 () Int )
(declare-fun aux38 () Int )
(declare-fun aux37 () Int )
(declare-fun aux39 () Int )
(declare-fun aux34 () Int )
(declare-fun oclIncludes ( Int Int) Bool )
(declare-fun aux33 () Int )
(declare-fun aux36 () Int )
(declare-fun aux35 () Int )
(declare-fun aux30 () Int )
(declare-fun aux32 () Int )
(declare-fun aux31 () Int )
(declare-fun rel_db59fed4_d7ab_4d2a_8569_a207eac8ce2b_Class0_Class1 ( Int Int) Bool )
(declare-fun aux1 () Int )
(declare-fun aux0 () Int )
(declare-fun aux3 () Int )
(declare-fun aux2 () Int )
(declare-fun aux49 () Int )
(declare-fun aux48 () Int )
(declare-fun aux45 () Int )
(declare-fun aux44 () Int )
(declare-fun aux47 () Int )
(declare-fun aux46 () Int )
(declare-fun aux41 () Int )
(declare-fun aux40 () Int )
(declare-fun aux43 () Int )
(declare-fun aux42 () Int )
(declare-fun aux50 () Int )
(declare-fun class0_Class0BoolAttr1 ( Int) Bool )
(declare-fun class0_Class0BoolAttr0 ( Int) Bool )
(declare-fun aux9 () Int )
(declare-fun aux8 () Int )
(declare-fun aux5 () Int )
(declare-fun aux4 () Int )
(declare-fun aux7 () Int )
(declare-fun aux6 () Int )
(declare-fun rel_0d001cc5_2b2d_4a74_b8c2_dcaf6b3ad3f1_Class1_Class4 ( Int Int) Bool )
(declare-fun weight7 () Int )
(declare-fun weight6 () Int )
(declare-fun weight5 () Int )
(declare-fun weight4 () Int )
(declare-fun weight3 () Int )
(declare-fun ObjAt ( Int Int) Int )
(declare-fun weight2 () Int )
(declare-fun aux51 () Int )
(declare-fun weight1 () Int )
(declare-fun type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 ( Int) Bool )
(declare-fun weight0 () Int )
(declare-fun class2_Class2BoolAttr1 ( Int) Bool )
(declare-fun rel_5bb9fb64_1374_44e8_8b0b_07525bc01bae_Class4_Class0 ( Int Int) Bool )
(declare-fun class2_Class2BoolAttr0 ( Int) Bool )

;formula(s) generated
(assert (forall ((p Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 p )  (and (>= ( Enum2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  )  0) (<= ( Enum2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  )  6)))))
(assert (forall ((p Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 p )  (and (>= ( Enum0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  )  0) (<= ( Enum0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  )  2)))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_db59fed4_d7ab_4d2a_8569_a207eac8ce2b_Class0_Class1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 x )  ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_db59fed4_d7ab_4d2a_8569_a207eac8ce2b_Class0_Class1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 x )  ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_db59fed4_d7ab_4d2a_8569_a207eac8ce2b_Class0_Class1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 x )  ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_db59fed4_d7ab_4d2a_8569_a207eac8ce2b_Class0_Class1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 x )  ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux0 0) (= weight0 1)) (=> (= aux0 1) (= weight0 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_0d001cc5_2b2d_4a74_b8c2_dcaf6b3ad3f1_Class1_Class4 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 x )  ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_0d001cc5_2b2d_4a74_b8c2_dcaf6b3ad3f1_Class1_Class4 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 x )  ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_0d001cc5_2b2d_4a74_b8c2_dcaf6b3ad3f1_Class1_Class4 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 x )  ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_0d001cc5_2b2d_4a74_b8c2_dcaf6b3ad3f1_Class1_Class4 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 x )  ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux1 0) (= weight1 1)) (=> (= aux1 1) (= weight1 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_d8bba727_7c51_4686_a7b7_642b8883be36_Class2_Class2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 x )  ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_d8bba727_7c51_4686_a7b7_642b8883be36_Class2_Class2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 x )  ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_d8bba727_7c51_4686_a7b7_642b8883be36_Class2_Class2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 x )  ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_d8bba727_7c51_4686_a7b7_642b8883be36_Class2_Class2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 x )  ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux2 0) (= weight2 1)) (=> (= aux2 1) (= weight2 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_9516bec6_7e00_46bd_b0e8_0ef35419e600_Class3_Class3 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 x )  ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_9516bec6_7e00_46bd_b0e8_0ef35419e600_Class3_Class3 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 x )  ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux3 0) (<= aux3 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_9516bec6_7e00_46bd_b0e8_0ef35419e600_Class3_Class3 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 x )  ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux3 1) true)) (and (= aux3 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_9516bec6_7e00_46bd_b0e8_0ef35419e600_Class3_Class3 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 x )  ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux3 0) (= weight3 1)) (=> (= aux3 1) (= weight3 0))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_5bb9fb64_1374_44e8_8b0b_07525bc01bae_Class4_Class0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 x )  ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 y ) )) (>= ( Cardinality ( container_ x )  )  1))))
(assert (exists ((x Int)(y Int)) (and (and ( rel_5bb9fb64_1374_44e8_8b0b_07525bc01bae_Class4_Class0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 x )  ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 y ) )) (>= ( Cardinality ( container_ y )  )  1))))
(assert (and (>= aux4 0) (<= aux4 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_5bb9fb64_1374_44e8_8b0b_07525bc01bae_Class4_Class0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 x )  ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux4 1) true)) (and (= aux4 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_5bb9fb64_1374_44e8_8b0b_07525bc01bae_Class4_Class0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda x )   ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda y )  )  (and ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 x )  ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux4 0) (= weight4 1)) (=> (= aux4 1) (= weight4 0))))
(assert (and (>= aux5 0) (<= aux5 1)))
(assert (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (> ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  19))) (and (= aux5 1) true)) (and (= aux5 0) false)))
(assert (and (=> (= aux5 0) (= weight5 1)) (=> (= aux5 1) (= weight5 0))))
(assert (and (>= aux6 0) (<= aux6 1)))
(assert (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (not (= ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  4) ))) (and (= aux6 1) true)) (and (= aux6 0) false)))
(assert (and (=> (= aux6 0) (= weight6 1)) (=> (= aux6 1) (= weight6 0))))
(assert (and (>= aux7 0) (<= aux7 1)))
(assert (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (< ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  12))) (and (= aux7 1) true)) (and (= aux7 0) false)))
(assert (and (=> (= aux7 0) (= weight7 1)) (=> (= aux7 1) (= weight7 0))))
(assert (and (>= aux8 0) (<= aux8 1)))
(assert (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (= ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  14))) (and (= aux8 1) true)) (and (= aux8 0) false)))
(assert (and (=> (= aux8 0) (= weight8 1)) (=> (= aux8 1) (= weight8 0))))
(assert (and (>= aux9 0) (<= aux9 1)))
(assert (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  ( class0_Class0BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (and (= aux9 1) true)) (and (= aux9 0) false)))
(assert (and (=> (= aux9 0) (= weight9 1)) (=> (= aux9 1) (= weight9 0))))
(assert (and (>= aux10 0) (<= aux10 1)))
(assert (or (or (or (and (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  ( class0_Class0BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  ( class0_Class0BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) ))) (and (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (> ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  15))) (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (> ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  6))))) (and (= aux10 1) true)) (and (= aux10 0) false)))
(assert (and (=> (= aux10 0) (= weight10 1)) (=> (= aux10 1) (= weight10 0))))
(assert (and (>= aux11 0) (<= aux11 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (>= ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  8))) (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (= ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  5)))) (and (= aux11 1) true)) (and (= aux11 0) false)))
(assert (and (=> (= aux11 0) (= weight11 1)) (=> (= aux11 1) (= weight11 0))))
(assert (and (>= aux12 0) (<= aux12 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  ( class0_Class0BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (and (>= ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  16) (and (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  ( class0_Class0BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 v )  (> ( class0_Class0IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  16)))))))) (and (= aux12 1) true)) (and (= aux12 0) false)))
(assert (and (=> (= aux12 0) (= weight12 1)) (=> (= aux12 1) (= weight12 0))))
(assert (and (>= aux13 0) (<= aux13 1)))
(assert (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (> ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  17))) (and (= aux13 1) true)) (and (= aux13 0) false)))
(assert (and (=> (= aux13 0) (= weight13 1)) (=> (= aux13 1) (= weight13 0))))
(assert (and (>= aux14 0) (<= aux14 1)))
(assert (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (< ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  2))) (and (= aux14 1) true)) (and (= aux14 0) false)))
(assert (and (=> (= aux14 0) (= weight14 1)) (=> (= aux14 1) (= weight14 0))))
(assert (and (>= aux15 0) (<= aux15 1)))
(assert (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (= ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  13))) (and (= aux15 1) true)) (and (= aux15 0) false)))
(assert (and (=> (= aux15 0) (= weight15 1)) (=> (= aux15 1) (= weight15 0))))
(assert (and (>= aux16 0) (<= aux16 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) ))) (and (= aux16 1) true)) (and (= aux16 0) false)))
(assert (and (=> (= aux16 0) (= weight16 1)) (=> (= aux16 1) (= weight16 0))))
(assert (and (>= aux17 0) (<= aux17 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (or ( class1_Class1BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (> ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  7))))))) (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) ))) (and (= aux17 1) true)) (and (= aux17 0) false)))
(assert (and (=> (= aux17 0) (= weight17 1)) (=> (= aux17 1) (= weight17 0))))
(assert (and (>= aux18 0) (<= aux18 1)))
(assert (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (or ( class1_Class1BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (>= ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  13))) (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )))))) (and (= aux18 1) true)) (and (= aux18 0) false)))
(assert (and (=> (= aux18 0) (= weight18 1)) (=> (= aux18 1) (= weight18 0))))
(assert (and (>= aux19 0) (<= aux19 1)))
(assert (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (or (> ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  7) (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  ( class1_Class1BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )))))) (and (= aux19 1) true)) (and (= aux19 0) false)))
(assert (and (=> (= aux19 0) (= weight19 1)) (=> (= aux19 1) (= weight19 0))))
(assert (and (>= aux20 0) (<= aux20 1)))
(assert (or (or (forall ((v Int)) (=> ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 v )  (not (= ( class1_Class1IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  3) ))) (and (= aux20 1) true)) (and (= aux20 0) false)))
(assert (and (=> (= aux20 0) (= weight20 1)) (=> (= aux20 1) (= weight20 0))))
(assert (and (>= aux21 0) (<= aux21 1)))
(assert (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (< ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  3))) (and (= aux21 1) true)) (and (= aux21 0) false)))
(assert (and (=> (= aux21 0) (= weight21 1)) (=> (= aux21 1) (= weight21 0))))
(assert (and (>= aux22 0) (<= aux22 1)))
(assert (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (> ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  11))) (and (= aux22 1) true)) (and (= aux22 0) false)))
(assert (and (=> (= aux22 0) (= weight22 1)) (=> (= aux22 1) (= weight22 0))))
(assert (and (>= aux23 0) (<= aux23 1)))
(assert (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (> ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  15))) (and (= aux23 1) true)) (and (= aux23 0) false)))
(assert (and (=> (= aux23 0) (= weight23 1)) (=> (= aux23 1) (= weight23 0))))
(assert (and (>= aux24 0) (<= aux24 1)))
(assert (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (>= ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  9))) (and (= aux24 1) true)) (and (= aux24 0) false)))
(assert (and (=> (= aux24 0) (= weight24 1)) (=> (= aux24 1) (= weight24 0))))
(assert (and (>= aux25 0) (<= aux25 1)))
(assert (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (not ( class2_Class2BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  ))) (and (= aux25 1) true)) (and (= aux25 0) false)))
(assert (and (=> (= aux25 0) (= weight25 1)) (=> (= aux25 1) (= weight25 0))))
(assert (and (>= aux26 0) (<= aux26 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (or (>= ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  19) (and (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  ( class2_Class2BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )) (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  ( class2_Class2BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )))))) (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (>= ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  7)))) (and (= aux26 1) true)) (and (= aux26 0) false)))
(assert (and (=> (= aux26 0) (= weight26 1)) (=> (= aux26 1) (= weight26 0))))
(assert (and (>= aux27 0) (<= aux27 1)))
(assert (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (or ( class2_Class2BoolAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  (and (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (= ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  19))) (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  ( class2_Class2BoolAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  ) )))))) (and (= aux27 1) true)) (and (= aux27 0) false)))
(assert (and (=> (= aux27 0) (= weight27 1)) (=> (= aux27 1) (= weight27 0))))
(assert (and (>= aux28 0) (<= aux28 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (< ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  14))) (forall ((v Int)) (=> ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 v )  (> ( class2_Class2IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  9)))) (and (= aux28 1) true)) (and (= aux28 0) false)))
(assert (and (=> (= aux28 0) (= weight28 1)) (=> (= aux28 1) (= weight28 0))))
(assert (and (>= aux29 0) (<= aux29 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (> ( class3_Class3IntAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  18))) (and (= aux29 1) true)) (and (= aux29 0) false)))
(assert (and (=> (= aux29 0) (= weight29 1)) (=> (= aux29 1) (= weight29 0))))
(assert (and (>= aux30 0) (<= aux30 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (> ( class3_Class3IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  17))) (and (= aux30 1) true)) (and (= aux30 0) false)))
(assert (and (=> (= aux30 0) (= weight30 1)) (=> (= aux30 1) (= weight30 0))))
(assert (and (>= aux31 0) (<= aux31 1)))
(assert (or (or (forall ((c3_2 Int)(c3_1 Int)) (=> (and ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 c3_1 )  ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 c3_2 ) ) (not (= ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda c3_1 )  )  ( class3_Class3IntAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda c3_2 )  ) ) ))) (and (= aux31 1) true)) (and (= aux31 0) false)))
(assert (and (=> (= aux31 0) (= weight31 1)) (=> (= aux31 1) (= weight31 0))))
(assert (and (>= aux32 0) (<= aux32 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (not (= ( Enum2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  0) ))) (and (= aux32 1) true)) (and (= aux32 0) false)))
(assert (and (=> (= aux32 0) (= weight32 1)) (=> (= aux32 1) (= weight32 0))))
(assert (and (>= aux33 0) (<= aux33 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (= ( Enum2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  2))) (and (= aux33 1) true)) (and (= aux33 0) false)))
(assert (and (=> (= aux33 0) (= weight33 1)) (=> (= aux33 1) (= weight33 0))))
(assert (and (>= aux34 0) (<= aux34 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (<= ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  10))) (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (< ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  8)))) (and (= aux34 1) true)) (and (= aux34 0) false)))
(assert (and (=> (= aux34 0) (= weight34 1)) (=> (= aux34 1) (= weight34 0))))
(assert (and (>= aux35 0) (<= aux35 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (or (= ( Enum2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  3) (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (>= ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  12))) (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (> ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  1))))))) (and (= aux35 1) true)) (and (= aux35 0) false)))
(assert (and (=> (= aux35 0) (= weight35 1)) (=> (= aux35 1) (= weight35 0))))
(assert (and (>= aux36 0) (<= aux36 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (or (>= ( class3_Class3IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  11) (and (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (> ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  11))) (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (> ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  6))))))) (and (= aux36 1) true)) (and (= aux36 0) false)))
(assert (and (=> (= aux36 0) (= weight36 1)) (=> (= aux36 1) (= weight36 0))))
(assert (and (>= aux37 0) (<= aux37 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (or (> ( class3_Class3IntAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  1) (and (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (<= ( class3_Class3IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  9))) (forall ((v Int)) (=> ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 v )  (= ( Enum2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  3))))))) (and (= aux37 1) true)) (and (= aux37 0) false)))
(assert (and (=> (= aux37 0) (= weight37 1)) (=> (= aux37 1) (= weight37 0))))
(assert (and (>= aux38 0) (<= aux38 1)))
(assert (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (= ( class4_Class4IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  19))) (and (= aux38 1) true)) (and (= aux38 0) false)))
(assert (and (=> (= aux38 0) (= weight38 1)) (=> (= aux38 1) (= weight38 0))))
(assert (and (>= aux39 0) (<= aux39 1)))
(assert (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (<= ( class4_Class4IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  9))) (and (= aux39 1) true)) (and (= aux39 0) false)))
(assert (and (=> (= aux39 0) (= weight39 1)) (=> (= aux39 1) (= weight39 0))))
(assert (and (>= aux40 0) (<= aux40 1)))
(assert (or (or (forall ((c4_2 Int)(c4_1 Int)) (=> (and ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 c4_1 )  ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 c4_2 ) ) (> ( class4_Class4IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda c4_1 )  )  ( class4_Class4IntAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda c4_2 )  ) ))) (and (= aux40 1) true)) (and (= aux40 0) false)))
(assert (and (=> (= aux40 0) (= weight40 1)) (=> (= aux40 1) (= weight40 0))))
(assert (and (>= aux41 0) (<= aux41 1)))
(assert (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (not (= ( Enum0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  1) ))) (and (= aux41 1) true)) (and (= aux41 0) false)))
(assert (and (=> (= aux41 0) (= weight41 1)) (=> (= aux41 1) (= weight41 0))))
(assert (and (>= aux42 0) (<= aux42 1)))
(assert (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (= ( Enum0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  2))) (and (= aux42 1) true)) (and (= aux42 0) false)))
(assert (and (=> (= aux42 0) (= weight42 1)) (=> (= aux42 1) (= weight42 0))))
(assert (and (>= aux43 0) (<= aux43 1)))
(assert (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (or (<= ( class4_Class4IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  19) (and (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (< ( class4_Class4IntAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  13))) (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (< ( class4_Class4IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  2))))))) (and (= aux43 1) true)) (and (= aux43 0) false)))
(assert (and (=> (= aux43 0) (= weight43 1)) (=> (= aux43 1) (= weight43 0))))
(assert (and (>= aux44 0) (<= aux44 1)))
(assert (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (or (= ( class4_Class4IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  2) (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (not (= ( class4_Class4IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  3) ))) (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (<= ( class4_Class4IntAttr0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  2))))))) (and (= aux44 1) true)) (and (= aux44 0) false)))
(assert (and (=> (= aux44 0) (= weight44 1)) (=> (= aux44 1) (= weight44 0))))
(assert (and (>= aux45 0) (<= aux45 1)))
(assert (or (or (or (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (< ( class4_Class4IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  9))) (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (not (= ( class4_Class4IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  12) )))) (and (= aux45 1) true)) (and (= aux45 0) false)))
(assert (and (=> (= aux45 0) (= weight45 1)) (=> (= aux45 1) (= weight45 0))))
(assert (and (>= aux46 0) (<= aux46 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (>= ( class4_Class4IntAttr2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  6))) (forall ((v Int)) (=> ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 v )  (<= ( class4_Class4IntAttr1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda v )  )  0)))) (and (= aux46 1) true)) (and (= aux46 0) false)))
(assert (and (=> (= aux46 0) (= weight46 1)) (=> (= aux46 1) (= weight46 0))))
(assert (and (>= aux47 0) (<= aux47 1)))
(assert (and (>= aux48 0) (<= aux48 1)))
(assert (and (>= aux49 0) (<= aux49 1)))
(assert (and (>= aux50 0) (<= aux50 1)))
(assert (and (>= aux51 0) (<= aux51 1)))
(assert (or (or (exists ((p Int)) ( type_6c5e974f_9d6e_489d_887e_8aaf18e8bd03_Class0 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  ) ) (and (= aux47 1) true)) (and (= aux47 0) false)))
(assert (and (=> (= aux47 0) (= weight47 1)) (=> (= aux47 1) (= weight47 0))))
(assert (or (or (exists ((p Int)) ( type_dfb0e623_b144_4d94_9a07_f199fd557d30_Class1 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  ) ) (and (= aux48 1) true)) (and (= aux48 0) false)))
(assert (and (=> (= aux48 0) (= weight48 1)) (=> (= aux48 1) (= weight48 0))))
(assert (or (or (exists ((p Int)) ( type_59d04bd6_c47d_4db8_b479_8821b20a4ca5_Class2 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  ) ) (and (= aux49 1) true)) (and (= aux49 0) false)))
(assert (and (=> (= aux49 0) (= weight49 1)) (=> (= aux49 1) (= weight49 0))))
(assert (or (or (exists ((p Int)) ( type_d778071b_22e1_4e41_9563_d582a21a83bc_Class3 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  ) ) (and (= aux50 1) true)) (and (= aux50 0) false)))
(assert (and (=> (= aux50 0) (= weight50 1)) (=> (= aux50 1) (= weight50 0))))
(assert (or (or (exists ((p Int)) ( type_86f2023a_f57f_407a_9dea_aa0f701208c7_Class4 ( obj_5c1622d3_5496_4c04_8c09_4c0c94a58cda p )  ) ) (and (= aux51 1) true)) (and (= aux51 0) false)))
(assert (and (=> (= aux51 0) (= weight51 1)) (=> (= aux51 1) (= weight51 0))))
(assert (= (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ (+ weight0 weight1) weight2) weight3) weight4) weight5) weight6) weight7) weight8) weight9) weight10) weight11) weight12) weight13) weight14) weight15) weight16) weight17) weight18) weight19) weight20) weight21) weight22) weight23) weight24) weight25) weight26) weight27) weight28) weight29) weight30) weight31) weight32) weight33) weight34) weight35) weight36) weight37) weight38) weight39) weight40) weight41) weight42) weight43) weight44) weight45) weight46) weight47) weight48) weight49) weight50) weight51) 46))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 0)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 1)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 0)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 0)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 1)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 0)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 0)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 0)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 0)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 1)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 0)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 0)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 0)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 1)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 0)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 0)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 0)) (= weight8 1)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 0)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 0)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 0)) (= weight15 1)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 1)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 0)) (= weight14 1)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 0)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 0)) (= weight39 1)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
(assert (not (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) (= weight8 0)) (= weight9 1)) (= weight10 1)) (= weight11 1)) (= weight12 1)) (= weight13 1)) (= weight14 0)) (= weight15 0)) (= weight16 1)) (= weight17 1)) (= weight18 1)) (= weight19 1)) (= weight20 1)) (= weight21 0)) (= weight22 1)) (= weight23 1)) (= weight24 1)) (= weight25 1)) (= weight26 1)) (= weight27 1)) (= weight28 1)) (= weight29 1)) (= weight30 1)) (= weight31 1)) (= weight32 1)) (= weight33 1)) (= weight34 1)) (= weight35 1)) (= weight36 1)) (= weight37 1)) (= weight38 1)) (= weight39 0)) (= weight40 1)) (= weight41 1)) (= weight42 1)) (= weight43 1)) (= weight44 1)) (= weight45 1)) (= weight46 1)) (= weight47 1)) (= weight48 1)) (= weight49 1)) (= weight50 1)) (= weight51 1)) ))
