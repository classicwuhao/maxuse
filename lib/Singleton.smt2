
;this file is automatically generated: Fri Jul 01 15:01:37 IST 2016

;declarations generated

(declare-fun obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 ( Int) Int )
(declare-fun oclSelect ( Int Bool) Int )
(declare-fun type_d95b6b8d_46d5_4109_981d_a4a39fe7ca68_Singleton ( Int) Bool )
(declare-fun oclExcludes ( Int Int) Bool )
(declare-fun container_ ( Int) Int )
(declare-fun Cardinality ( Int) Int )
(declare-fun oclIncludes ( Int Int) Bool )
(declare-fun aux2 () Int )
(declare-fun aux0 () Int )
(declare-fun aux1 () Int )
(declare-fun weight2 () Int )
(declare-fun weight0 () Int )
(declare-fun weight1 () Int )
(declare-fun ObjAt ( Int Int) Int )

;formula(s) generated
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d95b6b8d_46d5_4109_981d_a4a39fe7ca68_Singleton ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 v )  )  (= ( Cardinality ( container_ ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 v )  )  )  1))) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (and (=> (= aux0 0) (= weight0 1)) (=> (= aux0 1) (= weight0 0))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d95b6b8d_46d5_4109_981d_a4a39fe7ca68_Singleton ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 v )  )  (= ( Cardinality ( container_ ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 v )  )  )  10))) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (and (=> (= aux1 0) (= weight1 9999)) (=> (= aux1 1) (= weight1 0))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((v Int)) (=> ( type_d95b6b8d_46d5_4109_981d_a4a39fe7ca68_Singleton ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 v )  )  (= ( Cardinality ( container_ ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 v )  )  )  4))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (and (=> (= aux2 0) (= weight2 9999)) (=> (= aux2 1) (= weight2 0))))
(assert (exists ((o Int)) ( type_d95b6b8d_46d5_4109_981d_a4a39fe7ca68_Singleton ( obj_4c28c843_9137_44ca_9ab9_1ae43fd7d2e6 o )  ) ))
(assert (= (+ (+ weight0 weight1) weight2) 9999))
(assert (not (and (and (= weight0 0) (= weight1 9999)) (= weight2 0)) ))
(assert (not (and (and (= weight0 0) (= weight1 0)) (= weight2 9999)) ))
