
;this file is automatically generated: Wed Feb 08 15:57:23 GMT 2017

;declarations generated

(declare-fun Gender ( Int) Int )
(declare-fun obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 ( Int) Int )
(declare-fun oclExcludes ( Int Int) Bool )
(declare-fun oclSelect ( Int Bool) Int )
(declare-fun Cardinality ( Int) Int )
(declare-fun rel_0b66e8de_3242_4279_9e66_f7c909947cb8_Marriage ( Int Int) Bool )
(declare-fun container_ ( Int) Int )
(declare-fun type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person ( Int) Bool )
(declare-fun CivilStatus ( Int) Int )
(declare-fun oclIncludes ( Int Int) Bool )
(declare-fun person_name ( Int) Int )
(declare-fun aux1 () Int )
(declare-fun aux0 () Int )
(declare-fun aux3 () Int )
(declare-fun aux2 () Int )
(declare-fun aux4 () Int )
(declare-fun weight4 () Int )
(declare-fun weight3 () Int )
(declare-fun ObjAt ( Int Int) Int )
(declare-fun weight2 () Int )
(declare-fun weight1 () Int )
(declare-fun weight0 () Int )

;formula(s) generated
(assert (forall ((p Int)) (=> ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person p )  (and (>= ( CivilStatus ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  )  0) (<= ( CivilStatus ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  )  3)))))
(assert (forall ((p Int)) (=> ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person p )  (and (>= ( Gender ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  )  0) (<= ( Gender ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  )  1)))))
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_0b66e8de_3242_4279_9e66_f7c909947cb8_Marriage ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 x )   ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 y )  )  (and ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person x )  ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  0)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_0b66e8de_3242_4279_9e66_f7c909947cb8_Marriage ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 x )   ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 y )  )  (and ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person x )  ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  0)) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (= (* ( Cardinality ( container_ x )  )  1) (* ( Cardinality ( container_ y )  )  1))))))
(assert (and (=> (= aux0 0) (= weight0 5)) (=> (= aux0 1) (= weight0 0))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (forall ((p1 Int)(p2 Int)) (=> (and ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person p1 )  ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person p2 ) ) (=> (not (= ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p1 )  ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p2 ) ) ) (not (= ( person_name ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p1 )  )  ( person_name ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p2 )  ) ) )))) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (and (=> (= aux1 0) (= weight1 12)) (=> (= aux1 1) (= weight1 0))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((p Int)) (=> ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person p )  (=> (= ( Gender ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  )  0) (not (exists ((v Int)) (and ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person v )  ( rel_0b66e8de_3242_4279_9e66_f7c909947cb8_Marriage ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )   ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 v )  ) )) )))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (and (=> (= aux2 0) (= weight2 9)) (=> (= aux2 1) (= weight2 0))))
(assert (and (>= aux3 0) (<= aux3 1)))
(assert (or (or (forall ((p Int)) (=> ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person p )  (=> (= ( Gender ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  )  1) (not (exists ((v Int)) (and ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person v )  ( rel_0b66e8de_3242_4279_9e66_f7c909947cb8_Marriage ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )   ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 v )  ) )) )))) (and (= aux3 1) true)) (and (= aux3 0) false)))
(assert (and (=> (= aux3 0) (= weight3 7)) (=> (= aux3 1) (= weight3 0))))
(assert (and (>= aux4 0) (<= aux4 1)))
(assert (or (or (exists ((p Int)) ( type_fcc19f42_6460_4fcf_99a9_37e20d8d8512_Person ( obj_9f34b474_0b2f_49ae_a930_27a997f8eec5 p )  ) ) (and (= aux4 1) true)) (and (= aux4 0) false)))
(assert (and (=> (= aux4 0) (= weight4 3)) (=> (= aux4 1) (= weight4 0))))
(assert (= (+ (+ (+ (+ aux0 aux1) aux2) aux3) aux4) 0))

 ;end of formula 