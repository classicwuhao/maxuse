
;this file is automatically generated: Fri May 05 11:54:26 IST 2017

;declarations generated

(declare-fun type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person ( Int) Bool )
(declare-fun oclExcludes ( Int Int) Bool )
(declare-fun module_credit ( Int) Int )
(declare-fun oclSelect ( Int Bool) Int )
(declare-fun person_mature ( Int) Bool )
(declare-fun Cardinality ( Int) Int )
(declare-fun module_year ( Int) Int )
(declare-fun type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module ( Int) Bool )
(declare-fun obj_f5c545a3_d87d_43e1_bede_b639d0f43934 ( Int) Int )
(declare-fun module_code ( Int) Int )
(declare-fun student_year ( Int) Int )
(declare-fun kb225747b_1b39_4876_90f5_21712fdfbc5f () Int )
(declare-fun container_ ( Int) Int )
(declare-fun person_age ( Int) Int )
(declare-fun rel_0e76a21f_f3c6_47b7_8921_3919b7250e0b_study ( Int Int) Bool )
(declare-fun oclIncludes ( Int Int) Bool )
(declare-fun aux1 () Int )
(declare-fun aux0 () Int )
(declare-fun module_description ( Int) Int )
(declare-fun aux3 () Int )
(declare-fun aux2 () Int )
(declare-fun type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student ( Int) Bool )
(declare-fun aux8 () Int )
(declare-fun aux5 () Int )
(declare-fun aux4 () Int )
(declare-fun aux7 () Int )
(declare-fun aux6 () Int )
(declare-fun student_id ( Int) Int )
(declare-fun weight6 () Int )
(declare-fun weight5 () Int )
(declare-fun weight4 () Int )
(declare-fun weight3 () Int )
(declare-fun ObjAt ( Int Int) Int )
(declare-fun weight2 () Int )
(declare-fun weight1 () Int )
(declare-fun weight0 () Int )
(declare-fun k6b7e5912_575a_4ec1_8ec6_88dc3d9d1ac2 () Int )

;formula(s) generated
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_0e76a21f_f3c6_47b7_8921_3919b7250e0b_study ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 x )   ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 y )  )  (and (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student x )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person x ) ) ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k6b7e5912_575a_4ec1_8ec6_88dc3d9d1ac2)) (>= k6b7e5912_575a_4ec1_8ec6_88dc3d9d1ac2 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kb225747b_1b39_4876_90f5_21712fdfbc5f)) (>= kb225747b_1b39_4876_90f5_21712fdfbc5f 0))))) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_0e76a21f_f3c6_47b7_8921_3919b7250e0b_study ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 x )   ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 y )  )  (and (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student x )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person x ) ) ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k6b7e5912_575a_4ec1_8ec6_88dc3d9d1ac2)) (>= k6b7e5912_575a_4ec1_8ec6_88dc3d9d1ac2 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  kb225747b_1b39_4876_90f5_21712fdfbc5f)) (>= kb225747b_1b39_4876_90f5_21712fdfbc5f 0))))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module v )  (>= ( module_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  1))) (forall ((v Int)) (=> ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module v )  (<= ( module_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  5)))) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (and (forall ((v Int)) (=> ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module v )  (>= ( module_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  1))) (forall ((v Int)) (=> ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module v )  (<= ( module_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  5)))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((p Int)) (=> ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person p )  (and (> ( person_age ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 p )  )  0) (< ( person_age ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 p )  )  18)))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (and (=> (= aux2 0) (= weight0 2)) (=> (= aux2 1) (= weight0 0))))
(assert (and (>= aux3 0) (<= aux3 1)))
(assert (or (or (forall ((v Int)) (=> (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student v )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person v ) ) (> ( person_age ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  18))) (and (= aux3 1) true)) (and (= aux3 0) false)))
(assert (and (=> (= aux3 0) (= weight1 2)) (=> (= aux3 1) (= weight1 0))))
(assert (and (>= aux4 0) (<= aux4 1)))
(assert (or (or (and (forall ((v Int)) (=> (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student v )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person v ) ) (>= ( student_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  1))) (forall ((v Int)) (=> (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student v )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person v ) ) (<= ( student_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  )  6)))) (and (= aux4 1) true)) (and (= aux4 0) false)))
(assert (and (=> (= aux4 0) (= weight2 2)) (=> (= aux4 1) (= weight2 0))))
(assert (and (>= aux5 0) (<= aux5 1)))
(assert (or (or (forall ((s1 Int)(s2 Int)) (=> (and (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student s1 )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person s1 ) ) (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student s2 )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person s2 ) )) (=> (not (= ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s1 )  ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s2 ) ) ) (not (= ( student_id ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s1 )  )  ( student_id ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s2 )  ) ) )))) (and (= aux5 1) true)) (and (= aux5 0) false)))
(assert (and (=> (= aux5 0) (= weight3 2)) (=> (= aux5 1) (= weight3 0))))
(assert (and (>= aux6 0) (<= aux6 1)))
(assert (or (or (forall ((s1 Int)) (=> (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student s1 )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person s1 ) ) (forall ((m1 Int)) (=> (and ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module m1 )  ( rel_0e76a21f_f3c6_47b7_8921_3919b7250e0b_study ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s1 )   ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 m1 )  ) ) (= ( student_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s1 )  )  ( module_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 m1 )  ) ))))) (and (= aux6 1) true)) (and (= aux6 0) false)))
(assert (and (=> (= aux6 0) (= weight4 2)) (=> (= aux6 1) (= weight4 0))))
(assert (and (>= aux7 0) (<= aux7 1)))
(assert (or (or (and (exists ((s Int)) (and (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student s )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person s ) ) (= ( student_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s )  )  6))) (exists ((s Int)) (and (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student s )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person s ) ) (< ( student_year ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s )  )  6)))) (and (= aux7 1) true)) (and (= aux7 0) false)))
(assert (and (=> (= aux7 0) (= weight5 2)) (=> (= aux7 1) (= weight5 0))))
(assert (and (>= aux8 0) (<= aux8 1)))
(assert (or (or (forall ((s Int)) (=> (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student s )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person s ) ) (exists ((v Int)) (and ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module v )  ( rel_0e76a21f_f3c6_47b7_8921_3919b7250e0b_study ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 s )   ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 v )  ) )))) (and (= aux8 1) true)) (and (= aux8 0) false)))
(assert (and (=> (= aux8 0) (= weight6 2)) (=> (= aux8 1) (= weight6 0))))
(assert (exists ((o Int)) ( type_c453726c_e2ac_401d_8201_f73838c8ec9d_Module ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 o )  ) ))
(assert (exists ((o Int)) ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 o )  ) ))
(assert (exists ((o Int)) (and ( type_d8739ab8_1166_41ed_9c89_6de900ec32c7_Student ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 o )  )  ( type_b7a57d12_62bd_4f7e_b7eb_926ca4680245_Person ( obj_f5c545a3_d87d_43e1_bede_b639d0f43934 o )  ) )))
(assert (= (+ (+ (+ (+ (+ (+ weight0 weight1) weight2) weight3) weight4) weight5) weight6) 10))
(assert (not (and (and (and (and (and (and (= weight0 2) (= weight1 0)) (= weight2 2)) (= weight3 2)) (= weight4 0)) (= weight5 2)) (= weight6 2)) ))
(assert (not (and (and (and (and (and (and (= weight0 2) (= weight1 0)) (= weight2 2)) (= weight3 2)) (= weight4 2)) (= weight5 2)) (= weight6 0)) ))
(assert (not (and (and (and (and (and (and (= weight0 2) (= weight1 0)) (= weight2 2)) (= weight3 2)) (= weight4 2)) (= weight5 0)) (= weight6 2)) ))
(assert (not (and (and (and (and (and (and (= weight0 0) (= weight1 2)) (= weight2 2)) (= weight3 2)) (= weight4 2)) (= weight5 2)) (= weight6 0)) ))
(assert (not (and (and (and (and (and (and (= weight0 0) (= weight1 2)) (= weight2 2)) (= weight3 2)) (= weight4 2)) (= weight5 0)) (= weight6 2)) ))
(assert (not (and (and (and (and (and (and (= weight0 0) (= weight1 2)) (= weight2 2)) (= weight3 2)) (= weight4 0)) (= weight5 2)) (= weight6 2)) ))
