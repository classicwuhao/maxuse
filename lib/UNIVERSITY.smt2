
;this file is automatically generated: Tue Feb 23 12:04:01 CST 2021

;declarations generated

(declare-fun oclExcludes ( Int Int) Bool)
(declare-fun type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person ( Int) Bool)
(declare-fun module_credit ( Int) Int)
(declare-fun oclSelect ( Int Bool) Int)
(declare-fun type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module ( Int) Bool)
(declare-fun type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student ( Int) Bool)
(declare-fun person_mature ( Int) Bool)
(declare-fun Cardinality ( Int) Int)
(declare-fun k9403b8fe_805a_4569_bf01_841dd5781c97 () Int)
(declare-fun obj_c5572537_7533_45ad_8652_f841d0c09c5d ( Int) Int)
(declare-fun module_year ( Int) Int)
(declare-fun type_5a531181_d4e1_4450_ab49_e29026080cdf_Department ( Int) Bool)
(declare-fun module_code ( Int) Int)
(declare-fun student_year ( Int) Int)
(declare-fun type_08c5788f_4b51_4660_8b57_c7513abd5574_Child ( Int) Bool)
(declare-fun container_ ( Int) Int)
(declare-fun person_age ( Int) Int)
(declare-fun k107818b4_bb3e_4f55_b2c1_33234a2e2c1a () Int)
(declare-fun rel_82bab606_97f5_4d9d_ab02_69f657a5fc60_study ( Int Int) Bool)
(declare-fun type_f3f67656_7e53_44ae_b8f7_38394f130d09_University ( Int) Bool)
(declare-fun oclIncludes ( Int Int) Bool)
(declare-fun aux1 () Int)
(declare-fun aux0 () Int)
(declare-fun module_description ( Int) Int)
(declare-fun aux3 () Int)
(declare-fun aux2 () Int)
(declare-fun aux8 () Int)
(declare-fun aux5 () Int)
(declare-fun aux4 () Int)
(declare-fun aux7 () Int)
(declare-fun aux6 () Int)
(declare-fun weight7 () Int)
(declare-fun student_id ( Int) Int)
(declare-fun weight6 () Int)
(declare-fun weight5 () Int)
(declare-fun weight4 () Int)
(declare-fun weight3 () Int)
(declare-fun ObjAt ( Int Int) Int)
(declare-fun weight2 () Int)
(declare-fun weight1 () Int)
(declare-fun weight0 () Int)

;formula(s) generated
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((x Int)(y Int)) (=> (and ( rel_82bab606_97f5_4d9d_ab02_69f657a5fc60_study ( obj_c5572537_7533_45ad_8652_f841d0c09c5d x )   ( obj_c5572537_7533_45ad_8652_f841d0c09c5d y )  )  (and (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student x )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person x ) ) ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k107818b4_bb3e_4f55_b2c1_33234a2e2c1a)) (>= k107818b4_bb3e_4f55_b2c1_33234a2e2c1a 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k9403b8fe_805a_4569_bf01_841dd5781c97)) (>= k9403b8fe_805a_4569_bf01_841dd5781c97 0))))) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (forall ((x Int)(y Int)) (=> (and ( rel_82bab606_97f5_4d9d_ab02_69f657a5fc60_study ( obj_c5572537_7533_45ad_8652_f841d0c09c5d x )   ( obj_c5572537_7533_45ad_8652_f841d0c09c5d y )  )  (and (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student x )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person x ) ) ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k107818b4_bb3e_4f55_b2c1_33234a2e2c1a)) (>= k107818b4_bb3e_4f55_b2c1_33234a2e2c1a 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k9403b8fe_805a_4569_bf01_841dd5781c97)) (>= k9403b8fe_805a_4569_bf01_841dd5781c97 0))))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (and (forall ((v Int)) (=> ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module v )  (>= ( module_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d v )  )  1))) (forall ((v Int)) (=> ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module v )  (<= ( module_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d v )  )  5)))) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (and (=> (= aux1 0) (= weight0 1)) (=> (= aux1 1) (= weight0 0))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((p Int)) (=> ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person p )  (and (> ( person_age ( obj_c5572537_7533_45ad_8652_f841d0c09c5d p )  )  0) (< ( person_age ( obj_c5572537_7533_45ad_8652_f841d0c09c5d p )  )  18)))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (and (=> (= aux2 0) (= weight1 1)) (=> (= aux2 1) (= weight1 0))))
(assert (and (>= aux3 0) (<= aux3 1)))
(assert (or (or (forall ((v Int)) (=> (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student v )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person v ) ) (> ( person_age ( obj_c5572537_7533_45ad_8652_f841d0c09c5d v )  )  18))) (and (= aux3 1) true)) (and (= aux3 0) false)))
(assert (and (=> (= aux3 0) (= weight2 1)) (=> (= aux3 1) (= weight2 0))))
(assert (and (>= aux4 0) (<= aux4 1)))
(assert (or (or (and (forall ((v Int)) (=> (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student v )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person v ) ) (>= ( student_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d v )  )  1))) (forall ((v Int)) (=> (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student v )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person v ) ) (<= ( student_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d v )  )  6)))) (and (= aux4 1) true)) (and (= aux4 0) false)))
(assert (and (=> (= aux4 0) (= weight3 1)) (=> (= aux4 1) (= weight3 0))))
(assert (and (>= aux5 0) (<= aux5 1)))
(assert (or (or (forall ((s1 Int)(s2 Int)) (=> (and (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student s1 )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person s1 ) ) (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student s2 )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person s2 ) )) (=> (not (= ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s1 )  ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s2 ) ) ) (not (= ( student_id ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s1 )  )  ( student_id ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s2 )  ) ) )))) (and (= aux5 1) true)) (and (= aux5 0) false)))
(assert (and (=> (= aux5 0) (= weight4 1)) (=> (= aux5 1) (= weight4 0))))
(assert (and (>= aux6 0) (<= aux6 1)))
(assert (or (or (forall ((s1 Int)) (=> (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student s1 )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person s1 ) ) (forall ((m1 Int)) (=> (and ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module m1 )  ( rel_82bab606_97f5_4d9d_ab02_69f657a5fc60_study ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s1 )   ( obj_c5572537_7533_45ad_8652_f841d0c09c5d m1 )  ) ) (= ( student_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s1 )  )  ( module_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d m1 )  ) ))))) (and (= aux6 1) true)) (and (= aux6 0) false)))
(assert (and (=> (= aux6 0) (= weight5 1)) (=> (= aux6 1) (= weight5 0))))
(assert (and (>= aux7 0) (<= aux7 1)))
(assert (or (or (and (exists ((s Int)) (and (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student s )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person s ) ) (= ( student_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s )  )  6))) (exists ((s Int)) (and (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student s )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person s ) ) (< ( student_year ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s )  )  6)))) (and (= aux7 1) true)) (and (= aux7 0) false)))
(assert (and (=> (= aux7 0) (= weight6 1)) (=> (= aux7 1) (= weight6 0))))
(assert (and (>= aux8 0) (<= aux8 1)))
(assert (or (or (forall ((s Int)) (=> (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student s )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person s ) ) (exists ((v Int)) (and ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module v )  ( rel_82bab606_97f5_4d9d_ab02_69f657a5fc60_study ( obj_c5572537_7533_45ad_8652_f841d0c09c5d s )   ( obj_c5572537_7533_45ad_8652_f841d0c09c5d v )  ) )))) (and (= aux8 1) true)) (and (= aux8 0) false)))
(assert (and (=> (= aux8 0) (= weight7 1)) (=> (= aux8 1) (= weight7 0))))
(assert (exists ((o Int)) (and ( type_08c5788f_4b51_4660_8b57_c7513abd5574_Child ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  ) )))
(assert (exists ((o Int)) ( type_5a531181_d4e1_4450_ab49_e29026080cdf_Department ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  ) ))
(assert (exists ((o Int)) ( type_87e75739_4ea6_48d7_874c_86a8a6580bee_Module ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  ) ))
(assert (exists ((o Int)) ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  ) ))
(assert (exists ((o Int)) (and ( type_9ea9bd6d_5146_46df_8b45_eba2e991afa8_Student ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  )  ( type_af5228c5_13f4_4723_ac63_02c1e0d776c0_Person ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  ) )))
(assert (exists ((o Int)) ( type_f3f67656_7e53_44ae_b8f7_38394f130d09_University ( obj_c5572537_7533_45ad_8652_f841d0c09c5d o )  ) ))
(assert (= (+ (+ (+ (+ (+ (+ (+ weight0 weight1) weight2) weight3) weight4) weight5) weight6) weight7) 6))

(assert (not (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 0)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 0)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 0)) (= weight7 1)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 1) (= weight1 0)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 0)) (= weight7 1)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 1) (= weight1 0)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 0)) (= weight6 1)) (= weight7 1)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 1) (= weight1 1)) (= weight2 0)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 1) (= weight1 0)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 0)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 0) (= weight1 1)) (= weight2 0)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) ))

(assert (not (and (and (and (and (and (and (and (= weight0 0) (= weight1 0)) (= weight2 1)) (= weight3 1)) (= weight4 1)) (= weight5 1)) (= weight6 1)) (= weight7 1)) ))
