
;this file is automatically generated: Tue Jan 08 11:05:56 GMT 2019

;declarations generated

(declare-fun oclExcludes ( Int Int) Bool )
(declare-fun type_72849708_3dce_4382_8a59_8d345ac4cfda_Person ( Int) Bool )
(declare-fun type_34569644_b235_4597_a840_02c25509a61d_Module ( Int) Bool )
(declare-fun oclSelect ( Int Bool) Int )
(declare-fun k6124a783_8ee2_4b0d_bdd7_28d723ce3136 () Int )
(declare-fun person_mature ( Int) Bool )
(declare-fun Cardinality ( Int) Int )
(declare-fun k2d10206f_be5b_45bb_be88_b56a022b4f21 () Int )
(declare-fun module_year ( Int) Int )
(declare-fun module_code ( Int) Int )
(declare-fun student_year ( Int) Int )
(declare-fun container_ ( Int) Int )
(declare-fun person_age ( Int) Int )
(declare-fun type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student ( Int) Bool )
(declare-fun rel_d01d31f2_5004_46a8_9496_4044d8e85224_study ( Int Int) Bool )
(declare-fun oclIncludes ( Int Int) Bool )
(declare-fun person_name ( Int) Int )
(declare-fun obj_8fd49c6e_405b_4b11_805c_12b36ae53917 ( Int) Int )
(declare-fun student_id ( Int) Int )
(declare-fun ObjAt ( Int Int) Int )

;formula(s) generated

(assert (forall ((x Int)(y Int)) (=> (and ( rel_d01d31f2_5004_46a8_9496_4044d8e85224_study ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 x )   ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 y )  )  (and (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student x )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person x ) ) ( type_34569644_b235_4597_a840_02c25509a61d_Module y ) )) (or (or (or (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1)) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k2d10206f_be5b_45bb_be88_b56a022b4f21)) (>= k2d10206f_be5b_45bb_be88_b56a022b4f21 0))) (= (* ( Cardinality ( container_ x )  )  0) (* ( Cardinality ( container_ y )  )  1))) (and (= (* ( Cardinality ( container_ y )  )  1) (* ( Cardinality ( container_ x )  )  k6124a783_8ee2_4b0d_bdd7_28d723ce3136)) (>= k6124a783_8ee2_4b0d_bdd7_28d723ce3136 0))))))


(assert (and (forall ((v Int)) (=> ( type_34569644_b235_4597_a840_02c25509a61d_Module v )  (>= ( module_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 v )  )  1))) (forall ((v Int)) (=> ( type_34569644_b235_4597_a840_02c25509a61d_Module v )  (<= ( module_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 v )  )  5)))))

(assert-soft (forall ((p Int)) (=> ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person p )  (and (> ( person_age ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 p )  )  0) (< ( person_age ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 p )  )  18)))) :weight 4)

(assert-soft (forall ((v Int)) (=> (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student v )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person v ) ) (> ( person_age ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 v )  )  18))) :weight 5)

(assert-soft (and (forall ((v Int)) (=> (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student v )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person v ) ) (>= ( student_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 v )  )  1))) (forall ((v Int)) (=> (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student v )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person v ) ) (<= ( student_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 v )  )  6)))) :weight 5)

(assert-soft (forall ((s1 Int)(s2 Int)) (=> (and (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student s1 )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person s1 ) ) (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student s2 )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person s2 ) )) (=> (not (= ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s1 )  ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s2 ) ) ) (not (= ( student_id ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s1 )  )  ( student_id ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s2 )  ) ) )))) :weight 5)

(assert-soft (forall ((s1 Int)) (=> (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student s1 )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person s1 ) ) (forall ((m1 Int)) (=> (and ( type_34569644_b235_4597_a840_02c25509a61d_Module m1 )  ( rel_d01d31f2_5004_46a8_9496_4044d8e85224_study ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s1 )   ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 m1 )  ) ) (= ( student_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s1 )  )  ( module_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 m1 )  ) ))))) :weight 6)

(assert-soft (and (exists ((s Int)) (and (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student s )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person s ) ) (= ( student_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s )  )  6))) (exists ((s Int)) (and (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student s )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person s ) ) (< ( student_year ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s )  )  6)))) :weight 5)

(assert-soft (forall ((s Int)) (=> (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student s )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person s ) ) (exists ((v Int)) (and ( type_34569644_b235_4597_a840_02c25509a61d_Module v )  ( rel_d01d31f2_5004_46a8_9496_4044d8e85224_study ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 s )   ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 v )  ) )))) :weight 5)

(assert (exists ((o Int)) ( type_34569644_b235_4597_a840_02c25509a61d_Module ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 o )  ) ))
(assert (exists ((o Int)) ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 o )  ) ))
(assert (exists ((o Int)) (and ( type_9cc96d23_114b_45b4_bcf3_e86e2719039c_Student ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 o )  )  ( type_72849708_3dce_4382_8a59_8d345ac4cfda_Person ( obj_8fd49c6e_405b_4b11_805c_12b36ae53917 o )  ) )))

(check-sat)
(get-objectives)

 ;end of formula 
