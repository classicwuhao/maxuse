
;this file is automatically generated: Wed Feb 10 16:36:21 GMT 2016

;declarations generated

(declare-fun type_0f92832e_d43d_48a7_a0c1_1138cd7bef9b_Module ( Int) Bool )
(declare-fun Student () Int )
(declare-fun student_year ( Int) Int )
(declare-fun module_code ( Int) Int )
(declare-fun module_year ( Int) Int )
(declare-fun module_credit ( Int) Int )
(declare-fun Module () Int )
(declare-fun type_ae82486f_babc_4f8a_abe9_837f688bce21_Student ( Int) Bool )
(declare-fun student_id ( Int) Int )
(declare-fun rel_3b18e7e8_17c0_4eb9_9556_0303d81d7e49_study ( Int Int) Bool )
(declare-fun type_52927091_4530_4a0f_b90a_6693ed60b623_Person ( Int) Bool )
(declare-fun person_age ( Int) Int )
(declare-fun obj_625bf115_2b9a_43ee_9548_4002b735ab20 ( Int) Int )
(declare-fun aux2 () Int )
(declare-fun aux3 () Int )
(declare-fun aux0 () Int )
(declare-fun Person () Int )
(declare-fun aux1 () Int )
(declare-fun person_mature ( Int) Bool )
(declare-fun weight2 () Int )
(declare-fun weight3 () Int )
(declare-fun weight0 () Int )
(declare-fun weight1 () Int )

;formulas generated
(assert (and (>= aux0 0) (<= aux0 1)))
(assert (or (or (forall ((p Int)) (not (= ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  0) )) (and (= aux0 1) true)) (and (= aux0 0) false)))
(assert (and (=> (forall ((p Int)) (not (= ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  0) )) (= weight0 1)) (=> (not (forall ((p Int)) (not (= ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  0) )) ) (= weight0 0))))
(assert (and (>= aux1 0) (<= aux1 1)))
(assert (or (or (forall ((p Int)) (not (= ( person_mature ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  true) )) (and (= aux1 1) true)) (and (= aux1 0) false)))
(assert (and (=> (forall ((p Int)) (not (= ( person_mature ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  true) )) (= weight1 2)) (=> (not (forall ((p Int)) (not (= ( person_mature ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  true) )) ) (= weight1 0))))
(assert (and (>= aux2 0) (<= aux2 1)))
(assert (or (or (forall ((p Int)) (=> ( type_52927091_4530_4a0f_b90a_6693ed60b623_Person p )  (> ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  18))) (and (= aux2 1) true)) (and (= aux2 0) false)))
(assert (and (=> (forall ((p Int)) (=> ( type_52927091_4530_4a0f_b90a_6693ed60b623_Person p )  (> ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  18))) (= weight2 3)) (=> (not (forall ((p Int)) (=> ( type_52927091_4530_4a0f_b90a_6693ed60b623_Person p )  (> ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  18))) ) (= weight2 0))))
(assert (and (>= aux3 0) (<= aux3 1)))
(assert (or (or (forall ((p Int)) (=> (and ( type_ae82486f_babc_4f8a_abe9_837f688bce21_Student p )  ( type_52927091_4530_4a0f_b90a_6693ed60b623_Person p ) ) (< ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  (not 1 )))) (and (= aux3 1) true)) (and (= aux3 0) false)))
(assert (and (=> (forall ((p Int)) (=> (and ( type_ae82486f_babc_4f8a_abe9_837f688bce21_Student p )  ( type_52927091_4530_4a0f_b90a_6693ed60b623_Person p ) ) (< ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  (not 1 )))) (= weight3 4)) (=> (not (forall ((p Int)) (=> (and ( type_ae82486f_babc_4f8a_abe9_837f688bce21_Student p )  ( type_52927091_4530_4a0f_b90a_6693ed60b623_Person p ) ) (< ( person_age ( obj_625bf115_2b9a_43ee_9548_4002b735ab20 p )  )  (not 1 )))) ) (= weight3 0))))

 ;end of formula 