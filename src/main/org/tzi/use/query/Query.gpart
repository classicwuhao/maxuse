grammar Query;
options {
  superClass = BaseParser;
}
@header{
package org.tzi.use.query;
import org.tzi.use.query.ast.*;
import org.tzi.use.parser.base.*;
import org.tzi.use.parser.base.BaseParser;
import org.tzi.use.parser.ocl.*;
import org.tzi.use.parser.soil.ast.*;
import java.util.Collections;
import java.util.Arrays;
}

@lexer::header {
package org.tzi.use.query;
import org.tzi.use.parser.ParseErrorHandler;
}
@lexer::members {
    private ParseErrorHandler fParseErrorHandler;

    public String getFilename() {
        return fParseErrorHandler.getFileName();
    }
    
    @Override
    public String getErrorHeader(RecognitionException e) {
    	return "line " + e.line + ":" + e.charPositionInLine;
    }
    	
    public void emitErrorMessage(String msg) {
        fParseErrorHandler.reportError(msg);
    }
 
    public void init(ParseErrorHandler handler) {
        fParseErrorHandler = handler;
    }
}

checkExpr: 'verify' queryExpr
;

queryExpr: 
    'select' featureExpr (COMMA featureExpr)* (withExpr)? (withoutExpr)? (oclExpr)? ('as' IDENT)? queryExpr_nl
   {System.out.println("this is a query.");}
   | alias = IDENT queryExpr_nl
   {System.out.println("This is an query alias:"+$alias.getText());}
;

queryExpr_nl:
    '&&' queryExpr
    | '||' queryExpr
    |
;

modifiers:
    'pure'
    |
    'full'
;

 featureExpr @init
    {
        boolean isPure=false;
    } :
    ('pure' {isPure=true;}) ? dest=(IDENT | STAR) {QClassExpr cls = new QClassExpr($dest.getText(),isPure);}

  | AttrExpr
  | AssocExpr

;

AttrExpr: src=(IDENT | STAR) DOT dest=(IDENT | STAR);

AssocExpr: src=(IDENT | STAR) COLON dest=(IDENT | STAR);

InvExpr: 
    src=(IDENT | STAR) COLON_COLON dest=(IDENT | STAR)
;

oclExpr: 'withocl' expression
;

withExpr: 
    'with' InvExpr (COMMA InvExpr)*
;
withoutExpr:
    'without' InvExpr (COMMA InvExpr)*
;