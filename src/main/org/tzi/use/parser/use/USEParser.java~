// $ANTLR 3.4 USE.g 2016-02-09 16:27:01
 
/*
 * USE - UML based specification environment
 * Copyright (C) 1999-2004 Mark Richters, University of Bremen
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  
 */

package org.tzi.use.parser.use; 

// ------------------------------------
//  USE parser
// ------------------------------------
import org.tzi.use.parser.base.BaseParser;
import org.tzi.use.parser.use.statemachines.*;
import org.tzi.use.parser.ocl.*;
import org.tzi.use.parser.use.tag.*;
import org.tzi.use.parser.soil.ast.*;
import org.tzi.use.uran.weight.*;
import java.util.Collections;
import java.util.Set;
import java.util.HashSet;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

@SuppressWarnings({"all", "warnings", "unchecked"})
public class USEParser extends BaseParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARROW", "AT", "AnnotationTag", "BAR", "COLON", "COLON_COLON", "COLON_EQUAL", "COMMA", "DOT", "DOTDOT", "EQUAL", "ESC", "GREATER", "GREATER_EQUAL", "HASH", "HEX_DIGIT", "IDENT", "INT", "LBRACE", "LBRACK", "LESS", "LESS_EQUAL", "LPAREN", "MINUS", "ML_COMMENT", "NEWLINE", "NON_OCL_STRING", "NOT_EQUAL", "PLUS", "RANGE_OR_INT", "RBRACE", "RBRACK", "REAL", "RPAREN", "SEMI", "SLASH", "SL_COMMENT", "STAR", "STRING", "VOCAB", "WS", "'Bag'", "'Collection'", "'Comment'", "'OrderedSet'", "'Override'", "'Sequence'", "'Set'", "'Strong'", "'Tuple'", "'Type'", "'Undefined'", "'Weak'", "'Weight'", "'abstract'", "'allInstances'", "'and'", "'associationClass'", "'associationclass'", "'attributes'", "'begin'", "'between'", "'byUseId'", "'constraints'", "'context'", "'create'", "'declare'", "'default'", "'delete'", "'destroy'", "'div'", "'do'", "'else'", "'end'", "'endif'", "'enum'", "'existential'", "'false'", "'for'", "'from'", "'if'", "'implies'", "'in'", "'insert'", "'into'", "'inv'", "'iterate'", "'let'", "'model'", "'new'", "'not'", "'null'", "'oclAsType'", "'oclEmpty'", "'oclInState'", "'oclIsKindOf'", "'oclIsTypeOf'", "'oclUndefined'", "'operations'", "'or'", "'ordered'", "'post'", "'pre'", "'psm'", "'redefines'", "'selectByKind'", "'selectByType'", "'statemachines'", "'states'", "'subsets'", "'then'", "'transitions'", "'true'", "'while'", "'xor'"
    };

    public static final int EOF=-1;
    public static final int T__45=45;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__50=50;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__59=59;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int ARROW=4;
    public static final int AT=5;
    public static final int AnnotationTag=6;
    public static final int BAR=7;
    public static final int COLON=8;
    public static final int COLON_COLON=9;
    public static final int COLON_EQUAL=10;
    public static final int COMMA=11;
    public static final int DOT=12;
    public static final int DOTDOT=13;
    public static final int EQUAL=14;
    public static final int ESC=15;
    public static final int GREATER=16;
    public static final int GREATER_EQUAL=17;
    public static final int HASH=18;
    public static final int HEX_DIGIT=19;
    public static final int IDENT=20;
    public static final int INT=21;
    public static final int LBRACE=22;
    public static final int LBRACK=23;
    public static final int LESS=24;
    public static final int LESS_EQUAL=25;
    public static final int LPAREN=26;
    public static final int MINUS=27;
    public static final int ML_COMMENT=28;
    public static final int NEWLINE=29;
    public static final int NON_OCL_STRING=30;
    public static final int NOT_EQUAL=31;
    public static final int PLUS=32;
    public static final int RANGE_OR_INT=33;
    public static final int RBRACE=34;
    public static final int RBRACK=35;
    public static final int REAL=36;
    public static final int RPAREN=37;
    public static final int SEMI=38;
    public static final int SLASH=39;
    public static final int SL_COMMENT=40;
    public static final int STAR=41;
    public static final int STRING=42;
    public static final int VOCAB=43;
    public static final int WS=44;

    // delegates
    public BaseParser[] getDelegates() {
        return new BaseParser[] {};
    }

    // delegators


    public USEParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public USEParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

    public String[] getTokenNames() { return USEParser.tokenNames; }
    public String getGrammarFileName() { return "USE.g"; }



    // $ANTLR start "model"
    // USE.g:131:1: model returns [ASTModel n] : as= annotationSet 'model' modelName= IDENT ( generalClassifierDefinition[$n] |a= associationDefinition | ( 'constraints' (cons= invariant |ppc= prePost )* ) |e= enumTypeDefinition )* EOF ;
    public final ASTModel model() throws RecognitionException {
        ASTModel n = null;


        Token modelName=null;
        Set<ASTAnnotation> as =null;

        ASTAssociation a =null;

        ASTConstraintDefinition cons =null;

        ASTPrePost ppc =null;

        ASTEnumTypeDefinition e =null;


        try {
            // USE.g:132:2: (as= annotationSet 'model' modelName= IDENT ( generalClassifierDefinition[$n] |a= associationDefinition | ( 'constraints' (cons= invariant |ppc= prePost )* ) |e= enumTypeDefinition )* EOF )
            // USE.g:133:2: as= annotationSet 'model' modelName= IDENT ( generalClassifierDefinition[$n] |a= associationDefinition | ( 'constraints' (cons= invariant |ppc= prePost )* ) |e= enumTypeDefinition )* EOF
            {
            pushFollow(FOLLOW_annotationSet_in_model71);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            match(input,92,FOLLOW_92_in_model77); if (state.failed) return n;

            modelName=(Token)match(input,IDENT,FOLLOW_IDENT_in_model81); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTModel(modelName); n.setAnnotations(as); }

            // USE.g:135:5: ( generalClassifierDefinition[$n] |a= associationDefinition | ( 'constraints' (cons= invariant |ppc= prePost )* ) |e= enumTypeDefinition )*
            loop2:
            do {
                int alt2=5;
                alt2 = dfa2.predict(input);
                switch (alt2) {
            	case 1 :
            	    // USE.g:135:9: generalClassifierDefinition[$n]
            	    {
            	    pushFollow(FOLLOW_generalClassifierDefinition_in_model93);
            	    generalClassifierDefinition(n);

            	    state._fsp--;
            	    if (state.failed) return n;

            	    }
            	    break;
            	case 2 :
            	    // USE.g:136:9: a= associationDefinition
            	    {
            	    pushFollow(FOLLOW_associationDefinition_in_model106);
            	    a=associationDefinition();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addAssociation(a); }

            	    }
            	    break;
            	case 3 :
            	    // USE.g:137:9: ( 'constraints' (cons= invariant |ppc= prePost )* )
            	    {
            	    // USE.g:137:9: ( 'constraints' (cons= invariant |ppc= prePost )* )
            	    // USE.g:137:11: 'constraints' (cons= invariant |ppc= prePost )*
            	    {
            	    match(input,67,FOLLOW_67_in_model120); if (state.failed) return n;

            	    // USE.g:138:11: (cons= invariant |ppc= prePost )*
            	    loop1:
            	    do {
            	        int alt1=3;
            	        int LA1_0 = input.LA(1);

            	        if ( (LA1_0==AT) ) {
            	            int LA1_2 = input.LA(2);

            	            if ( (LA1_2==IDENT) ) {
            	                int LA1_4 = input.LA(3);

            	                if ( (LA1_4==LBRACE) ) {
            	                    int LA1_6 = input.LA(4);

            	                    if ( (LA1_6==AnnotationTag) ) {
            	                        switch ( input.LA(5) ) {
            	                        case 47:
            	                            {
            	                            int LA1_11 = input.LA(6);

            	                            if ( (LA1_11==EQUAL) ) {
            	                                int LA1_14 = input.LA(7);

            	                                if ( (LA1_14==NON_OCL_STRING) ) {
            	                                    int LA1_17 = input.LA(8);

            	                                    if ( (LA1_17==RBRACE) ) {
            	                                        int LA1_10 = input.LA(9);

            	                                        if ( (LA1_10==68) ) {
            	                                            alt1=1;
            	                                        }


            	                                    }


            	                                }
            	                                else if ( (LA1_14==AT) ) {
            	                                    int LA1_18 = input.LA(8);

            	                                    if ( (LA1_18==IDENT) ) {
            	                                        int LA1_24 = input.LA(9);

            	                                        if ( (LA1_24==DOT) ) {
            	                                            int LA1_27 = input.LA(10);

            	                                            if ( (LA1_27==47||LA1_27==54||LA1_27==57) ) {
            	                                                int LA1_30 = input.LA(11);

            	                                                if ( (LA1_30==RBRACE) ) {
            	                                                    int LA1_10 = input.LA(12);

            	                                                    if ( (LA1_10==68) ) {
            	                                                        alt1=1;
            	                                                    }


            	                                                }


            	                                            }


            	                                        }


            	                                    }


            	                                }


            	                            }


            	                            }
            	                            break;
            	                        case 57:
            	                            {
            	                            int LA1_12 = input.LA(6);

            	                            if ( (LA1_12==EQUAL) ) {
            	                                switch ( input.LA(7) ) {
            	                                case 71:
            	                                    {
            	                                    int LA1_19 = input.LA(8);

            	                                    if ( (LA1_19==RBRACE) ) {
            	                                        int LA1_10 = input.LA(9);

            	                                        if ( (LA1_10==68) ) {
            	                                            alt1=1;
            	                                        }


            	                                    }


            	                                    }
            	                                    break;
            	                                case INT:
            	                                    {
            	                                    int LA1_20 = input.LA(8);

            	                                    if ( (LA1_20==RBRACE) ) {
            	                                        int LA1_10 = input.LA(9);

            	                                        if ( (LA1_10==68) ) {
            	                                            alt1=1;
            	                                        }


            	                                    }


            	                                    }
            	                                    break;
            	                                case AT:
            	                                    {
            	                                    int LA1_21 = input.LA(8);

            	                                    if ( (LA1_21==IDENT) ) {
            	                                        int LA1_25 = input.LA(9);

            	                                        if ( (LA1_25==DOT) ) {
            	                                            int LA1_28 = input.LA(10);

            	                                            if ( (LA1_28==47||LA1_28==54||LA1_28==57) ) {
            	                                                int LA1_31 = input.LA(11);

            	                                                if ( (LA1_31==RBRACE) ) {
            	                                                    int LA1_10 = input.LA(12);

            	                                                    if ( (LA1_10==68) ) {
            	                                                        alt1=1;
            	                                                    }


            	                                                }


            	                                            }


            	                                        }


            	                                    }


            	                                    }
            	                                    break;

            	                                }

            	                            }


            	                            }
            	                            break;
            	                        case 54:
            	                            {
            	                            int LA1_13 = input.LA(6);

            	                            if ( (LA1_13==EQUAL) ) {
            	                                int LA1_16 = input.LA(7);

            	                                if ( (LA1_16==52||LA1_16==56) ) {
            	                                    int LA1_22 = input.LA(8);

            	                                    if ( (LA1_22==RBRACE) ) {
            	                                        int LA1_10 = input.LA(9);

            	                                        if ( (LA1_10==68) ) {
            	                                            alt1=1;
            	                                        }


            	                                    }


            	                                }
            	                                else if ( (LA1_16==AT) ) {
            	                                    int LA1_23 = input.LA(8);

            	                                    if ( (LA1_23==IDENT) ) {
            	                                        int LA1_26 = input.LA(9);

            	                                        if ( (LA1_26==DOT) ) {
            	                                            int LA1_29 = input.LA(10);

            	                                            if ( (LA1_29==47||LA1_29==54||LA1_29==57) ) {
            	                                                int LA1_32 = input.LA(11);

            	                                                if ( (LA1_32==RBRACE) ) {
            	                                                    int LA1_10 = input.LA(12);

            	                                                    if ( (LA1_10==68) ) {
            	                                                        alt1=1;
            	                                                    }


            	                                                }


            	                                            }


            	                                        }


            	                                    }


            	                                }


            	                            }


            	                            }
            	                            break;

            	                        }

            	                    }
            	                    else if ( (LA1_6==RBRACE) ) {
            	                        int LA1_10 = input.LA(5);

            	                        if ( (LA1_10==68) ) {
            	                            alt1=1;
            	                        }


            	                    }


            	                }


            	            }


            	        }
            	        else if ( (LA1_0==68) ) {
            	            int LA1_3 = input.LA(2);

            	            if ( (LA1_3==IDENT) ) {
            	                int LA1_5 = input.LA(3);

            	                if ( (LA1_5==COLON_COLON) ) {
            	                    alt1=2;
            	                }
            	                else if ( (LA1_5==EOF||LA1_5==AT||LA1_5==COLON||LA1_5==COMMA||LA1_5==IDENT||LA1_5==58||(LA1_5 >= 61 && LA1_5 <= 62)||(LA1_5 >= 67 && LA1_5 <= 68)||(LA1_5 >= 79 && LA1_5 <= 80)||LA1_5==89) ) {
            	                    alt1=1;
            	                }


            	            }


            	        }


            	        switch (alt1) {
            	    	case 1 :
            	    	    // USE.g:138:15: cons= invariant
            	    	    {
            	    	    pushFollow(FOLLOW_invariant_in_model138);
            	    	    cons=invariant();

            	    	    state._fsp--;
            	    	    if (state.failed) return n;

            	    	    if ( state.backtracking==0 ) { n.addConstraint(cons); }

            	    	    }
            	    	    break;
            	    	case 2 :
            	    	    // USE.g:139:15: ppc= prePost
            	    	    {
            	    	    pushFollow(FOLLOW_prePost_in_model159);
            	    	    ppc=prePost();

            	    	    state._fsp--;
            	    	    if (state.failed) return n;

            	    	    if ( state.backtracking==0 ) { n.addPrePost(ppc); }

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop1;
            	        }
            	    } while (true);


            	    }


            	    }
            	    break;
            	case 4 :
            	    // USE.g:142:9: e= enumTypeDefinition
            	    {
            	    pushFollow(FOLLOW_enumTypeDefinition_in_model199);
            	    e=enumTypeDefinition();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addEnumTypeDef(e); }

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            match(input,EOF,FOLLOW_EOF_in_model214); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "model"



    // $ANTLR start "enumTypeDefinition"
    // USE.g:151:1: enumTypeDefinition returns [ASTEnumTypeDefinition n] : as= annotationSet 'enum' name= IDENT LBRACE idListRes= idList RBRACE ( SEMI )? ;
    public final ASTEnumTypeDefinition enumTypeDefinition() throws RecognitionException {
        ASTEnumTypeDefinition n = null;


        Token name=null;
        Set<ASTAnnotation> as =null;

        List idListRes =null;


        try {
            // USE.g:152:2: (as= annotationSet 'enum' name= IDENT LBRACE idListRes= idList RBRACE ( SEMI )? )
            // USE.g:153:2: as= annotationSet 'enum' name= IDENT LBRACE idListRes= idList RBRACE ( SEMI )?
            {
            pushFollow(FOLLOW_annotationSet_in_enumTypeDefinition242);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            match(input,79,FOLLOW_79_in_enumTypeDefinition248); if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_enumTypeDefinition252); if (state.failed) return n;

            match(input,LBRACE,FOLLOW_LBRACE_in_enumTypeDefinition254); if (state.failed) return n;

            pushFollow(FOLLOW_idList_in_enumTypeDefinition258);
            idListRes=idList();

            state._fsp--;
            if (state.failed) return n;

            match(input,RBRACE,FOLLOW_RBRACE_in_enumTypeDefinition260); if (state.failed) return n;

            // USE.g:154:54: ( SEMI )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SEMI) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // USE.g:154:56: SEMI
                    {
                    match(input,SEMI,FOLLOW_SEMI_in_enumTypeDefinition264); if (state.failed) return n;

                    }
                    break;

            }


            if ( state.backtracking==0 ) { n = new ASTEnumTypeDefinition(name, idListRes); n.setAnnotations(as); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "enumTypeDefinition"



    // $ANTLR start "generalClassifierDefinition"
    // USE.g:163:1: generalClassifierDefinition[ASTModel n] : as= annotationSet ( 'abstract' )? (c= classDefinition[isAbstract] |ac= associationClassDefinition[isAbstract] |s= signalDefinition[isAbstract] ) ;
    public final void generalClassifierDefinition(ASTModel n) throws RecognitionException {
        Set<ASTAnnotation> as =null;

        ASTClass c =null;

        ASTAssociationClass ac =null;

        ASTSignal s =null;


         
          boolean isAbstract = false;

        try {
            // USE.g:167:2: (as= annotationSet ( 'abstract' )? (c= classDefinition[isAbstract] |ac= associationClassDefinition[isAbstract] |s= signalDefinition[isAbstract] ) )
            // USE.g:168:2: as= annotationSet ( 'abstract' )? (c= classDefinition[isAbstract] |ac= associationClassDefinition[isAbstract] |s= signalDefinition[isAbstract] )
            {
            pushFollow(FOLLOW_annotationSet_in_generalClassifierDefinition302);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return ;

            // USE.g:169:5: ( 'abstract' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==58) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // USE.g:169:7: 'abstract'
                    {
                    match(input,58,FOLLOW_58_in_generalClassifierDefinition310); if (state.failed) return ;

                    if ( state.backtracking==0 ) { isAbstract = true; }

                    }
                    break;

            }


            // USE.g:170:5: (c= classDefinition[isAbstract] |ac= associationClassDefinition[isAbstract] |s= signalDefinition[isAbstract] )
            int alt5=3;
            switch ( input.LA(1) ) {
            case AT:
                {
                alt5=1;
                }
                break;
            case IDENT:
                {
                int LA5_2 = input.LA(2);

                if ( ((input.LT(1).getText().equals("class"))) ) {
                    alt5=1;
                }
                else if ( ((input.LT(1).getText().equals("signal"))) ) {
                    alt5=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 5, 2, input);

                    throw nvae;

                }
                }
                break;
            case 61:
            case 62:
                {
                alt5=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 5, 0, input);

                throw nvae;

            }

            switch (alt5) {
                case 1 :
                    // USE.g:171:9: c= classDefinition[isAbstract]
                    {
                    pushFollow(FOLLOW_classDefinition_in_generalClassifierDefinition338);
                    c=classDefinition(isAbstract);

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) { n.addClass(c); c.setAnnotations(as); }

                    }
                    break;
                case 2 :
                    // USE.g:174:9: ac= associationClassDefinition[isAbstract]
                    {
                    pushFollow(FOLLOW_associationClassDefinition_in_generalClassifierDefinition376);
                    ac=associationClassDefinition(isAbstract);

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) { n.addAssociationClass(ac); ac.setAnnotations(as); }

                    }
                    break;
                case 3 :
                    // USE.g:177:9: s= signalDefinition[isAbstract]
                    {
                    pushFollow(FOLLOW_signalDefinition_in_generalClassifierDefinition421);
                    s=signalDefinition(isAbstract);

                    state._fsp--;
                    if (state.failed) return ;

                    if ( state.backtracking==0 ) { n.addSignal(s); s.setAnnotations(as); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "generalClassifierDefinition"



    // $ANTLR start "classDefinition"
    // USE.g:198:1: classDefinition[boolean isAbstract] returns [ASTClass n] : ( block_annotation )? keyClass name= IDENT ( LESS idListRes= idList )? ( 'attributes' (a= attributeDefinition )* )? ( 'operations' (op= operationDefinition )* )? ( 'constraints' (inv= invariantClause )* )? ( 'statemachines' (sm= stateMachine )* )? 'end' ;
    public final ASTClass classDefinition(boolean isAbstract) throws RecognitionException {
        ASTClass n = null;


        Token name=null;
        List idListRes =null;

        ASTAttribute a =null;

        ASTOperation op =null;

        ASTInvariantClause inv =null;

        ASTStateMachine sm =null;


         List idList; 
        try {
            // USE.g:200:2: ( ( block_annotation )? keyClass name= IDENT ( LESS idListRes= idList )? ( 'attributes' (a= attributeDefinition )* )? ( 'operations' (op= operationDefinition )* )? ( 'constraints' (inv= invariantClause )* )? ( 'statemachines' (sm= stateMachine )* )? 'end' )
            // USE.g:201:2: ( block_annotation )? keyClass name= IDENT ( LESS idListRes= idList )? ( 'attributes' (a= attributeDefinition )* )? ( 'operations' (op= operationDefinition )* )? ( 'constraints' (inv= invariantClause )* )? ( 'statemachines' (sm= stateMachine )* )? 'end'
            {
            // USE.g:201:2: ( block_annotation )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==AT) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // USE.g:201:3: block_annotation
                    {
                    pushFollow(FOLLOW_block_annotation_in_classDefinition473);
                    block_annotation();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;

            }


            pushFollow(FOLLOW_keyClass_in_classDefinition482);
            keyClass();

            state._fsp--;
            if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_classDefinition486); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTClass(name, isAbstract); }

            // USE.g:203:5: ( LESS idListRes= idList )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==LESS) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // USE.g:203:7: LESS idListRes= idList
                    {
                    match(input,LESS,FOLLOW_LESS_in_classDefinition496); if (state.failed) return n;

                    pushFollow(FOLLOW_idList_in_classDefinition500);
                    idListRes=idList();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.addSuperClasses(idListRes); }

                    }
                    break;

            }


            // USE.g:204:5: ( 'attributes' (a= attributeDefinition )* )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==63) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // USE.g:204:7: 'attributes' (a= attributeDefinition )*
                    {
                    match(input,63,FOLLOW_63_in_classDefinition513); if (state.failed) return n;

                    // USE.g:205:7: (a= attributeDefinition )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==AT||LA8_0==IDENT||LA8_0==58||(LA8_0 >= 61 && LA8_0 <= 62)||LA8_0==79||LA8_0==89||LA8_0==92||(LA8_0 >= 105 && LA8_0 <= 106)) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // USE.g:205:9: a= attributeDefinition
                    	    {
                    	    pushFollow(FOLLOW_attributeDefinition_in_classDefinition526);
                    	    a=attributeDefinition();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addAttribute(a); }

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:207:5: ( 'operations' (op= operationDefinition )* )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==102) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // USE.g:207:7: 'operations' (op= operationDefinition )*
                    {
                    match(input,102,FOLLOW_102_in_classDefinition547); if (state.failed) return n;

                    // USE.g:208:7: (op= operationDefinition )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==AT||LA10_0==IDENT||LA10_0==58||(LA10_0 >= 61 && LA10_0 <= 62)||LA10_0==79||LA10_0==89||LA10_0==92||(LA10_0 >= 105 && LA10_0 <= 106)) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // USE.g:208:9: op= operationDefinition
                    	    {
                    	    pushFollow(FOLLOW_operationDefinition_in_classDefinition560);
                    	    op=operationDefinition();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addOperation(op); }

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:210:5: ( 'constraints' (inv= invariantClause )* )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==67) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // USE.g:210:7: 'constraints' (inv= invariantClause )*
                    {
                    match(input,67,FOLLOW_67_in_classDefinition581); if (state.failed) return n;

                    // USE.g:211:7: (inv= invariantClause )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==AT||LA12_0==IDENT||LA12_0==58||(LA12_0 >= 61 && LA12_0 <= 62)||(LA12_0 >= 79 && LA12_0 <= 80)||LA12_0==89||LA12_0==92||(LA12_0 >= 105 && LA12_0 <= 106)) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // USE.g:212:9: inv= invariantClause
                    	    {
                    	    pushFollow(FOLLOW_invariantClause_in_classDefinition601);
                    	    inv=invariantClause();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addInvariantClause(inv); }

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:215:5: ( 'statemachines' (sm= stateMachine )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==111) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // USE.g:215:7: 'statemachines' (sm= stateMachine )*
                    {
                    match(input,111,FOLLOW_111_in_classDefinition627); if (state.failed) return n;

                    // USE.g:216:7: (sm= stateMachine )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==107) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    // USE.g:217:9: sm= stateMachine
                    	    {
                    	    pushFollow(FOLLOW_stateMachine_in_classDefinition647);
                    	    sm=stateMachine();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addStateMachine(sm); }

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }


            match(input,77,FOLLOW_77_in_classDefinition671); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "classDefinition"



    // $ANTLR start "associationClassDefinition"
    // USE.g:238:1: associationClassDefinition[boolean isAbstract] returns [ASTAssociationClass n] : classKW= ( 'associationClass' | 'associationclass' ) name= IDENT ( LESS idListRes= idList )? ( 'between' ae= associationEnd (ae= associationEnd )+ )? ( 'attributes' (a= attributeDefinition )* )? ( 'operations' (op= operationDefinition )* )? ( 'constraints' (inv= invariantClause )* )? ( 'statemachines' (sm= stateMachine )* )? ( ( keyAggregation | keyComposition ) )? 'end' ;
    public final ASTAssociationClass associationClassDefinition(boolean isAbstract) throws RecognitionException {
        ASTAssociationClass n = null;


        Token classKW=null;
        Token name=null;
        List idListRes =null;

        ASTAssociationEnd ae =null;

        ASTAttribute a =null;

        ASTOperation op =null;

        ASTInvariantClause inv =null;

        ASTStateMachine sm =null;


        List idList; Token t = null;
        try {
            // USE.g:240:5: (classKW= ( 'associationClass' | 'associationclass' ) name= IDENT ( LESS idListRes= idList )? ( 'between' ae= associationEnd (ae= associationEnd )+ )? ( 'attributes' (a= attributeDefinition )* )? ( 'operations' (op= operationDefinition )* )? ( 'constraints' (inv= invariantClause )* )? ( 'statemachines' (sm= stateMachine )* )? ( ( keyAggregation | keyComposition ) )? 'end' )
            // USE.g:241:5: classKW= ( 'associationClass' | 'associationclass' ) name= IDENT ( LESS idListRes= idList )? ( 'between' ae= associationEnd (ae= associationEnd )+ )? ( 'attributes' (a= attributeDefinition )* )? ( 'operations' (op= operationDefinition )* )? ( 'constraints' (inv= invariantClause )* )? ( 'statemachines' (sm= stateMachine )* )? ( ( keyAggregation | keyComposition ) )? 'end'
            {
            classKW=(Token)input.LT(1);

            if ( (input.LA(1) >= 61 && input.LA(1) <= 62) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { 
                	if ((classKW!=null?classKW.getText():null).equals("associationClass")) {
                           reportWarning("the 'associationClass' keyword is deprecated and will " +
                                         "not be supported in the future, use 'associationclass' instead");
                        }  
                }

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_associationClassDefinition730); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTAssociationClass(name, isAbstract); }

            // USE.g:250:5: ( LESS idListRes= idList )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==LESS) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // USE.g:250:7: LESS idListRes= idList
                    {
                    match(input,LESS,FOLLOW_LESS_in_associationClassDefinition740); if (state.failed) return n;

                    pushFollow(FOLLOW_idList_in_associationClassDefinition744);
                    idListRes=idList();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.addSuperClasses(idListRes); }

                    }
                    break;

            }


            // USE.g:251:5: ( 'between' ae= associationEnd (ae= associationEnd )+ )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==65) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // USE.g:251:6: 'between' ae= associationEnd (ae= associationEnd )+
                    {
                    match(input,65,FOLLOW_65_in_associationClassDefinition756); if (state.failed) return n;

                    pushFollow(FOLLOW_associationEnd_in_associationClassDefinition764);
                    ae=associationEnd();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.addEnd(ae); }

                    // USE.g:253:5: (ae= associationEnd )+
                    int cnt17=0;
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==IDENT) ) {
                            int LA17_2 = input.LA(2);

                            if ( (LA17_2==LBRACK) ) {
                                alt17=1;
                            }


                        }
                        else if ( (LA17_0==AT) ) {
                            alt17=1;
                        }


                        switch (alt17) {
                    	case 1 :
                    	    // USE.g:253:7: ae= associationEnd
                    	    {
                    	    pushFollow(FOLLOW_associationEnd_in_associationClassDefinition776);
                    	    ae=associationEnd();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addEnd(ae); }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt17 >= 1 ) break loop17;
                    	    if (state.backtracking>0) {state.failed=true; return n;}
                                EarlyExitException eee =
                                    new EarlyExitException(17, input);
                                throw eee;
                        }
                        cnt17++;
                    } while (true);


                    }
                    break;

            }


            // USE.g:255:5: ( 'attributes' (a= attributeDefinition )* )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==63) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // USE.g:255:7: 'attributes' (a= attributeDefinition )*
                    {
                    match(input,63,FOLLOW_63_in_associationClassDefinition796); if (state.failed) return n;

                    // USE.g:256:7: (a= attributeDefinition )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==IDENT) ) {
                            int LA19_2 = input.LA(2);

                            if ( (LA19_2==COLON) ) {
                                alt19=1;
                            }


                        }
                        else if ( (LA19_0==AT) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // USE.g:256:9: a= attributeDefinition
                    	    {
                    	    pushFollow(FOLLOW_attributeDefinition_in_associationClassDefinition809);
                    	    a=attributeDefinition();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addAttribute(a); }

                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:258:5: ( 'operations' (op= operationDefinition )* )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==102) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // USE.g:258:7: 'operations' (op= operationDefinition )*
                    {
                    match(input,102,FOLLOW_102_in_associationClassDefinition830); if (state.failed) return n;

                    // USE.g:259:7: (op= operationDefinition )*
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==IDENT) ) {
                            int LA21_2 = input.LA(2);

                            if ( (LA21_2==LPAREN) ) {
                                alt21=1;
                            }


                        }
                        else if ( (LA21_0==AT) ) {
                            alt21=1;
                        }


                        switch (alt21) {
                    	case 1 :
                    	    // USE.g:259:9: op= operationDefinition
                    	    {
                    	    pushFollow(FOLLOW_operationDefinition_in_associationClassDefinition843);
                    	    op=operationDefinition();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addOperation(op); }

                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:261:5: ( 'constraints' (inv= invariantClause )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==67) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // USE.g:261:7: 'constraints' (inv= invariantClause )*
                    {
                    match(input,67,FOLLOW_67_in_associationClassDefinition864); if (state.failed) return n;

                    // USE.g:262:7: (inv= invariantClause )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==AT||LA23_0==80||LA23_0==89) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // USE.g:263:9: inv= invariantClause
                    	    {
                    	    pushFollow(FOLLOW_invariantClause_in_associationClassDefinition884);
                    	    inv=invariantClause();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addInvariantClause(inv); }

                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:266:5: ( 'statemachines' (sm= stateMachine )* )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==111) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // USE.g:266:7: 'statemachines' (sm= stateMachine )*
                    {
                    match(input,111,FOLLOW_111_in_associationClassDefinition910); if (state.failed) return n;

                    // USE.g:267:7: (sm= stateMachine )*
                    loop25:
                    do {
                        int alt25=2;
                        int LA25_0 = input.LA(1);

                        if ( (LA25_0==107) ) {
                            alt25=1;
                        }


                        switch (alt25) {
                    	case 1 :
                    	    // USE.g:268:9: sm= stateMachine
                    	    {
                    	    pushFollow(FOLLOW_stateMachine_in_associationClassDefinition930);
                    	    sm=stateMachine();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addStateMachine(sm); }

                    	    }
                    	    break;

                    	default :
                    	    break loop25;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:272:5: ( ( keyAggregation | keyComposition ) )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==IDENT) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // USE.g:272:7: ( keyAggregation | keyComposition )
                    {
                    if ( state.backtracking==0 ) { t = input.LT(1); }

                    // USE.g:273:7: ( keyAggregation | keyComposition )
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==IDENT) ) {
                        int LA27_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equals("aggregation"))) ) {
                            alt27=1;
                        }
                        else if ( ((input.LT(1).getText().equals("composition"))) ) {
                            alt27=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return n;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 27, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 27, 0, input);

                        throw nvae;

                    }
                    switch (alt27) {
                        case 1 :
                            // USE.g:273:9: keyAggregation
                            {
                            pushFollow(FOLLOW_keyAggregation_in_associationClassDefinition971);
                            keyAggregation();

                            state._fsp--;
                            if (state.failed) return n;

                            }
                            break;
                        case 2 :
                            // USE.g:273:26: keyComposition
                            {
                            pushFollow(FOLLOW_keyComposition_in_associationClassDefinition975);
                            keyComposition();

                            state._fsp--;
                            if (state.failed) return n;

                            }
                            break;

                    }


                    if ( state.backtracking==0 ) { n.setKind(t); }

                    }
                    break;

            }


            match(input,77,FOLLOW_77_in_associationClassDefinition998); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "associationClassDefinition"



    // $ANTLR start "attributeDefinition"
    // USE.g:283:1: attributeDefinition returns [ASTAttribute n] : as= annotationSet name= IDENT COLON t= type ( ( ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression ) | ( keyInit ( COLON | EQUAL ) initExpression= expression ) )? ( SEMI )? ;
    public final ASTAttribute attributeDefinition() throws RecognitionException {
        ASTAttribute n = null;


        Token name=null;
        Set<ASTAnnotation> as =null;

        ASTType t =null;

        USEParser.expression_return deriveExpression =null;

        USEParser.expression_return initExpression =null;


        try {
            // USE.g:284:2: (as= annotationSet name= IDENT COLON t= type ( ( ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression ) | ( keyInit ( COLON | EQUAL ) initExpression= expression ) )? ( SEMI )? )
            // USE.g:285:2: as= annotationSet name= IDENT COLON t= type ( ( ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression ) | ( keyInit ( COLON | EQUAL ) initExpression= expression ) )? ( SEMI )?
            {
            pushFollow(FOLLOW_annotationSet_in_attributeDefinition1026);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_attributeDefinition1034); if (state.failed) return n;

            match(input,COLON,FOLLOW_COLON_in_attributeDefinition1036); if (state.failed) return n;

            pushFollow(FOLLOW_type_in_attributeDefinition1040);
            t=type();

            state._fsp--;
            if (state.failed) return n;

            // USE.g:288:5: ( ( ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression ) | ( keyInit ( COLON | EQUAL ) initExpression= expression ) )?
            int alt30=3;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==IDENT) ) {
                int LA30_1 = input.LA(2);

                if ( (((input.LT(1).getText().equals("derive"))||(input.LT(1).getText().equals("derived")))) ) {
                    alt30=1;
                }
                else if ( ((input.LT(1).getText().equals("init"))) ) {
                    alt30=2;
                }
            }
            switch (alt30) {
                case 1 :
                    // USE.g:289:9: ( ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression )
                    {
                    // USE.g:289:9: ( ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression )
                    // USE.g:289:10: ( keyDerive | keyDerived ) ( COLON | EQUAL ) deriveExpression= expression
                    {
                    // USE.g:289:10: ( keyDerive | keyDerived )
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==IDENT) ) {
                        int LA29_1 = input.LA(2);

                        if ( ((input.LT(1).getText().equals("derive"))) ) {
                            alt29=1;
                        }
                        else if ( ((input.LT(1).getText().equals("derived"))) ) {
                            alt29=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return n;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 29, 1, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 29, 0, input);

                        throw nvae;

                    }
                    switch (alt29) {
                        case 1 :
                            // USE.g:289:11: keyDerive
                            {
                            pushFollow(FOLLOW_keyDerive_in_attributeDefinition1064);
                            keyDerive();

                            state._fsp--;
                            if (state.failed) return n;

                            }
                            break;
                        case 2 :
                            // USE.g:289:21: keyDerived
                            {
                            pushFollow(FOLLOW_keyDerived_in_attributeDefinition1066);
                            keyDerived();

                            state._fsp--;
                            if (state.failed) return n;

                            }
                            break;

                    }


                    if ( input.LA(1)==COLON||input.LA(1)==EQUAL ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_expression_in_attributeDefinition1079);
                    deriveExpression=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    }


                    }
                    break;
                case 2 :
                    // USE.g:291:9: ( keyInit ( COLON | EQUAL ) initExpression= expression )
                    {
                    // USE.g:291:9: ( keyInit ( COLON | EQUAL ) initExpression= expression )
                    // USE.g:291:10: keyInit ( COLON | EQUAL ) initExpression= expression
                    {
                    pushFollow(FOLLOW_keyInit_in_attributeDefinition1099);
                    keyInit();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( input.LA(1)==COLON||input.LA(1)==EQUAL ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_expression_in_attributeDefinition1115);
                    initExpression=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    }


                    }
                    break;

            }


            // USE.g:293:5: ( SEMI )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==SEMI) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // USE.g:293:5: SEMI
                    {
                    match(input,SEMI,FOLLOW_SEMI_in_attributeDefinition1129); if (state.failed) return n;

                    }
                    break;

            }


            if ( state.backtracking==0 ) { 
                   n = new ASTAttribute(name, t); 
                   n.setAnnotations(as);
                   n.setDeriveExpression((deriveExpression!=null?deriveExpression.n:null));
                   n.setInitExpression((initExpression!=null?initExpression.n:null));
                }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "attributeDefinition"



    // $ANTLR start "operationDefinition"
    // USE.g:307:1: operationDefinition returns [ASTOperation n] : as= annotationSet name= IDENT pl= paramList ( COLON t= type )? ( ( EQUAL e= expression ) | (s= blockStat ) )? (ppc= prePostClause )* ( SEMI )? ;
    public final ASTOperation operationDefinition() throws RecognitionException {
        ASTOperation n = null;


        Token name=null;
        Set<ASTAnnotation> as =null;

        List<ASTVariableDeclaration> pl =null;

        ASTType t =null;

        USEParser.expression_return e =null;

        USEParser.blockStat_return s =null;

        ASTPrePostClause ppc =null;


        try {
            // USE.g:308:2: (as= annotationSet name= IDENT pl= paramList ( COLON t= type )? ( ( EQUAL e= expression ) | (s= blockStat ) )? (ppc= prePostClause )* ( SEMI )? )
            // USE.g:309:2: as= annotationSet name= IDENT pl= paramList ( COLON t= type )? ( ( EQUAL e= expression ) | (s= blockStat ) )? (ppc= prePostClause )* ( SEMI )?
            {
            pushFollow(FOLLOW_annotationSet_in_operationDefinition1160);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_operationDefinition1170); if (state.failed) return n;

            pushFollow(FOLLOW_paramList_in_operationDefinition1180);
            pl=paramList();

            state._fsp--;
            if (state.failed) return n;

            // USE.g:315:5: ( COLON t= type )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==COLON) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // USE.g:315:7: COLON t= type
                    {
                    match(input,COLON,FOLLOW_COLON_in_operationDefinition1194); if (state.failed) return n;

                    pushFollow(FOLLOW_type_in_operationDefinition1200);
                    t=type();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;

            }


            if ( state.backtracking==0 ) { n = new ASTOperation(name, pl, t); n.setAnnotations(as); }

            // USE.g:317:5: ( ( EQUAL e= expression ) | (s= blockStat ) )?
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==EQUAL) ) {
                alt33=1;
            }
            else if ( (LA33_0==64) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    // USE.g:318:9: ( EQUAL e= expression )
                    {
                    // USE.g:318:9: ( EQUAL e= expression )
                    // USE.g:318:11: EQUAL e= expression
                    {
                    match(input,EQUAL,FOLLOW_EQUAL_in_operationDefinition1228); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_operationDefinition1234);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.setExpression((e!=null?e.n:null)); }

                    }


                    }
                    break;
                case 2 :
                    // USE.g:319:9: (s= blockStat )
                    {
                    // USE.g:319:9: (s= blockStat )
                    // USE.g:319:11: s= blockStat
                    {
                    pushFollow(FOLLOW_blockStat_in_operationDefinition1256);
                    s=blockStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.setStatement((s!=null?s.n:null));  }

                    }


                    }
                    break;

            }


            // USE.g:321:5: (ppc= prePostClause )*
            loop34:
            do {
                int alt34=2;
                alt34 = dfa34.predict(input);
                switch (alt34) {
            	case 1 :
            	    // USE.g:321:7: ppc= prePostClause
            	    {
            	    pushFollow(FOLLOW_prePostClause_in_operationDefinition1278);
            	    ppc=prePostClause();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addPrePostClause(ppc); }

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            // USE.g:322:5: ( SEMI )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==SEMI) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // USE.g:322:7: SEMI
                    {
                    match(input,SEMI,FOLLOW_SEMI_in_operationDefinition1291); if (state.failed) return n;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "operationDefinition"



    // $ANTLR start "associationDefinition"
    // USE.g:332:1: associationDefinition returns [ASTAssociation n] : as= annotationSet ( keyAssociation | keyAggregation | keyComposition ) name= IDENT 'between' ae= associationEnd (ae= associationEnd )+ 'end' ;
    public final ASTAssociation associationDefinition() throws RecognitionException {
        ASTAssociation n = null;


        Token name=null;
        Set<ASTAnnotation> as =null;

        ASTAssociationEnd ae =null;


         Token t = null; 
        try {
            // USE.g:334:2: (as= annotationSet ( keyAssociation | keyAggregation | keyComposition ) name= IDENT 'between' ae= associationEnd (ae= associationEnd )+ 'end' )
            // USE.g:335:2: as= annotationSet ( keyAssociation | keyAggregation | keyComposition ) name= IDENT 'between' ae= associationEnd (ae= associationEnd )+ 'end'
            {
            pushFollow(FOLLOW_annotationSet_in_associationDefinition1322);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { t = input.LT(1); }

            // USE.g:337:5: ( keyAssociation | keyAggregation | keyComposition )
            int alt36=3;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==IDENT) ) {
                int LA36_1 = input.LA(2);

                if ( ((input.LT(1).getText().equals("association"))) ) {
                    alt36=1;
                }
                else if ( ((input.LT(1).getText().equals("aggregation"))) ) {
                    alt36=2;
                }
                else if ( ((input.LT(1).getText().equals("composition"))) ) {
                    alt36=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 36, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // USE.g:337:7: keyAssociation
                    {
                    pushFollow(FOLLOW_keyAssociation_in_associationDefinition1336);
                    keyAssociation();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;
                case 2 :
                    // USE.g:337:24: keyAggregation
                    {
                    pushFollow(FOLLOW_keyAggregation_in_associationDefinition1340);
                    keyAggregation();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;
                case 3 :
                    // USE.g:337:41: keyComposition
                    {
                    pushFollow(FOLLOW_keyComposition_in_associationDefinition1344);
                    keyComposition();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;

            }


            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_associationDefinition1354); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTAssociation(t, name); n.setAnnotations(as); }

            match(input,65,FOLLOW_65_in_associationDefinition1362); if (state.failed) return n;

            pushFollow(FOLLOW_associationEnd_in_associationDefinition1370);
            ae=associationEnd();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.addEnd(ae); }

            // USE.g:341:5: (ae= associationEnd )+
            int cnt37=0;
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==AT||LA37_0==IDENT||LA37_0==58||(LA37_0 >= 61 && LA37_0 <= 62)||LA37_0==79||LA37_0==89||LA37_0==92||(LA37_0 >= 105 && LA37_0 <= 106)) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // USE.g:341:7: ae= associationEnd
            	    {
            	    pushFollow(FOLLOW_associationEnd_in_associationDefinition1382);
            	    ae=associationEnd();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addEnd(ae); }

            	    }
            	    break;

            	default :
            	    if ( cnt37 >= 1 ) break loop37;
            	    if (state.backtracking>0) {state.failed=true; return n;}
                        EarlyExitException eee =
                            new EarlyExitException(37, input);
                        throw eee;
                }
                cnt37++;
            } while (true);


            match(input,77,FOLLOW_77_in_associationDefinition1393); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "associationDefinition"



    // $ANTLR start "associationEnd"
    // USE.g:350:1: associationEnd returns [ASTAssociationEnd n] : as= annotationSet name= IDENT LBRACK m= multiplicity RBRACK ( keyRole rn= IDENT )? ( 'ordered' | 'subsets' sr= IDENT | keyUnion | 'redefines' rd= IDENT | ( keyDerived | keyDerive ) ( LPAREN parameter= elemVarsDeclaration RPAREN )? EQUAL exp= expression | keyQualifier qualifiers= paramList )* ( SEMI )? ;
    public final ASTAssociationEnd associationEnd() throws RecognitionException {
        ASTAssociationEnd n = null;


        Token name=null;
        Token rn=null;
        Token sr=null;
        Token rd=null;
        Set<ASTAnnotation> as =null;

        ASTMultiplicity m =null;

        ASTElemVarsDeclaration parameter =null;

        USEParser.expression_return exp =null;

        List<ASTVariableDeclaration> qualifiers =null;


        try {
            // USE.g:351:2: (as= annotationSet name= IDENT LBRACK m= multiplicity RBRACK ( keyRole rn= IDENT )? ( 'ordered' | 'subsets' sr= IDENT | keyUnion | 'redefines' rd= IDENT | ( keyDerived | keyDerive ) ( LPAREN parameter= elemVarsDeclaration RPAREN )? EQUAL exp= expression | keyQualifier qualifiers= paramList )* ( SEMI )? )
            // USE.g:352:2: as= annotationSet name= IDENT LBRACK m= multiplicity RBRACK ( keyRole rn= IDENT )? ( 'ordered' | 'subsets' sr= IDENT | keyUnion | 'redefines' rd= IDENT | ( keyDerived | keyDerive ) ( LPAREN parameter= elemVarsDeclaration RPAREN )? EQUAL exp= expression | keyQualifier qualifiers= paramList )* ( SEMI )?
            {
            pushFollow(FOLLOW_annotationSet_in_associationEnd1418);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_associationEnd1426); if (state.failed) return n;

            match(input,LBRACK,FOLLOW_LBRACK_in_associationEnd1428); if (state.failed) return n;

            pushFollow(FOLLOW_multiplicity_in_associationEnd1432);
            m=multiplicity();

            state._fsp--;
            if (state.failed) return n;

            match(input,RBRACK,FOLLOW_RBRACK_in_associationEnd1434); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTAssociationEnd(name, m); n.setAnnotations(as); }

            // USE.g:354:5: ( keyRole rn= IDENT )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==IDENT) ) {
                int LA38_1 = input.LA(2);

                if ( (LA38_1==IDENT) ) {
                    int LA38_3 = input.LA(3);

                    if ( ((input.LT(1).getText().equals("role"))) ) {
                        alt38=1;
                    }
                }
            }
            switch (alt38) {
                case 1 :
                    // USE.g:354:7: keyRole rn= IDENT
                    {
                    pushFollow(FOLLOW_keyRole_in_associationEnd1445);
                    keyRole();

                    state._fsp--;
                    if (state.failed) return n;

                    rn=(Token)match(input,IDENT,FOLLOW_IDENT_in_associationEnd1449); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.setRolename(rn); }

                    }
                    break;

            }


            // USE.g:355:5: ( 'ordered' | 'subsets' sr= IDENT | keyUnion | 'redefines' rd= IDENT | ( keyDerived | keyDerive ) ( LPAREN parameter= elemVarsDeclaration RPAREN )? EQUAL exp= expression | keyQualifier qualifiers= paramList )*
            loop41:
            do {
                int alt41=7;
                switch ( input.LA(1) ) {
                case IDENT:
                    {
                    int LA41_3 = input.LA(2);

                    if ( ((input.LT(1).getText().equals("union"))) ) {
                        alt41=3;
                    }
                    else if ( (((input.LT(1).getText().equals("derive"))||(input.LT(1).getText().equals("derived")))) ) {
                        alt41=5;
                    }
                    else if ( ((input.LT(1).getText().equals("qualifier"))) ) {
                        alt41=6;
                    }


                    }
                    break;
                case 104:
                    {
                    alt41=1;
                    }
                    break;
                case 113:
                    {
                    alt41=2;
                    }
                    break;
                case 108:
                    {
                    alt41=4;
                    }
                    break;

                }

                switch (alt41) {
            	case 1 :
            	    // USE.g:356:9: 'ordered'
            	    {
            	    match(input,104,FOLLOW_104_in_associationEnd1470); if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.setOrdered(); }

            	    }
            	    break;
            	case 2 :
            	    // USE.g:357:9: 'subsets' sr= IDENT
            	    {
            	    match(input,113,FOLLOW_113_in_associationEnd1482); if (state.failed) return n;

            	    sr=(Token)match(input,IDENT,FOLLOW_IDENT_in_associationEnd1486); if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addSubsetsRolename(sr); }

            	    }
            	    break;
            	case 3 :
            	    // USE.g:358:9: keyUnion
            	    {
            	    pushFollow(FOLLOW_keyUnion_in_associationEnd1498);
            	    keyUnion();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.setUnion(true); }

            	    }
            	    break;
            	case 4 :
            	    // USE.g:359:9: 'redefines' rd= IDENT
            	    {
            	    match(input,108,FOLLOW_108_in_associationEnd1510); if (state.failed) return n;

            	    rd=(Token)match(input,IDENT,FOLLOW_IDENT_in_associationEnd1514); if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addRedefinesRolename(rd); }

            	    }
            	    break;
            	case 5 :
            	    // USE.g:360:9: ( keyDerived | keyDerive ) ( LPAREN parameter= elemVarsDeclaration RPAREN )? EQUAL exp= expression
            	    {
            	    // USE.g:360:9: ( keyDerived | keyDerive )
            	    int alt39=2;
            	    int LA39_0 = input.LA(1);

            	    if ( (LA39_0==IDENT) ) {
            	        int LA39_1 = input.LA(2);

            	        if ( ((input.LT(1).getText().equals("derived"))) ) {
            	            alt39=1;
            	        }
            	        else if ( ((input.LT(1).getText().equals("derive"))) ) {
            	            alt39=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return n;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 39, 1, input);

            	            throw nvae;

            	        }
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return n;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 39, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt39) {
            	        case 1 :
            	            // USE.g:360:10: keyDerived
            	            {
            	            pushFollow(FOLLOW_keyDerived_in_associationEnd1527);
            	            keyDerived();

            	            state._fsp--;
            	            if (state.failed) return n;

            	            }
            	            break;
            	        case 2 :
            	            // USE.g:360:21: keyDerive
            	            {
            	            pushFollow(FOLLOW_keyDerive_in_associationEnd1529);
            	            keyDerive();

            	            state._fsp--;
            	            if (state.failed) return n;

            	            }
            	            break;

            	    }


            	    // USE.g:360:32: ( LPAREN parameter= elemVarsDeclaration RPAREN )?
            	    int alt40=2;
            	    int LA40_0 = input.LA(1);

            	    if ( (LA40_0==LPAREN) ) {
            	        alt40=1;
            	    }
            	    switch (alt40) {
            	        case 1 :
            	            // USE.g:360:34: LPAREN parameter= elemVarsDeclaration RPAREN
            	            {
            	            match(input,LPAREN,FOLLOW_LPAREN_in_associationEnd1534); if (state.failed) return n;

            	            pushFollow(FOLLOW_elemVarsDeclaration_in_associationEnd1540);
            	            parameter=elemVarsDeclaration();

            	            state._fsp--;
            	            if (state.failed) return n;

            	            match(input,RPAREN,FOLLOW_RPAREN_in_associationEnd1542); if (state.failed) return n;

            	            }
            	            break;

            	    }


            	    match(input,EQUAL,FOLLOW_EQUAL_in_associationEnd1546); if (state.failed) return n;

            	    pushFollow(FOLLOW_expression_in_associationEnd1550);
            	    exp=expression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.setDerived((exp!=null?exp.n:null), parameter); }

            	    }
            	    break;
            	case 6 :
            	    // USE.g:361:9: keyQualifier qualifiers= paramList
            	    {
            	    pushFollow(FOLLOW_keyQualifier_in_associationEnd1562);
            	    keyQualifier();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    pushFollow(FOLLOW_paramList_in_associationEnd1568);
            	    qualifiers=paramList();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) {n.setQualifiers(qualifiers); }

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            // USE.g:363:5: ( SEMI )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==SEMI) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // USE.g:363:7: SEMI
                    {
                    match(input,SEMI,FOLLOW_SEMI_in_associationEnd1585); if (state.failed) return n;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "associationEnd"



    // $ANTLR start "multiplicity"
    // USE.g:377:1: multiplicity returns [ASTMultiplicity n] :mr= multiplicityRange ( COMMA mr= multiplicityRange )* ;
    public final ASTMultiplicity multiplicity() throws RecognitionException {
        ASTMultiplicity n = null;


        ASTMultiplicityRange mr =null;


        try {
            // USE.g:378:5: (mr= multiplicityRange ( COMMA mr= multiplicityRange )* )
            // USE.g:379:5: mr= multiplicityRange ( COMMA mr= multiplicityRange )*
            {
            if ( state.backtracking==0 ) { 
            	Token t = input.LT(1); // remember start position of expression
            	n = new ASTMultiplicity(t);
                }

            pushFollow(FOLLOW_multiplicityRange_in_multiplicity1620);
            mr=multiplicityRange();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.addRange(mr); }

            // USE.g:384:5: ( COMMA mr= multiplicityRange )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==COMMA) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // USE.g:384:7: COMMA mr= multiplicityRange
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_multiplicity1630); if (state.failed) return n;

            	    pushFollow(FOLLOW_multiplicityRange_in_multiplicity1634);
            	    mr=multiplicityRange();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addRange(mr); }

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "multiplicity"



    // $ANTLR start "multiplicityRange"
    // USE.g:387:1: multiplicityRange returns [ASTMultiplicityRange n] : ms1= multiplicitySpec ( DOTDOT ms2= multiplicitySpec )? ;
    public final ASTMultiplicityRange multiplicityRange() throws RecognitionException {
        ASTMultiplicityRange n = null;


        int ms1 =0;

        int ms2 =0;


        try {
            // USE.g:388:5: (ms1= multiplicitySpec ( DOTDOT ms2= multiplicitySpec )? )
            // USE.g:389:5: ms1= multiplicitySpec ( DOTDOT ms2= multiplicitySpec )?
            {
            pushFollow(FOLLOW_multiplicitySpec_in_multiplicityRange1663);
            ms1=multiplicitySpec();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTMultiplicityRange(ms1); }

            // USE.g:390:5: ( DOTDOT ms2= multiplicitySpec )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==DOTDOT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // USE.g:390:7: DOTDOT ms2= multiplicitySpec
                    {
                    match(input,DOTDOT,FOLLOW_DOTDOT_in_multiplicityRange1673); if (state.failed) return n;

                    pushFollow(FOLLOW_multiplicitySpec_in_multiplicityRange1677);
                    ms2=multiplicitySpec();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.setHigh(ms2); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "multiplicityRange"



    // $ANTLR start "multiplicitySpec"
    // USE.g:393:1: multiplicitySpec returns [int m] : (i= INT | STAR );
    public final int multiplicitySpec() throws RecognitionException {
        int m = 0;


        Token i=null;

         m = -1; 
        try {
            // USE.g:395:7: (i= INT | STAR )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==INT) ) {
                alt45=1;
            }
            else if ( (LA45_0==STAR) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return m;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // USE.g:396:7: i= INT
                    {
                    i=(Token)match(input,INT,FOLLOW_INT_in_multiplicitySpec1711); if (state.failed) return m;

                    if ( state.backtracking==0 ) { m = Integer.parseInt((i!=null?i.getText():null)); }

                    }
                    break;
                case 2 :
                    // USE.g:397:7: STAR
                    {
                    match(input,STAR,FOLLOW_STAR_in_multiplicitySpec1721); if (state.failed) return m;

                    if ( state.backtracking==0 ) { m = -1; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return m;
    }
    // $ANTLR end "multiplicitySpec"



    // $ANTLR start "annotationSpec"
    // USE.g:400:1: annotationSpec : ( block_annotation | line_annotation );
    public final void annotationSpec() throws RecognitionException {
        try {
            // USE.g:400:15: ( block_annotation | line_annotation )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==AT) ) {
                int LA46_1 = input.LA(2);

                if ( (LA46_1==IDENT) ) {
                    alt46=1;
                }
                else if ( (LA46_1==47||LA46_1==49||LA46_1==54||LA46_1==57) ) {
                    alt46=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;

            }
            switch (alt46) {
                case 1 :
                    // USE.g:401:2: block_annotation
                    {
                    pushFollow(FOLLOW_block_annotation_in_annotationSpec1737);
                    block_annotation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // USE.g:402:4: line_annotation
                    {
                    pushFollow(FOLLOW_line_annotation_in_annotationSpec1743);
                    line_annotation();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotationSpec"



    // $ANTLR start "block_annotation"
    // USE.g:405:1: block_annotation returns [AnnotationTag tag] : AT IDENT LBRACE ( AnnotationTag t= annotation_tag )? RBRACE ;
    public final AnnotationTag block_annotation() throws RecognitionException {
        AnnotationTag tag = null;


        AnnotationTag t =null;


        tag = new AnnotationTag();
        try {
            // USE.g:407:2: ( AT IDENT LBRACE ( AnnotationTag t= annotation_tag )? RBRACE )
            // USE.g:408:2: AT IDENT LBRACE ( AnnotationTag t= annotation_tag )? RBRACE
            {
            match(input,AT,FOLLOW_AT_in_block_annotation1761); if (state.failed) return tag;

            match(input,IDENT,FOLLOW_IDENT_in_block_annotation1763); if (state.failed) return tag;

            match(input,LBRACE,FOLLOW_LBRACE_in_block_annotation1765); if (state.failed) return tag;

            // USE.g:409:3: ( AnnotationTag t= annotation_tag )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==AnnotationTag) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // USE.g:409:4: AnnotationTag t= annotation_tag
                    {
                    match(input,AnnotationTag,FOLLOW_AnnotationTag_in_block_annotation1770); if (state.failed) return tag;

                    pushFollow(FOLLOW_annotation_tag_in_block_annotation1774);
                    t=annotation_tag();

                    state._fsp--;
                    if (state.failed) return tag;

                    if ( state.backtracking==0 ) {tag =t;}

                    }
                    break;

            }


            match(input,RBRACE,FOLLOW_RBRACE_in_block_annotation1783); if (state.failed) return tag;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return tag;
    }
    // $ANTLR end "block_annotation"



    // $ANTLR start "line_annotation"
    // USE.g:413:1: line_annotation : AT ( annotation_tag | annotation_override ) ;
    public final void line_annotation() throws RecognitionException {
        try {
            // USE.g:413:16: ( AT ( annotation_tag | annotation_override ) )
            // USE.g:413:18: AT ( annotation_tag | annotation_override )
            {
            match(input,AT,FOLLOW_AT_in_line_annotation1791); if (state.failed) return ;

            // USE.g:413:21: ( annotation_tag | annotation_override )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==47||LA48_0==54||LA48_0==57) ) {
                alt48=1;
            }
            else if ( (LA48_0==49) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }
            switch (alt48) {
                case 1 :
                    // USE.g:413:22: annotation_tag
                    {
                    pushFollow(FOLLOW_annotation_tag_in_line_annotation1794);
                    annotation_tag();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;
                case 2 :
                    // USE.g:413:39: annotation_override
                    {
                    pushFollow(FOLLOW_annotation_override_in_line_annotation1798);
                    annotation_override();

                    state._fsp--;
                    if (state.failed) return ;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "line_annotation"



    // $ANTLR start "annotation_tag"
    // USE.g:416:1: annotation_tag returns [AnnotationTag tag] : ( annotation_comment EQUAL ( NON_OCL_STRING | annotation_ref ) | annotation_weight EQUAL ( annotation_def | INT | annotation_ref ) | annotation_type EQUAL ( annotation_enum_type | annotation_ref ) );
    public final AnnotationTag annotation_tag() throws RecognitionException {
        AnnotationTag tag = null;


        Token NON_OCL_STRING1=null;

        tag = new AnnotationTag();
        try {
            // USE.g:417:35: ( annotation_comment EQUAL ( NON_OCL_STRING | annotation_ref ) | annotation_weight EQUAL ( annotation_def | INT | annotation_ref ) | annotation_type EQUAL ( annotation_enum_type | annotation_ref ) )
            int alt52=3;
            switch ( input.LA(1) ) {
            case 47:
                {
                alt52=1;
                }
                break;
            case 57:
                {
                alt52=2;
                }
                break;
            case 54:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return tag;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;

            }

            switch (alt52) {
                case 1 :
                    // USE.g:418:2: annotation_comment EQUAL ( NON_OCL_STRING | annotation_ref )
                    {
                    pushFollow(FOLLOW_annotation_comment_in_annotation_tag1816);
                    annotation_comment();

                    state._fsp--;
                    if (state.failed) return tag;

                    match(input,EQUAL,FOLLOW_EQUAL_in_annotation_tag1818); if (state.failed) return tag;

                    // USE.g:418:27: ( NON_OCL_STRING | annotation_ref )
                    int alt49=2;
                    int LA49_0 = input.LA(1);

                    if ( (LA49_0==NON_OCL_STRING) ) {
                        alt49=1;
                    }
                    else if ( (LA49_0==AT) ) {
                        alt49=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return tag;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 49, 0, input);

                        throw nvae;

                    }
                    switch (alt49) {
                        case 1 :
                            // USE.g:418:28: NON_OCL_STRING
                            {
                            NON_OCL_STRING1=(Token)match(input,NON_OCL_STRING,FOLLOW_NON_OCL_STRING_in_annotation_tag1821); if (state.failed) return tag;

                            if ( state.backtracking==0 ) {tag.setComments(NON_OCL_STRING1.getText());}

                            }
                            break;
                        case 2 :
                            // USE.g:418:92: annotation_ref
                            {
                            pushFollow(FOLLOW_annotation_ref_in_annotation_tag1827);
                            annotation_ref();

                            state._fsp--;
                            if (state.failed) return tag;

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // USE.g:419:4: annotation_weight EQUAL ( annotation_def | INT | annotation_ref )
                    {
                    pushFollow(FOLLOW_annotation_weight_in_annotation_tag1833);
                    annotation_weight();

                    state._fsp--;
                    if (state.failed) return tag;

                    match(input,EQUAL,FOLLOW_EQUAL_in_annotation_tag1835); if (state.failed) return tag;

                    // USE.g:419:28: ( annotation_def | INT | annotation_ref )
                    int alt50=3;
                    switch ( input.LA(1) ) {
                    case 71:
                        {
                        alt50=1;
                        }
                        break;
                    case INT:
                        {
                        alt50=2;
                        }
                        break;
                    case AT:
                        {
                        alt50=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return tag;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 0, input);

                        throw nvae;

                    }

                    switch (alt50) {
                        case 1 :
                            // USE.g:419:29: annotation_def
                            {
                            pushFollow(FOLLOW_annotation_def_in_annotation_tag1838);
                            annotation_def();

                            state._fsp--;
                            if (state.failed) return tag;

                            }
                            break;
                        case 2 :
                            // USE.g:419:46: INT
                            {
                            match(input,INT,FOLLOW_INT_in_annotation_tag1842); if (state.failed) return tag;

                            if ( state.backtracking==0 ) {tag.setWeight(new IntWeight(INT));}

                            }
                            break;
                        case 3 :
                            // USE.g:419:90: annotation_ref
                            {
                            pushFollow(FOLLOW_annotation_ref_in_annotation_tag1848);
                            annotation_ref();

                            state._fsp--;
                            if (state.failed) return tag;

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // USE.g:420:4: annotation_type EQUAL ( annotation_enum_type | annotation_ref )
                    {
                    pushFollow(FOLLOW_annotation_type_in_annotation_tag1854);
                    annotation_type();

                    state._fsp--;
                    if (state.failed) return tag;

                    match(input,EQUAL,FOLLOW_EQUAL_in_annotation_tag1856); if (state.failed) return tag;

                    // USE.g:420:26: ( annotation_enum_type | annotation_ref )
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==52||LA51_0==56) ) {
                        alt51=1;
                    }
                    else if ( (LA51_0==AT) ) {
                        alt51=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return tag;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 51, 0, input);

                        throw nvae;

                    }
                    switch (alt51) {
                        case 1 :
                            // USE.g:420:27: annotation_enum_type
                            {
                            pushFollow(FOLLOW_annotation_enum_type_in_annotation_tag1859);
                            annotation_enum_type();

                            state._fsp--;
                            if (state.failed) return tag;

                            }
                            break;
                        case 2 :
                            // USE.g:420:50: annotation_ref
                            {
                            pushFollow(FOLLOW_annotation_ref_in_annotation_tag1863);
                            annotation_ref();

                            state._fsp--;
                            if (state.failed) return tag;

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return tag;
    }
    // $ANTLR end "annotation_tag"



    // $ANTLR start "annotation_predefined"
    // USE.g:423:1: annotation_predefined : ( 'Comment' | 'Weight' | 'Type' );
    public final void annotation_predefined() throws RecognitionException {
        try {
            // USE.g:423:22: ( 'Comment' | 'Weight' | 'Type' )
            // USE.g:
            {
            if ( input.LA(1)==47||input.LA(1)==54||input.LA(1)==57 ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_predefined"



    // $ANTLR start "annotation_comment"
    // USE.g:429:1: annotation_comment : 'Comment' ;
    public final void annotation_comment() throws RecognitionException {
        try {
            // USE.g:429:19: ( 'Comment' )
            // USE.g:429:21: 'Comment'
            {
            match(input,47,FOLLOW_47_in_annotation_comment1891); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_comment"



    // $ANTLR start "annotation_weight"
    // USE.g:430:1: annotation_weight : 'Weight' ;
    public final void annotation_weight() throws RecognitionException {
        try {
            // USE.g:430:18: ( 'Weight' )
            // USE.g:430:20: 'Weight'
            {
            match(input,57,FOLLOW_57_in_annotation_weight1898); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_weight"



    // $ANTLR start "annotation_type"
    // USE.g:431:1: annotation_type : 'Type' ;
    public final void annotation_type() throws RecognitionException {
        try {
            // USE.g:431:16: ( 'Type' )
            // USE.g:431:18: 'Type'
            {
            match(input,54,FOLLOW_54_in_annotation_type1905); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_type"



    // $ANTLR start "annotation_override"
    // USE.g:433:1: annotation_override : 'Override' LPAREN LBRACE annotation_term RBRACE RPAREN ;
    public final void annotation_override() throws RecognitionException {
        try {
            // USE.g:433:20: ( 'Override' LPAREN LBRACE annotation_term RBRACE RPAREN )
            // USE.g:434:1: 'Override' LPAREN LBRACE annotation_term RBRACE RPAREN
            {
            match(input,49,FOLLOW_49_in_annotation_override1914); if (state.failed) return ;

            match(input,LPAREN,FOLLOW_LPAREN_in_annotation_override1916); if (state.failed) return ;

            match(input,LBRACE,FOLLOW_LBRACE_in_annotation_override1918); if (state.failed) return ;

            pushFollow(FOLLOW_annotation_term_in_annotation_override1920);
            annotation_term();

            state._fsp--;
            if (state.failed) return ;

            match(input,RBRACE,FOLLOW_RBRACE_in_annotation_override1922); if (state.failed) return ;

            match(input,RPAREN,FOLLOW_RPAREN_in_annotation_override1924); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_override"



    // $ANTLR start "annotation_term"
    // USE.g:437:1: annotation_term : annotation_tag ( COMMA annotation_tag )* ;
    public final void annotation_term() throws RecognitionException {
        try {
            // USE.g:437:16: ( annotation_tag ( COMMA annotation_tag )* )
            // USE.g:438:2: annotation_tag ( COMMA annotation_tag )*
            {
            pushFollow(FOLLOW_annotation_tag_in_annotation_term1933);
            annotation_tag();

            state._fsp--;
            if (state.failed) return ;

            // USE.g:438:17: ( COMMA annotation_tag )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==COMMA) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // USE.g:438:18: COMMA annotation_tag
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_annotation_term1936); if (state.failed) return ;

            	    pushFollow(FOLLOW_annotation_tag_in_annotation_term1938);
            	    annotation_tag();

            	    state._fsp--;
            	    if (state.failed) return ;

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_term"



    // $ANTLR start "annotation_ref"
    // USE.g:441:1: annotation_ref : AT IDENT DOT annotation_predefined ;
    public final void annotation_ref() throws RecognitionException {
        try {
            // USE.g:441:15: ( AT IDENT DOT annotation_predefined )
            // USE.g:442:2: AT IDENT DOT annotation_predefined
            {
            match(input,AT,FOLLOW_AT_in_annotation_ref1949); if (state.failed) return ;

            match(input,IDENT,FOLLOW_IDENT_in_annotation_ref1951); if (state.failed) return ;

            match(input,DOT,FOLLOW_DOT_in_annotation_ref1953); if (state.failed) return ;

            pushFollow(FOLLOW_annotation_predefined_in_annotation_ref1955);
            annotation_predefined();

            state._fsp--;
            if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_ref"



    // $ANTLR start "annotation_def"
    // USE.g:445:1: annotation_def : 'default' ;
    public final void annotation_def() throws RecognitionException {
        try {
            // USE.g:445:15: ( 'default' )
            // USE.g:446:2: 'default'
            {
            match(input,71,FOLLOW_71_in_annotation_def1964); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_def"



    // $ANTLR start "annotation_enum_type"
    // USE.g:448:1: annotation_enum_type : ( 'Strong' | 'Weak' );
    public final void annotation_enum_type() throws RecognitionException {
        try {
            // USE.g:448:22: ( 'Strong' | 'Weak' )
            // USE.g:
            {
            if ( input.LA(1)==52||input.LA(1)==56 ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "annotation_enum_type"



    // $ANTLR start "invariant"
    // USE.g:470:1: invariant returns [ASTConstraintDefinition n] : ( block_annotation )? 'context' (v= IDENT ( ',' v= IDENT )* COLON )? t= simpleType (inv= invariantClause )* ;
    public final ASTConstraintDefinition invariant() throws RecognitionException {
        ASTConstraintDefinition n = null;


        Token v=null;
        ASTSimpleType t =null;

        ASTInvariantClause inv =null;


        try {
            // USE.g:471:5: ( ( block_annotation )? 'context' (v= IDENT ( ',' v= IDENT )* COLON )? t= simpleType (inv= invariantClause )* )
            // USE.g:472:5: ( block_annotation )? 'context' (v= IDENT ( ',' v= IDENT )* COLON )? t= simpleType (inv= invariantClause )*
            {
            if ( state.backtracking==0 ) { n = new ASTConstraintDefinition(); }

            // USE.g:473:2: ( block_annotation )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==AT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // USE.g:473:3: block_annotation
                    {
                    pushFollow(FOLLOW_block_annotation_in_invariant2009);
                    block_annotation();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;

            }


            match(input,68,FOLLOW_68_in_invariant2018); if (state.failed) return n;

            // USE.g:475:5: (v= IDENT ( ',' v= IDENT )* COLON )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==IDENT) ) {
                int LA56_1 = input.LA(2);

                if ( (LA56_1==COLON||LA56_1==COMMA) ) {
                    alt56=1;
                }
            }
            switch (alt56) {
                case 1 :
                    // USE.g:475:7: v= IDENT ( ',' v= IDENT )* COLON
                    {
                    v=(Token)match(input,IDENT,FOLLOW_IDENT_in_invariant2028); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.addVarName(v); }

                    // USE.g:476:8: ( ',' v= IDENT )*
                    loop55:
                    do {
                        int alt55=2;
                        int LA55_0 = input.LA(1);

                        if ( (LA55_0==COMMA) ) {
                            alt55=1;
                        }


                        switch (alt55) {
                    	case 1 :
                    	    // USE.g:476:9: ',' v= IDENT
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_invariant2041); if (state.failed) return n;

                    	    v=(Token)match(input,IDENT,FOLLOW_IDENT_in_invariant2045); if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addVarName(v); }

                    	    }
                    	    break;

                    	default :
                    	    break loop55;
                        }
                    } while (true);


                    match(input,COLON,FOLLOW_COLON_in_invariant2053); if (state.failed) return n;

                    }
                    break;

            }


            pushFollow(FOLLOW_simpleType_in_invariant2065);
            t=simpleType();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.setType(t); }

            // USE.g:478:5: (inv= invariantClause )*
            loop57:
            do {
                int alt57=2;
                alt57 = dfa57.predict(input);
                switch (alt57) {
            	case 1 :
            	    // USE.g:478:7: inv= invariantClause
            	    {
            	    pushFollow(FOLLOW_invariantClause_in_invariant2077);
            	    inv=invariantClause();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addInvariantClause(inv); }

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "invariant"



    // $ANTLR start "invariantClause"
    // USE.g:485:1: invariantClause returns [ASTInvariantClause n] : ( ( line_annotation )* as= annotationSet 'inv' (name= IDENT )? COLON e= expression | 'existential' 'inv' (name= IDENT )? COLON e= expression );
    public final ASTInvariantClause invariantClause() throws RecognitionException {
        ASTInvariantClause n = null;


        Token name=null;
        Set<ASTAnnotation> as =null;

        USEParser.expression_return e =null;


        try {
            // USE.g:486:2: ( ( line_annotation )* as= annotationSet 'inv' (name= IDENT )? COLON e= expression | 'existential' 'inv' (name= IDENT )? COLON e= expression )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==AT||LA61_0==IDENT||LA61_0==58||(LA61_0 >= 61 && LA61_0 <= 62)||LA61_0==79||LA61_0==89||LA61_0==92||(LA61_0 >= 105 && LA61_0 <= 106)) ) {
                alt61=1;
            }
            else if ( (LA61_0==80) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // USE.g:487:2: ( line_annotation )* as= annotationSet 'inv' (name= IDENT )? COLON e= expression
                    {
                    // USE.g:487:2: ( line_annotation )*
                    loop58:
                    do {
                        int alt58=2;
                        int LA58_0 = input.LA(1);

                        if ( (LA58_0==AT) ) {
                            int LA58_1 = input.LA(2);

                            if ( (LA58_1==47||LA58_1==49||LA58_1==54||LA58_1==57) ) {
                                alt58=1;
                            }


                        }


                        switch (alt58) {
                    	case 1 :
                    	    // USE.g:487:3: line_annotation
                    	    {
                    	    pushFollow(FOLLOW_line_annotation_in_invariantClause2104);
                    	    line_annotation();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    }
                    	    break;

                    	default :
                    	    break loop58;
                        }
                    } while (true);


                    pushFollow(FOLLOW_annotationSet_in_invariantClause2113);
                    as=annotationSet();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,89,FOLLOW_89_in_invariantClause2120); if (state.failed) return n;

                    // USE.g:489:12: (name= IDENT )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==IDENT) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // USE.g:489:14: name= IDENT
                            {
                            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_invariantClause2126); if (state.failed) return n;

                            }
                            break;

                    }


                    match(input,COLON,FOLLOW_COLON_in_invariantClause2131); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_invariantClause2135);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTInvariantClause(name, (e!=null?e.n:null)); n.setAnnotations(as); }

                    }
                    break;
                case 2 :
                    // USE.g:491:7: 'existential' 'inv' (name= IDENT )? COLON e= expression
                    {
                    match(input,80,FOLLOW_80_in_invariantClause2152); if (state.failed) return n;

                    match(input,89,FOLLOW_89_in_invariantClause2154); if (state.failed) return n;

                    // USE.g:491:27: (name= IDENT )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==IDENT) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // USE.g:491:29: name= IDENT
                            {
                            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_invariantClause2160); if (state.failed) return n;

                            }
                            break;

                    }


                    match(input,COLON,FOLLOW_COLON_in_invariantClause2165); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_invariantClause2169);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTExistentialInvariantClause(name, (e!=null?e.n:null)); n.setAnnotations(as); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "invariantClause"



    // $ANTLR start "prePost"
    // USE.g:503:1: prePost returns [ASTPrePost n] : 'context' classname= IDENT COLON_COLON opname= IDENT pl= paramList ( COLON rt= type )? (ppc= prePostClause )+ ;
    public final ASTPrePost prePost() throws RecognitionException {
        ASTPrePost n = null;


        Token classname=null;
        Token opname=null;
        List<ASTVariableDeclaration> pl =null;

        ASTType rt =null;

        ASTPrePostClause ppc =null;


        try {
            // USE.g:504:5: ( 'context' classname= IDENT COLON_COLON opname= IDENT pl= paramList ( COLON rt= type )? (ppc= prePostClause )+ )
            // USE.g:505:5: 'context' classname= IDENT COLON_COLON opname= IDENT pl= paramList ( COLON rt= type )? (ppc= prePostClause )+
            {
            match(input,68,FOLLOW_68_in_prePost2202); if (state.failed) return n;

            classname=(Token)match(input,IDENT,FOLLOW_IDENT_in_prePost2206); if (state.failed) return n;

            match(input,COLON_COLON,FOLLOW_COLON_COLON_in_prePost2208); if (state.failed) return n;

            opname=(Token)match(input,IDENT,FOLLOW_IDENT_in_prePost2212); if (state.failed) return n;

            pushFollow(FOLLOW_paramList_in_prePost2216);
            pl=paramList();

            state._fsp--;
            if (state.failed) return n;

            // USE.g:505:69: ( COLON rt= type )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COLON) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // USE.g:505:71: COLON rt= type
                    {
                    match(input,COLON,FOLLOW_COLON_in_prePost2220); if (state.failed) return n;

                    pushFollow(FOLLOW_type_in_prePost2224);
                    rt=type();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;

            }


            if ( state.backtracking==0 ) { n = new ASTPrePost(classname, opname, pl, rt); }

            // USE.g:507:5: (ppc= prePostClause )+
            int cnt63=0;
            loop63:
            do {
                int alt63=2;
                alt63 = dfa63.predict(input);
                switch (alt63) {
            	case 1 :
            	    // USE.g:507:7: ppc= prePostClause
            	    {
            	    pushFollow(FOLLOW_prePostClause_in_prePost2243);
            	    ppc=prePostClause();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addPrePostClause(ppc); }

            	    }
            	    break;

            	default :
            	    if ( cnt63 >= 1 ) break loop63;
            	    if (state.backtracking>0) {state.failed=true; return n;}
                        EarlyExitException eee =
                            new EarlyExitException(63, input);
                        throw eee;
                }
                cnt63++;
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "prePost"



    // $ANTLR start "prePostClause"
    // USE.g:514:1: prePostClause returns [ASTPrePostClause n] : as= annotationSet ( 'pre' | 'post' ) (name= IDENT )? COLON e= expression ;
    public final ASTPrePostClause prePostClause() throws RecognitionException {
        ASTPrePostClause n = null;


        Token name=null;
        Set<ASTAnnotation> as =null;

        USEParser.expression_return e =null;


         Token t = null; 
        try {
            // USE.g:516:2: (as= annotationSet ( 'pre' | 'post' ) (name= IDENT )? COLON e= expression )
            // USE.g:517:2: as= annotationSet ( 'pre' | 'post' ) (name= IDENT )? COLON e= expression
            {
            pushFollow(FOLLOW_annotationSet_in_prePostClause2277);
            as=annotationSet();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { t = input.LT(1); }

            if ( (input.LA(1) >= 105 && input.LA(1) <= 106) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            // USE.g:519:25: (name= IDENT )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==IDENT) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // USE.g:519:27: name= IDENT
                    {
                    name=(Token)match(input,IDENT,FOLLOW_IDENT_in_prePostClause2304); if (state.failed) return n;

                    }
                    break;

            }


            match(input,COLON,FOLLOW_COLON_in_prePostClause2309); if (state.failed) return n;

            pushFollow(FOLLOW_expression_in_prePostClause2313);
            e=expression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTPrePostClause(t, name, (e!=null?e.n:null)); n.setAnnotations(as); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "prePostClause"



    // $ANTLR start "annotationSet"
    // USE.g:523:1: annotationSet returns [Set<ASTAnnotation> annotations] : (an= annotation )* ;
    public final Set<ASTAnnotation> annotationSet() throws RecognitionException {
        Set<ASTAnnotation> annotations = null;


        ASTAnnotation an =null;


         annotations = new HashSet<ASTAnnotation>(); 
        try {
            // USE.g:525:2: ( (an= annotation )* )
            // USE.g:526:2: (an= annotation )*
            {
            // USE.g:526:2: (an= annotation )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==AT) ) {
                    int LA65_2 = input.LA(2);

                    if ( (LA65_2==IDENT) ) {
                        int LA65_3 = input.LA(3);

                        if ( (LA65_3==LPAREN) ) {
                            alt65=1;
                        }


                    }


                }


                switch (alt65) {
            	case 1 :
            	    // USE.g:526:3: an= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotationSet2340);
            	    an=annotation();

            	    state._fsp--;
            	    if (state.failed) return annotations;

            	    if ( state.backtracking==0 ) { annotations.add(an); }

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return annotations;
    }
    // $ANTLR end "annotationSet"



    // $ANTLR start "annotation"
    // USE.g:529:1: annotation returns [ASTAnnotation n] : AT name= IDENT LPAREN values= annotationValues RPAREN ;
    public final ASTAnnotation annotation() throws RecognitionException {
        ASTAnnotation n = null;


        Token name=null;
        Map<Token, Token> values =null;


        try {
            // USE.g:529:37: ( AT name= IDENT LPAREN values= annotationValues RPAREN )
            // USE.g:530:2: AT name= IDENT LPAREN values= annotationValues RPAREN
            {
            match(input,AT,FOLLOW_AT_in_annotation2359); if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotation2363); if (state.failed) return n;

            if ( state.backtracking==0 ) {n = new ASTAnnotation(name);}

            match(input,LPAREN,FOLLOW_LPAREN_in_annotation2369); if (state.failed) return n;

            pushFollow(FOLLOW_annotationValues_in_annotation2378);
            values=annotationValues();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.setValues(values); }

            match(input,RPAREN,FOLLOW_RPAREN_in_annotation2383); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "annotation"



    // $ANTLR start "annotationValues"
    // USE.g:536:1: annotationValues returns [Map<Token, Token> values] : (firstVal= annotationValue )? ( COMMA val= annotationValue )* ;
    public final Map<Token, Token> annotationValues() throws RecognitionException {
        Map<Token, Token> values = null;


        USEParser.annotationValue_return firstVal =null;

        USEParser.annotationValue_return val =null;


         values = new HashMap<Token, Token>(); 
        try {
            // USE.g:538:2: ( (firstVal= annotationValue )? ( COMMA val= annotationValue )* )
            // USE.g:539:2: (firstVal= annotationValue )? ( COMMA val= annotationValue )*
            {
            // USE.g:539:2: (firstVal= annotationValue )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IDENT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // USE.g:539:3: firstVal= annotationValue
                    {
                    pushFollow(FOLLOW_annotationValue_in_annotationValues2406);
                    firstVal=annotationValue();

                    state._fsp--;
                    if (state.failed) return values;

                    if ( state.backtracking==0 ) { values.put((firstVal!=null?firstVal.name:null), (firstVal!=null?firstVal.value:null)); }

                    }
                    break;

            }


            // USE.g:540:2: ( COMMA val= annotationValue )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==COMMA) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // USE.g:540:3: COMMA val= annotationValue
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_annotationValues2414); if (state.failed) return values;

            	    pushFollow(FOLLOW_annotationValue_in_annotationValues2418);
            	    val=annotationValue();

            	    state._fsp--;
            	    if (state.failed) return values;

            	    if ( state.backtracking==0 ) { values.put((val!=null?val.name:null), (val!=null?val.value:null)); }

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return values;
    }
    // $ANTLR end "annotationValues"


    public static class annotationValue_return extends ParserRuleReturnScope {
        public Token name;
        public Token value;
    };


    // $ANTLR start "annotationValue"
    // USE.g:543:1: annotationValue returns [Token name, Token value] : aName= IDENT EQUAL aValue= NON_OCL_STRING ;
    public final USEParser.annotationValue_return annotationValue() throws RecognitionException {
        USEParser.annotationValue_return retval = new USEParser.annotationValue_return();
        retval.start = input.LT(1);


        Token aName=null;
        Token aValue=null;

        try {
            // USE.g:543:50: (aName= IDENT EQUAL aValue= NON_OCL_STRING )
            // USE.g:544:2: aName= IDENT EQUAL aValue= NON_OCL_STRING
            {
            aName=(Token)match(input,IDENT,FOLLOW_IDENT_in_annotationValue2437); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.name = aName; }

            match(input,EQUAL,FOLLOW_EQUAL_in_annotationValue2442); if (state.failed) return retval;

            aValue=(Token)match(input,NON_OCL_STRING,FOLLOW_NON_OCL_STRING_in_annotationValue2448); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.value = aValue; }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "annotationValue"



    // $ANTLR start "stateMachine"
    // USE.g:549:1: stateMachine returns [ASTStateMachine n] : ( 'psm' ) smName= IDENT 'states' (s= stateDefinition )+ 'transitions' (t= transitionDefinition )+ 'end' ;
    public final ASTStateMachine stateMachine() throws RecognitionException {
        ASTStateMachine n = null;


        Token smName=null;
        ASTStateDefinition s =null;

        ASTTransitionDefinition t =null;


        try {
            // USE.g:550:5: ( ( 'psm' ) smName= IDENT 'states' (s= stateDefinition )+ 'transitions' (t= transitionDefinition )+ 'end' )
            // USE.g:551:5: ( 'psm' ) smName= IDENT 'states' (s= stateDefinition )+ 'transitions' (t= transitionDefinition )+ 'end'
            {
            // USE.g:551:5: ( 'psm' )
            // USE.g:552:8: 'psm'
            {
            match(input,107,FOLLOW_107_in_stateMachine2478); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTProtocolStateMachine(); }

            }


            smName=(Token)match(input,IDENT,FOLLOW_IDENT_in_stateMachine2511); if (state.failed) return n;

            if ( state.backtracking==0 ) { n.setName(smName); }

            match(input,112,FOLLOW_112_in_stateMachine2524); if (state.failed) return n;

            // USE.g:559:10: (s= stateDefinition )+
            int cnt68=0;
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==IDENT) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // USE.g:559:11: s= stateDefinition
            	    {
            	    pushFollow(FOLLOW_stateDefinition_in_stateMachine2540);
            	    s=stateDefinition();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addStateDefinition(s); }

            	    }
            	    break;

            	default :
            	    if ( cnt68 >= 1 ) break loop68;
            	    if (state.backtracking>0) {state.failed=true; return n;}
                        EarlyExitException eee =
                            new EarlyExitException(68, input);
                        throw eee;
                }
                cnt68++;
            } while (true);


            match(input,115,FOLLOW_115_in_stateMachine2550); if (state.failed) return n;

            // USE.g:561:10: (t= transitionDefinition )+
            int cnt69=0;
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==IDENT) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // USE.g:561:11: t= transitionDefinition
            	    {
            	    pushFollow(FOLLOW_transitionDefinition_in_stateMachine2566);
            	    t=transitionDefinition();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.addTransitionDefinition(t); }

            	    }
            	    break;

            	default :
            	    if ( cnt69 >= 1 ) break loop69;
            	    if (state.backtracking>0) {state.failed=true; return n;}
                        EarlyExitException eee =
                            new EarlyExitException(69, input);
                        throw eee;
                }
                cnt69++;
            } while (true);


            match(input,77,FOLLOW_77_in_stateMachine2576); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "stateMachine"



    // $ANTLR start "stateDefinition"
    // USE.g:565:1: stateDefinition returns [ASTStateDefinition n] : sn= IDENT ( COLON stateType= IDENT )? ( LBRACK stateInv= expression RBRACK )? ;
    public final ASTStateDefinition stateDefinition() throws RecognitionException {
        ASTStateDefinition n = null;


        Token sn=null;
        Token stateType=null;
        USEParser.expression_return stateInv =null;


        try {
            // USE.g:565:47: (sn= IDENT ( COLON stateType= IDENT )? ( LBRACK stateInv= expression RBRACK )? )
            // USE.g:566:3: sn= IDENT ( COLON stateType= IDENT )? ( LBRACK stateInv= expression RBRACK )?
            {
            sn=(Token)match(input,IDENT,FOLLOW_IDENT_in_stateDefinition2592); if (state.failed) return n;

            if ( state.backtracking==0 ) {n = new ASTStateDefinition(sn); }

            // USE.g:567:3: ( COLON stateType= IDENT )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==COLON) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // USE.g:567:5: COLON stateType= IDENT
                    {
                    match(input,COLON,FOLLOW_COLON_in_stateDefinition2600); if (state.failed) return n;

                    stateType=(Token)match(input,IDENT,FOLLOW_IDENT_in_stateDefinition2604); if (state.failed) return n;

                    if ( state.backtracking==0 ) {n.setType(stateType); }

                    }
                    break;

            }


            // USE.g:568:3: ( LBRACK stateInv= expression RBRACK )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==LBRACK) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // USE.g:568:5: LBRACK stateInv= expression RBRACK
                    {
                    match(input,LBRACK,FOLLOW_LBRACK_in_stateDefinition2615); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_stateDefinition2621);
                    stateInv=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,RBRACK,FOLLOW_RBRACK_in_stateDefinition2623); if (state.failed) return n;

                    if ( state.backtracking==0 ) {n.setStateInvariant((stateInv!=null?stateInv.n:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "stateDefinition"



    // $ANTLR start "transitionDefinition"
    // USE.g:571:1: transitionDefinition returns [ASTTransitionDefinition n] : source= IDENT ARROW target= IDENT ( LBRACE ( LBRACK pre= expression RBRACK )? (e= event |o= IDENT LPAREN (args= paramList )? RPAREN ) ( LBRACK post= expression RBRACK )? RBRACE )? ;
    public final ASTTransitionDefinition transitionDefinition() throws RecognitionException {
        ASTTransitionDefinition n = null;


        Token source=null;
        Token target=null;
        Token o=null;
        USEParser.expression_return pre =null;

        Token e =null;

        List<ASTVariableDeclaration> args =null;

        USEParser.expression_return post =null;


        try {
            // USE.g:571:57: (source= IDENT ARROW target= IDENT ( LBRACE ( LBRACK pre= expression RBRACK )? (e= event |o= IDENT LPAREN (args= paramList )? RPAREN ) ( LBRACK post= expression RBRACK )? RBRACE )? )
            // USE.g:572:3: source= IDENT ARROW target= IDENT ( LBRACE ( LBRACK pre= expression RBRACK )? (e= event |o= IDENT LPAREN (args= paramList )? RPAREN ) ( LBRACK post= expression RBRACK )? RBRACE )?
            {
            source=(Token)match(input,IDENT,FOLLOW_IDENT_in_transitionDefinition2644); if (state.failed) return n;

            match(input,ARROW,FOLLOW_ARROW_in_transitionDefinition2646); if (state.failed) return n;

            target=(Token)match(input,IDENT,FOLLOW_IDENT_in_transitionDefinition2650); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTTransitionDefinition(source, target); }

            // USE.g:573:5: ( LBRACE ( LBRACK pre= expression RBRACK )? (e= event |o= IDENT LPAREN (args= paramList )? RPAREN ) ( LBRACK post= expression RBRACK )? RBRACE )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==LBRACE) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // USE.g:573:6: LBRACE ( LBRACK pre= expression RBRACK )? (e= event |o= IDENT LPAREN (args= paramList )? RPAREN ) ( LBRACK post= expression RBRACK )? RBRACE
                    {
                    match(input,LBRACE,FOLLOW_LBRACE_in_transitionDefinition2660); if (state.failed) return n;

                    // USE.g:574:7: ( LBRACK pre= expression RBRACK )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==LBRACK) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // USE.g:574:8: LBRACK pre= expression RBRACK
                            {
                            match(input,LBRACK,FOLLOW_LBRACK_in_transitionDefinition2670); if (state.failed) return n;

                            pushFollow(FOLLOW_expression_in_transitionDefinition2674);
                            pre=expression();

                            state._fsp--;
                            if (state.failed) return n;

                            if ( state.backtracking==0 ) { n.setPreCondition((pre!=null?pre.n:null)); }

                            match(input,RBRACK,FOLLOW_RBRACK_in_transitionDefinition2678); if (state.failed) return n;

                            }
                            break;

                    }


                    // USE.g:575:7: (e= event |o= IDENT LPAREN (args= paramList )? RPAREN )
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==69) ) {
                        alt74=1;
                    }
                    else if ( (LA74_0==IDENT) ) {
                        alt74=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 0, input);

                        throw nvae;

                    }
                    switch (alt74) {
                        case 1 :
                            // USE.g:576:11: e= event
                            {
                            pushFollow(FOLLOW_event_in_transitionDefinition2702);
                            e=event();

                            state._fsp--;
                            if (state.failed) return n;

                            if ( state.backtracking==0 ) { n.setEvent(e); }

                            }
                            break;
                        case 2 :
                            // USE.g:577:11: o= IDENT LPAREN (args= paramList )? RPAREN
                            {
                            o=(Token)match(input,IDENT,FOLLOW_IDENT_in_transitionDefinition2718); if (state.failed) return n;

                            if ( state.backtracking==0 ) { n.setOperation(o); }

                            match(input,LPAREN,FOLLOW_LPAREN_in_transitionDefinition2722); if (state.failed) return n;

                            // USE.g:577:50: (args= paramList )?
                            int alt73=2;
                            int LA73_0 = input.LA(1);

                            if ( (LA73_0==LPAREN) ) {
                                alt73=1;
                            }
                            switch (alt73) {
                                case 1 :
                                    // USE.g:577:51: args= paramList
                                    {
                                    pushFollow(FOLLOW_paramList_in_transitionDefinition2727);
                                    args=paramList();

                                    state._fsp--;
                                    if (state.failed) return n;

                                    if ( state.backtracking==0 ) { n.setOperationArgs(args); }

                                    }
                                    break;

                            }


                            match(input,RPAREN,FOLLOW_RPAREN_in_transitionDefinition2734); if (state.failed) return n;

                            }
                            break;

                    }


                    // USE.g:579:7: ( LBRACK post= expression RBRACK )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==LBRACK) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // USE.g:579:8: LBRACK post= expression RBRACK
                            {
                            match(input,LBRACK,FOLLOW_LBRACK_in_transitionDefinition2751); if (state.failed) return n;

                            pushFollow(FOLLOW_expression_in_transitionDefinition2755);
                            post=expression();

                            state._fsp--;
                            if (state.failed) return n;

                            if ( state.backtracking==0 ) { n.setPostCondition((post!=null?post.n:null)); }

                            match(input,RBRACK,FOLLOW_RBRACK_in_transitionDefinition2759); if (state.failed) return n;

                            }
                            break;

                    }


                    match(input,RBRACE,FOLLOW_RBRACE_in_transitionDefinition2767); if (state.failed) return n;

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "transitionDefinition"



    // $ANTLR start "event"
    // USE.g:583:1: event returns [Token t] : tcr= 'create' ;
    public final Token event() throws RecognitionException {
        Token t = null;


        Token tcr=null;

        try {
            // USE.g:583:24: (tcr= 'create' )
            // USE.g:584:5: tcr= 'create'
            {
            tcr=(Token)match(input,69,FOLLOW_69_in_event2789); if (state.failed) return t;

            if ( state.backtracking==0 ) {t = tcr;}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return t;
    }
    // $ANTLR end "event"



    // $ANTLR start "signalDefinition"
    // USE.g:587:1: signalDefinition[boolean isAbstract] returns [ASTSignal n] : keySignal name= IDENT ( LESS idListRes= idList )? ( 'attributes' (a= attributeDefinition )* )? ( 'constraints' (inv= invariantClause )* )? 'end' ;
    public final ASTSignal signalDefinition(boolean isAbstract) throws RecognitionException {
        ASTSignal n = null;


        Token name=null;
        List idListRes =null;

        ASTAttribute a =null;

        ASTInvariantClause inv =null;


        try {
            // USE.g:587:59: ( keySignal name= IDENT ( LESS idListRes= idList )? ( 'attributes' (a= attributeDefinition )* )? ( 'constraints' (inv= invariantClause )* )? 'end' )
            // USE.g:588:5: keySignal name= IDENT ( LESS idListRes= idList )? ( 'attributes' (a= attributeDefinition )* )? ( 'constraints' (inv= invariantClause )* )? 'end'
            {
            pushFollow(FOLLOW_keySignal_in_signalDefinition2809);
            keySignal();

            state._fsp--;
            if (state.failed) return n;

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_signalDefinition2813); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTSignal(name, isAbstract); }

            // USE.g:590:5: ( LESS idListRes= idList )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==LESS) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // USE.g:590:7: LESS idListRes= idList
                    {
                    match(input,LESS,FOLLOW_LESS_in_signalDefinition2828); if (state.failed) return n;

                    pushFollow(FOLLOW_idList_in_signalDefinition2832);
                    idListRes=idList();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.addGenerals(idListRes); }

                    }
                    break;

            }


            // USE.g:591:5: ( 'attributes' (a= attributeDefinition )* )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==63) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // USE.g:591:7: 'attributes' (a= attributeDefinition )*
                    {
                    match(input,63,FOLLOW_63_in_signalDefinition2845); if (state.failed) return n;

                    // USE.g:592:7: (a= attributeDefinition )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==AT||LA78_0==IDENT||LA78_0==58||(LA78_0 >= 61 && LA78_0 <= 62)||LA78_0==79||LA78_0==89||LA78_0==92||(LA78_0 >= 105 && LA78_0 <= 106)) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                    	case 1 :
                    	    // USE.g:592:9: a= attributeDefinition
                    	    {
                    	    pushFollow(FOLLOW_attributeDefinition_in_signalDefinition2858);
                    	    a=attributeDefinition();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addAttribute(a); }

                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);


                    }
                    break;

            }


            // USE.g:594:5: ( 'constraints' (inv= invariantClause )* )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==67) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // USE.g:594:7: 'constraints' (inv= invariantClause )*
                    {
                    match(input,67,FOLLOW_67_in_signalDefinition2879); if (state.failed) return n;

                    // USE.g:595:7: (inv= invariantClause )*
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==AT||LA80_0==IDENT||LA80_0==58||(LA80_0 >= 61 && LA80_0 <= 62)||(LA80_0 >= 79 && LA80_0 <= 80)||LA80_0==89||LA80_0==92||(LA80_0 >= 105 && LA80_0 <= 106)) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // USE.g:596:9: inv= invariantClause
                    	    {
                    	    pushFollow(FOLLOW_invariantClause_in_signalDefinition2899);
                    	    inv=invariantClause();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addInvariantClause(inv); }

                    	    }
                    	    break;

                    	default :
                    	    break loop80;
                        }
                    } while (true);


                    }
                    break;

            }


            match(input,77,FOLLOW_77_in_signalDefinition2923); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "signalDefinition"



    // $ANTLR start "keyUnion"
    // USE.g:602:1: keyUnion :{...}? IDENT ;
    public final void keyUnion() throws RecognitionException {
        try {
            // USE.g:602:9: ({...}? IDENT )
            // USE.g:603:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("union"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyUnion", "input.LT(1).getText().equals(\"union\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyUnion2941); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyUnion"



    // $ANTLR start "keyAssociation"
    // USE.g:605:1: keyAssociation :{...}? IDENT ;
    public final void keyAssociation() throws RecognitionException {
        try {
            // USE.g:605:15: ({...}? IDENT )
            // USE.g:606:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("association"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyAssociation", "input.LT(1).getText().equals(\"association\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyAssociation2955); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyAssociation"



    // $ANTLR start "keyRole"
    // USE.g:608:1: keyRole :{...}? IDENT ;
    public final void keyRole() throws RecognitionException {
        try {
            // USE.g:608:8: ({...}? IDENT )
            // USE.g:609:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("role"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyRole", "input.LT(1).getText().equals(\"role\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyRole2969); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyRole"



    // $ANTLR start "keyComposition"
    // USE.g:611:1: keyComposition :{...}? IDENT ;
    public final void keyComposition() throws RecognitionException {
        try {
            // USE.g:611:15: ({...}? IDENT )
            // USE.g:612:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("composition"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyComposition", "input.LT(1).getText().equals(\"composition\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyComposition2981); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyComposition"



    // $ANTLR start "keyAggregation"
    // USE.g:614:1: keyAggregation :{...}? IDENT ;
    public final void keyAggregation() throws RecognitionException {
        try {
            // USE.g:614:15: ({...}? IDENT )
            // USE.g:615:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("aggregation"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyAggregation", "input.LT(1).getText().equals(\"aggregation\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyAggregation2993); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyAggregation"



    // $ANTLR start "keyClass"
    // USE.g:617:1: keyClass :{...}? IDENT ;
    public final void keyClass() throws RecognitionException {
        try {
            // USE.g:617:9: ({...}? IDENT )
            // USE.g:618:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("class"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyClass", "input.LT(1).getText().equals(\"class\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyClass3007); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyClass"



    // $ANTLR start "keySignal"
    // USE.g:620:1: keySignal :{...}? IDENT ;
    public final void keySignal() throws RecognitionException {
        try {
            // USE.g:620:10: ({...}? IDENT )
            // USE.g:621:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("signal"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keySignal", "input.LT(1).getText().equals(\"signal\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keySignal3019); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keySignal"



    // $ANTLR start "keyDerived"
    // USE.g:623:1: keyDerived :{...}? IDENT ;
    public final void keyDerived() throws RecognitionException {
        try {
            // USE.g:623:11: ({...}? IDENT )
            // USE.g:624:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("derived"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyDerived", "input.LT(1).getText().equals(\"derived\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyDerived3033); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyDerived"



    // $ANTLR start "keyDerive"
    // USE.g:626:1: keyDerive :{...}? IDENT ;
    public final void keyDerive() throws RecognitionException {
        try {
            // USE.g:626:10: ({...}? IDENT )
            // USE.g:627:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("derive"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyDerive", "input.LT(1).getText().equals(\"derive\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyDerive3047); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyDerive"



    // $ANTLR start "keyInit"
    // USE.g:629:1: keyInit :{...}? IDENT ;
    public final void keyInit() throws RecognitionException {
        try {
            // USE.g:629:8: ({...}? IDENT )
            // USE.g:630:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("init"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyInit", "input.LT(1).getText().equals(\"init\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyInit3059); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyInit"



    // $ANTLR start "keyQualifier"
    // USE.g:632:1: keyQualifier :{...}? IDENT ;
    public final void keyQualifier() throws RecognitionException {
        try {
            // USE.g:632:13: ({...}? IDENT )
            // USE.g:633:3: {...}? IDENT
            {
            if ( !((input.LT(1).getText().equals("qualifier"))) ) {
                if (state.backtracking>0) {state.failed=true; return ;}
                throw new FailedPredicateException(input, "keyQualifier", "input.LT(1).getText().equals(\"qualifier\")");
            }

            match(input,IDENT,FOLLOW_IDENT_in_keyQualifier3075); if (state.failed) return ;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "keyQualifier"



    // $ANTLR start "expressionOnly"
    // USE.g:662:1: expressionOnly returns [ASTExpression n] : nExp= expression EOF ;
    public final ASTExpression expressionOnly() throws RecognitionException {
        ASTExpression n = null;


        USEParser.expression_return nExp =null;


        try {
            // USE.g:663:5: (nExp= expression EOF )
            // USE.g:664:5: nExp= expression EOF
            {
            pushFollow(FOLLOW_expression_in_expressionOnly3103);
            nExp=expression();

            state._fsp--;
            if (state.failed) return n;

            match(input,EOF,FOLLOW_EOF_in_expressionOnly3105); if (state.failed) return n;

            if ( state.backtracking==0 ) {n = (nExp!=null?nExp.n:null);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "expressionOnly"


    public static class expression_return extends ParserRuleReturnScope {
        public ASTExpression n;
    };


    // $ANTLR start "expression"
    // USE.g:671:1: expression returns [ASTExpression n] : ( 'let' name= IDENT ( COLON t= type )? EQUAL e1= expression ( COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression )* 'in' )* nCndImplies= conditionalImpliesExpression ;
    public final USEParser.expression_return expression() throws RecognitionException {
        USEParser.expression_return retval = new USEParser.expression_return();
        retval.start = input.LT(1);


        Token name=null;
        ASTType t =null;

        USEParser.expression_return e1 =null;

        ASTExpression nCndImplies =null;


         
          ASTLetExpression prevLet = null, firstLet = null;
          ASTExpression e2;
          Token tok = null;

        try {
            // USE.g:677:5: ( ( 'let' name= IDENT ( COLON t= type )? EQUAL e1= expression ( COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression )* 'in' )* nCndImplies= conditionalImpliesExpression )
            // USE.g:678:5: ( 'let' name= IDENT ( COLON t= type )? EQUAL e1= expression ( COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression )* 'in' )* nCndImplies= conditionalImpliesExpression
            {
            if ( state.backtracking==0 ) { tok = input.LT(1); /* remember start of expression */ }

            // USE.g:679:5: ( 'let' name= IDENT ( COLON t= type )? EQUAL e1= expression ( COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression )* 'in' )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==91) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // USE.g:680:7: 'let' name= IDENT ( COLON t= type )? EQUAL e1= expression ( COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression )* 'in'
            	    {
            	    match(input,91,FOLLOW_91_in_expression3153); if (state.failed) return retval;

            	    name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expression3164); if (state.failed) return retval;

            	    // USE.g:681:18: ( COLON t= type )?
            	    int alt82=2;
            	    int LA82_0 = input.LA(1);

            	    if ( (LA82_0==COLON) ) {
            	        alt82=1;
            	    }
            	    switch (alt82) {
            	        case 1 :
            	            // USE.g:681:20: COLON t= type
            	            {
            	            match(input,COLON,FOLLOW_COLON_in_expression3168); if (state.failed) return retval;

            	            pushFollow(FOLLOW_type_in_expression3172);
            	            t=type();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    match(input,EQUAL,FOLLOW_EQUAL_in_expression3177); if (state.failed) return retval;

            	    pushFollow(FOLLOW_expression_in_expression3181);
            	    e1=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    if ( state.backtracking==0 ) { ASTLetExpression nextLet = new ASTLetExpression(name, t, (e1!=null?e1.n:null));
            	             if ( firstLet == null ) 
            	                 firstLet = nextLet;
            	             if ( prevLet != null ) 
            	                 prevLet.setInExpr(nextLet);
            	             prevLet = nextLet;
            	          }

            	    // USE.g:691:7: ( COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression )*
            	    loop84:
            	    do {
            	        int alt84=2;
            	        int LA84_0 = input.LA(1);

            	        if ( (LA84_0==COMMA) ) {
            	            alt84=1;
            	        }


            	        switch (alt84) {
            	    	case 1 :
            	    	    // USE.g:692:7: COMMA name= IDENT ( COLON t= type )? EQUAL e1= expression
            	    	    {
            	    	    match(input,COMMA,FOLLOW_COMMA_in_expression3219); if (state.failed) return retval;

            	    	    name=(Token)match(input,IDENT,FOLLOW_IDENT_in_expression3231); if (state.failed) return retval;

            	    	    // USE.g:693:20: ( COLON t= type )?
            	    	    int alt83=2;
            	    	    int LA83_0 = input.LA(1);

            	    	    if ( (LA83_0==COLON) ) {
            	    	        alt83=1;
            	    	    }
            	    	    switch (alt83) {
            	    	        case 1 :
            	    	            // USE.g:693:22: COLON t= type
            	    	            {
            	    	            match(input,COLON,FOLLOW_COLON_in_expression3235); if (state.failed) return retval;

            	    	            pushFollow(FOLLOW_type_in_expression3239);
            	    	            t=type();

            	    	            state._fsp--;
            	    	            if (state.failed) return retval;

            	    	            }
            	    	            break;

            	    	    }


            	    	    match(input,EQUAL,FOLLOW_EQUAL_in_expression3244); if (state.failed) return retval;

            	    	    pushFollow(FOLLOW_expression_in_expression3248);
            	    	    e1=expression();

            	    	    state._fsp--;
            	    	    if (state.failed) return retval;

            	    	    if ( state.backtracking==0 ) { ASTLetExpression nextLet = new ASTLetExpression(name, t, (e1!=null?e1.n:null));
            	    	               if ( firstLet == null ) 
            	    	                   firstLet = nextLet;
            	    	               if ( prevLet != null ) 
            	    	                   prevLet.setInExpr(nextLet);
            	    	               prevLet = nextLet;
            	    	            }

            	    	    }
            	    	    break;

            	    	default :
            	    	    break loop84;
            	        }
            	    } while (true);


            	    match(input,86,FOLLOW_86_in_expression3289); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            pushFollow(FOLLOW_conditionalImpliesExpression_in_expression3305);
            nCndImplies=conditionalImpliesExpression();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { if ( nCndImplies != null ) {
                	 retval.n = nCndImplies;
                     retval.n.setStartToken(tok);
                  }
                  
                  if ( prevLet != null ) { 
                     prevLet.setInExpr(retval.n);
                     retval.n = firstLet;
                     retval.n.setStartToken(tok);
                  }
                }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "expression"



    // $ANTLR start "paramList"
    // USE.g:725:1: paramList returns [List<ASTVariableDeclaration> paramList] : LPAREN (v= variableDeclaration ( COMMA v= variableDeclaration )* )? RPAREN ;
    public final List<ASTVariableDeclaration> paramList() throws RecognitionException {
        List<ASTVariableDeclaration> paramList = null;


        ASTVariableDeclaration v =null;


         paramList = new ArrayList<ASTVariableDeclaration>(); 
        try {
            // USE.g:727:5: ( LPAREN (v= variableDeclaration ( COMMA v= variableDeclaration )* )? RPAREN )
            // USE.g:728:5: LPAREN (v= variableDeclaration ( COMMA v= variableDeclaration )* )? RPAREN
            {
            match(input,LPAREN,FOLLOW_LPAREN_in_paramList3338); if (state.failed) return paramList;

            // USE.g:729:5: (v= variableDeclaration ( COMMA v= variableDeclaration )* )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==IDENT) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // USE.g:730:7: v= variableDeclaration ( COMMA v= variableDeclaration )*
                    {
                    pushFollow(FOLLOW_variableDeclaration_in_paramList3355);
                    v=variableDeclaration();

                    state._fsp--;
                    if (state.failed) return paramList;

                    if ( state.backtracking==0 ) { paramList.add(v); }

                    // USE.g:731:7: ( COMMA v= variableDeclaration )*
                    loop86:
                    do {
                        int alt86=2;
                        int LA86_0 = input.LA(1);

                        if ( (LA86_0==COMMA) ) {
                            alt86=1;
                        }


                        switch (alt86) {
                    	case 1 :
                    	    // USE.g:731:9: COMMA v= variableDeclaration
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_paramList3367); if (state.failed) return paramList;

                    	    pushFollow(FOLLOW_variableDeclaration_in_paramList3371);
                    	    v=variableDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return paramList;

                    	    if ( state.backtracking==0 ) { paramList.add(v); }

                    	    }
                    	    break;

                    	default :
                    	    break loop86;
                        }
                    } while (true);


                    }
                    break;

            }


            match(input,RPAREN,FOLLOW_RPAREN_in_paramList3391); if (state.failed) return paramList;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return paramList;
    }
    // $ANTLR end "paramList"



    // $ANTLR start "idList"
    // USE.g:739:1: idList returns [List idList] : id0= IDENT ( COMMA idn= IDENT )* ;
    public final List idList() throws RecognitionException {
        List idList = null;


        Token id0=null;
        Token idn=null;

         idList = new ArrayList(); 
        try {
            // USE.g:741:5: (id0= IDENT ( COMMA idn= IDENT )* )
            // USE.g:742:5: id0= IDENT ( COMMA idn= IDENT )*
            {
            id0=(Token)match(input,IDENT,FOLLOW_IDENT_in_idList3420); if (state.failed) return idList;

            if ( state.backtracking==0 ) { idList.add(id0); }

            // USE.g:743:5: ( COMMA idn= IDENT )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==COMMA) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // USE.g:743:7: COMMA idn= IDENT
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_idList3430); if (state.failed) return idList;

            	    idn=(Token)match(input,IDENT,FOLLOW_IDENT_in_idList3434); if (state.failed) return idList;

            	    if ( state.backtracking==0 ) { idList.add(idn); }

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return idList;
    }
    // $ANTLR end "idList"



    // $ANTLR start "variableDeclaration"
    // USE.g:751:1: variableDeclaration returns [ASTVariableDeclaration n] : name= IDENT COLON t= type ;
    public final ASTVariableDeclaration variableDeclaration() throws RecognitionException {
        ASTVariableDeclaration n = null;


        Token name=null;
        ASTType t =null;


        try {
            // USE.g:752:5: (name= IDENT COLON t= type )
            // USE.g:753:5: name= IDENT COLON t= type
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableDeclaration3465); if (state.failed) return n;

            match(input,COLON,FOLLOW_COLON_in_variableDeclaration3467); if (state.failed) return n;

            pushFollow(FOLLOW_type_in_variableDeclaration3471);
            t=type();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTVariableDeclaration(name, t); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "variableDeclaration"



    // $ANTLR start "conditionalImpliesExpression"
    // USE.g:761:1: conditionalImpliesExpression returns [ASTExpression n] : nCndOrExp= conditionalOrExpression (op= 'implies' n1= conditionalOrExpression )* ;
    public final ASTExpression conditionalImpliesExpression() throws RecognitionException {
        ASTExpression n = null;


        Token op=null;
        ASTExpression nCndOrExp =null;

        ASTExpression n1 =null;


        try {
            // USE.g:762:5: (nCndOrExp= conditionalOrExpression (op= 'implies' n1= conditionalOrExpression )* )
            // USE.g:763:5: nCndOrExp= conditionalOrExpression (op= 'implies' n1= conditionalOrExpression )*
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalImpliesExpression3507);
            nCndOrExp=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nCndOrExp;}

            // USE.g:764:5: (op= 'implies' n1= conditionalOrExpression )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==85) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // USE.g:764:7: op= 'implies' n1= conditionalOrExpression
            	    {
            	    op=(Token)match(input,85,FOLLOW_85_in_conditionalImpliesExpression3520); if (state.failed) return n;

            	    pushFollow(FOLLOW_conditionalOrExpression_in_conditionalImpliesExpression3524);
            	    n1=conditionalOrExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "conditionalImpliesExpression"



    // $ANTLR start "conditionalOrExpression"
    // USE.g:773:1: conditionalOrExpression returns [ASTExpression n] : nCndXorExp= conditionalXOrExpression (op= 'or' n1= conditionalXOrExpression )* ;
    public final ASTExpression conditionalOrExpression() throws RecognitionException {
        ASTExpression n = null;


        Token op=null;
        ASTExpression nCndXorExp =null;

        ASTExpression n1 =null;


        try {
            // USE.g:774:5: (nCndXorExp= conditionalXOrExpression (op= 'or' n1= conditionalXOrExpression )* )
            // USE.g:775:5: nCndXorExp= conditionalXOrExpression (op= 'or' n1= conditionalXOrExpression )*
            {
            pushFollow(FOLLOW_conditionalXOrExpression_in_conditionalOrExpression3569);
            nCndXorExp=conditionalXOrExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nCndXorExp;}

            // USE.g:776:5: (op= 'or' n1= conditionalXOrExpression )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==103) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // USE.g:776:7: op= 'or' n1= conditionalXOrExpression
            	    {
            	    op=(Token)match(input,103,FOLLOW_103_in_conditionalOrExpression3582); if (state.failed) return n;

            	    pushFollow(FOLLOW_conditionalXOrExpression_in_conditionalOrExpression3586);
            	    n1=conditionalXOrExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "conditionalOrExpression"



    // $ANTLR start "conditionalXOrExpression"
    // USE.g:785:1: conditionalXOrExpression returns [ASTExpression n] : nCndAndExp= conditionalAndExpression (op= 'xor' n1= conditionalAndExpression )* ;
    public final ASTExpression conditionalXOrExpression() throws RecognitionException {
        ASTExpression n = null;


        Token op=null;
        ASTExpression nCndAndExp =null;

        ASTExpression n1 =null;


        try {
            // USE.g:786:5: (nCndAndExp= conditionalAndExpression (op= 'xor' n1= conditionalAndExpression )* )
            // USE.g:787:5: nCndAndExp= conditionalAndExpression (op= 'xor' n1= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalXOrExpression3630);
            nCndAndExp=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nCndAndExp;}

            // USE.g:788:5: (op= 'xor' n1= conditionalAndExpression )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==118) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // USE.g:788:7: op= 'xor' n1= conditionalAndExpression
            	    {
            	    op=(Token)match(input,118,FOLLOW_118_in_conditionalXOrExpression3643); if (state.failed) return n;

            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalXOrExpression3647);
            	    n1=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "conditionalXOrExpression"



    // $ANTLR start "conditionalAndExpression"
    // USE.g:797:1: conditionalAndExpression returns [ASTExpression n] : nEqExp= equalityExpression (op= 'and' n1= equalityExpression )* ;
    public final ASTExpression conditionalAndExpression() throws RecognitionException {
        ASTExpression n = null;


        Token op=null;
        ASTExpression nEqExp =null;

        ASTExpression n1 =null;


        try {
            // USE.g:798:5: (nEqExp= equalityExpression (op= 'and' n1= equalityExpression )* )
            // USE.g:799:5: nEqExp= equalityExpression (op= 'and' n1= equalityExpression )*
            {
            pushFollow(FOLLOW_equalityExpression_in_conditionalAndExpression3691);
            nEqExp=equalityExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nEqExp;}

            // USE.g:800:5: (op= 'and' n1= equalityExpression )*
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==60) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // USE.g:800:7: op= 'and' n1= equalityExpression
            	    {
            	    op=(Token)match(input,60,FOLLOW_60_in_conditionalAndExpression3704); if (state.failed) return n;

            	    pushFollow(FOLLOW_equalityExpression_in_conditionalAndExpression3708);
            	    n1=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "conditionalAndExpression"



    // $ANTLR start "equalityExpression"
    // USE.g:809:1: equalityExpression returns [ASTExpression n] : nRelExp= relationalExpression ( ( EQUAL | NOT_EQUAL ) n1= relationalExpression )* ;
    public final ASTExpression equalityExpression() throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nRelExp =null;

        ASTExpression n1 =null;


         Token op = null; 
        try {
            // USE.g:811:5: (nRelExp= relationalExpression ( ( EQUAL | NOT_EQUAL ) n1= relationalExpression )* )
            // USE.g:812:5: nRelExp= relationalExpression ( ( EQUAL | NOT_EQUAL ) n1= relationalExpression )*
            {
            pushFollow(FOLLOW_relationalExpression_in_equalityExpression3756);
            nRelExp=relationalExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nRelExp;}

            // USE.g:813:5: ( ( EQUAL | NOT_EQUAL ) n1= relationalExpression )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==EQUAL||LA93_0==NOT_EQUAL) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // USE.g:813:7: ( EQUAL | NOT_EQUAL ) n1= relationalExpression
            	    {
            	    if ( state.backtracking==0 ) { op = input.LT(1); }

            	    if ( input.LA(1)==EQUAL||input.LA(1)==NOT_EQUAL ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return n;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_relationalExpression_in_equalityExpression3785);
            	    n1=relationalExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "equalityExpression"



    // $ANTLR start "relationalExpression"
    // USE.g:823:1: relationalExpression returns [ASTExpression n] : nAddiExp= additiveExpression ( ( LESS | GREATER | LESS_EQUAL | GREATER_EQUAL ) n1= additiveExpression )* ;
    public final ASTExpression relationalExpression() throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nAddiExp =null;

        ASTExpression n1 =null;


         Token op = null; 
        try {
            // USE.g:825:5: (nAddiExp= additiveExpression ( ( LESS | GREATER | LESS_EQUAL | GREATER_EQUAL ) n1= additiveExpression )* )
            // USE.g:826:5: nAddiExp= additiveExpression ( ( LESS | GREATER | LESS_EQUAL | GREATER_EQUAL ) n1= additiveExpression )*
            {
            pushFollow(FOLLOW_additiveExpression_in_relationalExpression3834);
            nAddiExp=additiveExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nAddiExp;}

            // USE.g:827:5: ( ( LESS | GREATER | LESS_EQUAL | GREATER_EQUAL ) n1= additiveExpression )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( ((LA94_0 >= GREATER && LA94_0 <= GREATER_EQUAL)||(LA94_0 >= LESS && LA94_0 <= LESS_EQUAL)) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // USE.g:827:7: ( LESS | GREATER | LESS_EQUAL | GREATER_EQUAL ) n1= additiveExpression
            	    {
            	    if ( state.backtracking==0 ) { op = input.LT(1); }

            	    if ( (input.LA(1) >= GREATER && input.LA(1) <= GREATER_EQUAL)||(input.LA(1) >= LESS && input.LA(1) <= LESS_EQUAL) ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return n;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_additiveExpression_in_relationalExpression3870);
            	    n1=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "relationalExpression"



    // $ANTLR start "additiveExpression"
    // USE.g:837:1: additiveExpression returns [ASTExpression n] : nMulExp= multiplicativeExpression ( ( PLUS | MINUS ) n1= multiplicativeExpression )* ;
    public final ASTExpression additiveExpression() throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nMulExp =null;

        ASTExpression n1 =null;


         Token op = null; 
        try {
            // USE.g:839:5: (nMulExp= multiplicativeExpression ( ( PLUS | MINUS ) n1= multiplicativeExpression )* )
            // USE.g:840:5: nMulExp= multiplicativeExpression ( ( PLUS | MINUS ) n1= multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3920);
            nMulExp=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {n = nMulExp;}

            // USE.g:841:5: ( ( PLUS | MINUS ) n1= multiplicativeExpression )*
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);

                if ( (LA95_0==MINUS||LA95_0==PLUS) ) {
                    alt95=1;
                }


                switch (alt95) {
            	case 1 :
            	    // USE.g:841:7: ( PLUS | MINUS ) n1= multiplicativeExpression
            	    {
            	    if ( state.backtracking==0 ) { op = input.LT(1); }

            	    if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return n;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3948);
            	    n1=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop95;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "additiveExpression"



    // $ANTLR start "multiplicativeExpression"
    // USE.g:852:1: multiplicativeExpression returns [ASTExpression n] : nUnExp= unaryExpression ( ( STAR | SLASH | 'div' ) n1= unaryExpression )* ;
    public final ASTExpression multiplicativeExpression() throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nUnExp =null;

        ASTExpression n1 =null;


         Token op = null; 
        try {
            // USE.g:854:5: (nUnExp= unaryExpression ( ( STAR | SLASH | 'div' ) n1= unaryExpression )* )
            // USE.g:855:5: nUnExp= unaryExpression ( ( STAR | SLASH | 'div' ) n1= unaryExpression )*
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression3998);
            nUnExp=unaryExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = nUnExp;}

            // USE.g:856:5: ( ( STAR | SLASH | 'div' ) n1= unaryExpression )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==SLASH||LA96_0==STAR||LA96_0==74) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // USE.g:856:7: ( STAR | SLASH | 'div' ) n1= unaryExpression
            	    {
            	    if ( state.backtracking==0 ) { op = input.LT(1); }

            	    if ( input.LA(1)==SLASH||input.LA(1)==STAR||input.LA(1)==74 ) {
            	        input.consume();
            	        state.errorRecovery=false;
            	        state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return n;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression4030);
            	    n1=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = new ASTBinaryExpression(op, n, n1); }

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "multiplicativeExpression"



    // $ANTLR start "unaryExpression"
    // USE.g:868:1: unaryExpression returns [ASTExpression n] : ( ( ( 'not' | MINUS | PLUS ) nUnExp= unaryExpression ) |nPosExp= postfixExpression );
    public final ASTExpression unaryExpression() throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nUnExp =null;

        ASTExpression nPosExp =null;


         Token op = null; 
        try {
            // USE.g:870:7: ( ( ( 'not' | MINUS | PLUS ) nUnExp= unaryExpression ) |nPosExp= postfixExpression )
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==MINUS||LA97_0==PLUS||LA97_0==94) ) {
                alt97=1;
            }
            else if ( (LA97_0==AT||LA97_0==HASH||(LA97_0 >= IDENT && LA97_0 <= INT)||LA97_0==LPAREN||LA97_0==REAL||(LA97_0 >= STAR && LA97_0 <= STRING)||(LA97_0 >= 45 && LA97_0 <= 46)||LA97_0==48||(LA97_0 >= 50 && LA97_0 <= 51)||LA97_0==53||LA97_0==55||LA97_0==81||LA97_0==84||LA97_0==90||(LA97_0 >= 95 && LA97_0 <= 101)||(LA97_0 >= 109 && LA97_0 <= 110)||LA97_0==116) ) {
                alt97=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 97, 0, input);

                throw nvae;

            }
            switch (alt97) {
                case 1 :
                    // USE.g:871:7: ( ( 'not' | MINUS | PLUS ) nUnExp= unaryExpression )
                    {
                    // USE.g:871:7: ( ( 'not' | MINUS | PLUS ) nUnExp= unaryExpression )
                    // USE.g:871:9: ( 'not' | MINUS | PLUS ) nUnExp= unaryExpression
                    {
                    if ( state.backtracking==0 ) { op = input.LT(1); }

                    if ( input.LA(1)==MINUS||input.LA(1)==PLUS||input.LA(1)==94 ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression4116);
                    nUnExp=unaryExpression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTUnaryExpression(op, nUnExp); }

                    }


                    }
                    break;
                case 2 :
                    // USE.g:875:7: nPosExp= postfixExpression
                    {
                    pushFollow(FOLLOW_postfixExpression_in_unaryExpression4136);
                    nPosExp=postfixExpression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nPosExp; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "unaryExpression"



    // $ANTLR start "postfixExpression"
    // USE.g:883:1: postfixExpression returns [ASTExpression n] : nPrimExp= primaryExpression ( ( ARROW | DOT ) nPc= propertyCall[$n, arrow] )* ;
    public final ASTExpression postfixExpression() throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nPrimExp =null;

        ASTExpression nPc =null;


         boolean arrow = false; 
        try {
            // USE.g:885:5: (nPrimExp= primaryExpression ( ( ARROW | DOT ) nPc= propertyCall[$n, arrow] )* )
            // USE.g:886:5: nPrimExp= primaryExpression ( ( ARROW | DOT ) nPc= propertyCall[$n, arrow] )*
            {
            pushFollow(FOLLOW_primaryExpression_in_postfixExpression4169);
            nPrimExp=primaryExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = nPrimExp; }

            // USE.g:887:5: ( ( ARROW | DOT ) nPc= propertyCall[$n, arrow] )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==DOT) ) {
                    int LA99_2 = input.LA(2);

                    if ( (LA99_2==IDENT) ) {
                        int LA99_4 = input.LA(3);

                        if ( (LA99_4==EOF||(LA99_4 >= ARROW && LA99_4 <= AT)||LA99_4==BAR||(LA99_4 >= COMMA && LA99_4 <= EQUAL)||(LA99_4 >= GREATER && LA99_4 <= GREATER_EQUAL)||LA99_4==IDENT||(LA99_4 >= LBRACE && LA99_4 <= MINUS)||(LA99_4 >= NOT_EQUAL && LA99_4 <= PLUS)||(LA99_4 >= RBRACE && LA99_4 <= RBRACK)||(LA99_4 >= RPAREN && LA99_4 <= SLASH)||LA99_4==STAR||LA99_4==58||(LA99_4 >= 60 && LA99_4 <= 63)||(LA99_4 >= 67 && LA99_4 <= 68)||(LA99_4 >= 74 && LA99_4 <= 80)||(LA99_4 >= 85 && LA99_4 <= 86)||LA99_4==89||(LA99_4 >= 102 && LA99_4 <= 106)||LA99_4==108||LA99_4==111||(LA99_4 >= 113 && LA99_4 <= 114)||LA99_4==118) ) {
                            alt99=1;
                        }


                    }
                    else if ( (LA99_2==90||LA99_2==96||(LA99_2 >= 98 && LA99_2 <= 100)||(LA99_2 >= 109 && LA99_2 <= 110)) ) {
                        alt99=1;
                    }


                }
                else if ( (LA99_0==ARROW) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // USE.g:888:6: ( ARROW | DOT ) nPc= propertyCall[$n, arrow]
            	    {
            	    // USE.g:888:6: ( ARROW | DOT )
            	    int alt98=2;
            	    int LA98_0 = input.LA(1);

            	    if ( (LA98_0==ARROW) ) {
            	        alt98=1;
            	    }
            	    else if ( (LA98_0==DOT) ) {
            	        alt98=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return n;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 98, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt98) {
            	        case 1 :
            	            // USE.g:888:8: ARROW
            	            {
            	            match(input,ARROW,FOLLOW_ARROW_in_postfixExpression4187); if (state.failed) return n;

            	            if ( state.backtracking==0 ) { arrow = true; }

            	            }
            	            break;
            	        case 2 :
            	            // USE.g:888:34: DOT
            	            {
            	            match(input,DOT,FOLLOW_DOT_in_postfixExpression4193); if (state.failed) return n;

            	            if ( state.backtracking==0 ) { arrow = false; }

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_propertyCall_in_postfixExpression4204);
            	    nPc=propertyCall(n, arrow);

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n = nPc; }

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "postfixExpression"



    // $ANTLR start "primaryExpression"
    // USE.g:904:1: primaryExpression returns [ASTExpression n] : (nLit= literal |nOr= objectReference |nPc= propertyCall[null, false] | LPAREN nExp= expression RPAREN |nIfExp= ifExpression |id1= IDENT DOT 'allInstances' ( AT 'pre' )? ( LPAREN RPAREN )? |id2= IDENT DOT 'byUseId' ( LPAREN idExp= expression RPAREN ) ( AT 'pre' )? );
    public final ASTExpression primaryExpression() throws RecognitionException {
        ASTExpression n = null;


        Token id1=null;
        Token id2=null;
        ASTExpression nLit =null;

        ASTExpression nOr =null;

        ASTExpression nPc =null;

        USEParser.expression_return nExp =null;

        ASTExpression nIfExp =null;

        USEParser.expression_return idExp =null;


        try {
            // USE.g:905:7: (nLit= literal |nOr= objectReference |nPc= propertyCall[null, false] | LPAREN nExp= expression RPAREN |nIfExp= ifExpression |id1= IDENT DOT 'allInstances' ( AT 'pre' )? ( LPAREN RPAREN )? |id2= IDENT DOT 'byUseId' ( LPAREN idExp= expression RPAREN ) ( AT 'pre' )? )
            int alt103=7;
            switch ( input.LA(1) ) {
            case HASH:
            case INT:
            case REAL:
            case STAR:
            case STRING:
            case 45:
            case 46:
            case 48:
            case 50:
            case 51:
            case 53:
            case 55:
            case 81:
            case 95:
            case 97:
            case 101:
            case 116:
                {
                alt103=1;
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case COLON_COLON:
                    {
                    alt103=1;
                    }
                    break;
                case EOF:
                case ARROW:
                case AT:
                case BAR:
                case COMMA:
                case DOTDOT:
                case EQUAL:
                case GREATER:
                case GREATER_EQUAL:
                case IDENT:
                case LBRACE:
                case LBRACK:
                case LESS:
                case LESS_EQUAL:
                case LPAREN:
                case MINUS:
                case NOT_EQUAL:
                case PLUS:
                case RBRACE:
                case RBRACK:
                case RPAREN:
                case SEMI:
                case SLASH:
                case STAR:
                case 58:
                case 60:
                case 61:
                case 62:
                case 63:
                case 67:
                case 68:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 79:
                case 80:
                case 85:
                case 86:
                case 89:
                case 102:
                case 103:
                case 104:
                case 105:
                case 106:
                case 108:
                case 111:
                case 113:
                case 114:
                case 118:
                    {
                    alt103=3;
                    }
                    break;
                case DOT:
                    {
                    switch ( input.LA(3) ) {
                    case 59:
                        {
                        alt103=6;
                        }
                        break;
                    case 66:
                        {
                        alt103=7;
                        }
                        break;
                    case IDENT:
                    case 90:
                    case 96:
                    case 98:
                    case 99:
                    case 100:
                    case 109:
                    case 110:
                        {
                        alt103=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return n;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 103, 7, input);

                        throw nvae;

                    }

                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 2, input);

                    throw nvae;

                }

                }
                break;
            case AT:
                {
                alt103=2;
                }
                break;
            case 90:
            case 96:
            case 98:
            case 99:
            case 100:
            case 109:
            case 110:
                {
                alt103=3;
                }
                break;
            case LPAREN:
                {
                alt103=4;
                }
                break;
            case 84:
                {
                alt103=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }

            switch (alt103) {
                case 1 :
                    // USE.g:906:7: nLit= literal
                    {
                    pushFollow(FOLLOW_literal_in_primaryExpression4244);
                    nLit=literal();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nLit; }

                    }
                    break;
                case 2 :
                    // USE.g:907:7: nOr= objectReference
                    {
                    pushFollow(FOLLOW_objectReference_in_primaryExpression4258);
                    nOr=objectReference();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nOr; }

                    }
                    break;
                case 3 :
                    // USE.g:908:7: nPc= propertyCall[null, false]
                    {
                    pushFollow(FOLLOW_propertyCall_in_primaryExpression4270);
                    nPc=propertyCall(null, false);

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nPc; }

                    }
                    break;
                case 4 :
                    // USE.g:909:7: LPAREN nExp= expression RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_primaryExpression4281); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_primaryExpression4285);
                    nExp=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,RPAREN,FOLLOW_RPAREN_in_primaryExpression4287); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (nExp!=null?nExp.n:null); }

                    }
                    break;
                case 5 :
                    // USE.g:910:7: nIfExp= ifExpression
                    {
                    pushFollow(FOLLOW_ifExpression_in_primaryExpression4299);
                    nIfExp=ifExpression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nIfExp; }

                    }
                    break;
                case 6 :
                    // USE.g:911:7: id1= IDENT DOT 'allInstances' ( AT 'pre' )? ( LPAREN RPAREN )?
                    {
                    id1=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression4311); if (state.failed) return n;

                    match(input,DOT,FOLLOW_DOT_in_primaryExpression4313); if (state.failed) return n;

                    match(input,59,FOLLOW_59_in_primaryExpression4315); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTAllInstancesExpression(id1); }

                    // USE.g:913:9: ( AT 'pre' )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==AT) ) {
                        int LA100_1 = input.LA(2);

                        if ( (LA100_1==106) ) {
                            alt100=1;
                        }
                    }
                    switch (alt100) {
                        case 1 :
                            // USE.g:913:11: AT 'pre'
                            {
                            match(input,AT,FOLLOW_AT_in_primaryExpression4338); if (state.failed) return n;

                            match(input,106,FOLLOW_106_in_primaryExpression4340); if (state.failed) return n;

                            if ( state.backtracking==0 ) { n.setIsPre(); }

                            }
                            break;

                    }


                    // USE.g:914:9: ( LPAREN RPAREN )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==LPAREN) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // USE.g:914:11: LPAREN RPAREN
                            {
                            match(input,LPAREN,FOLLOW_LPAREN_in_primaryExpression4358); if (state.failed) return n;

                            match(input,RPAREN,FOLLOW_RPAREN_in_primaryExpression4360); if (state.failed) return n;

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // USE.g:915:7: id2= IDENT DOT 'byUseId' ( LPAREN idExp= expression RPAREN ) ( AT 'pre' )?
                    {
                    id2=(Token)match(input,IDENT,FOLLOW_IDENT_in_primaryExpression4373); if (state.failed) return n;

                    match(input,DOT,FOLLOW_DOT_in_primaryExpression4375); if (state.failed) return n;

                    match(input,66,FOLLOW_66_in_primaryExpression4377); if (state.failed) return n;

                    // USE.g:915:31: ( LPAREN idExp= expression RPAREN )
                    // USE.g:915:33: LPAREN idExp= expression RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_primaryExpression4381); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_primaryExpression4385);
                    idExp=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,RPAREN,FOLLOW_RPAREN_in_primaryExpression4387); if (state.failed) return n;

                    }


                    if ( state.backtracking==0 ) { n = new ASTObjectByUseIdExpression(id2, (idExp!=null?idExp.n:null)); }

                    // USE.g:917:7: ( AT 'pre' )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==AT) ) {
                        int LA102_1 = input.LA(2);

                        if ( (LA102_1==106) ) {
                            alt102=1;
                        }
                    }
                    switch (alt102) {
                        case 1 :
                            // USE.g:917:9: AT 'pre'
                            {
                            match(input,AT,FOLLOW_AT_in_primaryExpression4407); if (state.failed) return n;

                            match(input,106,FOLLOW_106_in_primaryExpression4409); if (state.failed) return n;

                            if ( state.backtracking==0 ) { n.setIsPre(); }

                            }
                            break;

                    }


                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "primaryExpression"



    // $ANTLR start "objectReference"
    // USE.g:921:1: objectReference returns [ASTExpression n] : AT objectName= IDENT ;
    public final ASTExpression objectReference() throws RecognitionException {
        ASTExpression n = null;


        Token objectName=null;

        try {
            // USE.g:922:3: ( AT objectName= IDENT )
            // USE.g:923:3: AT objectName= IDENT
            {
            match(input,AT,FOLLOW_AT_in_objectReference4435); if (state.failed) return n;

            objectName=(Token)match(input,IDENT,FOLLOW_IDENT_in_objectReference4443); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTObjectReferenceExpression(objectName); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "objectReference"



    // $ANTLR start "propertyCall"
    // USE.g:937:1: propertyCall[ASTExpression source, boolean followsArrow] returns [ASTExpression n] : ({...}?{...}?nExpQuery= queryExpression[source] |nExpIterate= iterateExpression[source] |nExpOperation= operationExpression[source, followsArrow] |nExpType= typeExpression[source, followsArrow] |nExpInState= inStateExpression[source, followsArrow] );
    public final ASTExpression propertyCall(ASTExpression source, boolean followsArrow) throws RecognitionException {
        ASTExpression n = null;


        ASTExpression nExpQuery =null;

        ASTExpression nExpIterate =null;

        USEParser.operationExpression_return nExpOperation =null;

        ASTTypeArgExpression nExpType =null;

        ASTInStateExpression nExpInState =null;


        try {
            // USE.g:938:7: ({...}?{...}?nExpQuery= queryExpression[source] |nExpIterate= iterateExpression[source] |nExpOperation= operationExpression[source, followsArrow] |nExpType= typeExpression[source, followsArrow] |nExpInState= inStateExpression[source, followsArrow] )
            int alt104=5;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA104_1 = input.LA(2);

                if ( (((( org.tzi.use.parser.base.ParserHelper.isQueryIdent(input.LT(1)) )&&( org.tzi.use.parser.base.ParserHelper.isQueryIdent(input.LT(1)) ))&&( input.LA(2) == LPAREN ))) ) {
                    alt104=1;
                }
                else if ( (true) ) {
                    alt104=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 1, input);

                    throw nvae;

                }
                }
                break;
            case 90:
                {
                alt104=2;
                }
                break;
            case 96:
            case 99:
            case 100:
            case 109:
            case 110:
                {
                alt104=4;
                }
                break;
            case 98:
                {
                alt104=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }

            switch (alt104) {
                case 1 :
                    // USE.g:942:7: {...}?{...}?nExpQuery= queryExpression[source]
                    {
                    if ( !(( org.tzi.use.parser.base.ParserHelper.isQueryIdent(input.LT(1)) )) ) {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        throw new FailedPredicateException(input, "propertyCall", " org.tzi.use.parser.base.ParserHelper.isQueryIdent(input.LT(1)) ");
                    }

                    if ( !(( input.LA(2) == LPAREN )) ) {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        throw new FailedPredicateException(input, "propertyCall", " input.LA(2) == LPAREN ");
                    }

                    pushFollow(FOLLOW_queryExpression_in_propertyCall4508);
                    nExpQuery=queryExpression(source);

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nExpQuery; }

                    }
                    break;
                case 2 :
                    // USE.g:945:7: nExpIterate= iterateExpression[source]
                    {
                    pushFollow(FOLLOW_iterateExpression_in_propertyCall4521);
                    nExpIterate=iterateExpression(source);

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nExpIterate; }

                    }
                    break;
                case 3 :
                    // USE.g:946:7: nExpOperation= operationExpression[source, followsArrow]
                    {
                    pushFollow(FOLLOW_operationExpression_in_propertyCall4534);
                    nExpOperation=operationExpression(source, followsArrow);

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (nExpOperation!=null?nExpOperation.n:null); }

                    }
                    break;
                case 4 :
                    // USE.g:947:7: nExpType= typeExpression[source, followsArrow]
                    {
                    pushFollow(FOLLOW_typeExpression_in_propertyCall4547);
                    nExpType=typeExpression(source, followsArrow);

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nExpType; }

                    }
                    break;
                case 5 :
                    // USE.g:948:7: nExpInState= inStateExpression[source, followsArrow]
                    {
                    pushFollow(FOLLOW_inStateExpression_in_propertyCall4560);
                    nExpInState=inStateExpression(source, followsArrow);

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nExpInState; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "propertyCall"



    // $ANTLR start "queryExpression"
    // USE.g:957:1: queryExpression[ASTExpression range] returns [ASTExpression n] : op= IDENT LPAREN (decls= elemVarsDeclaration BAR )? nExp= expression RPAREN ;
    public final ASTExpression queryExpression(ASTExpression range) throws RecognitionException {
        ASTExpression n = null;


        Token op=null;
        ASTElemVarsDeclaration decls =null;

        USEParser.expression_return nExp =null;


        ASTElemVarsDeclaration decl = new ASTElemVarsDeclaration(); 
        try {
            // USE.g:958:69: (op= IDENT LPAREN (decls= elemVarsDeclaration BAR )? nExp= expression RPAREN )
            // USE.g:959:5: op= IDENT LPAREN (decls= elemVarsDeclaration BAR )? nExp= expression RPAREN
            {
            op=(Token)match(input,IDENT,FOLLOW_IDENT_in_queryExpression4595); if (state.failed) return n;

            match(input,LPAREN,FOLLOW_LPAREN_in_queryExpression4602); if (state.failed) return n;

            // USE.g:961:5: (decls= elemVarsDeclaration BAR )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==IDENT) ) {
                int LA105_1 = input.LA(2);

                if ( ((LA105_1 >= BAR && LA105_1 <= COLON)||LA105_1==COMMA) ) {
                    alt105=1;
                }
            }
            switch (alt105) {
                case 1 :
                    // USE.g:961:7: decls= elemVarsDeclaration BAR
                    {
                    pushFollow(FOLLOW_elemVarsDeclaration_in_queryExpression4613);
                    decls=elemVarsDeclaration();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) {decl = decls;}

                    match(input,BAR,FOLLOW_BAR_in_queryExpression4617); if (state.failed) return n;

                    }
                    break;

            }


            pushFollow(FOLLOW_expression_in_queryExpression4628);
            nExp=expression();

            state._fsp--;
            if (state.failed) return n;

            match(input,RPAREN,FOLLOW_RPAREN_in_queryExpression4634); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTQueryExpression(op, range, decl, (nExp!=null?nExp.n:null)); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "queryExpression"



    // $ANTLR start "iterateExpression"
    // USE.g:975:1: iterateExpression[ASTExpression range] returns [ASTExpression n] : i= 'iterate' LPAREN decls= elemVarsDeclaration SEMI init= variableInitialization BAR nExp= expression RPAREN ;
    public final ASTExpression iterateExpression(ASTExpression range) throws RecognitionException {
        ASTExpression n = null;


        Token i=null;
        ASTElemVarsDeclaration decls =null;

        ASTVariableInitialization init =null;

        USEParser.expression_return nExp =null;


        try {
            // USE.g:975:65: (i= 'iterate' LPAREN decls= elemVarsDeclaration SEMI init= variableInitialization BAR nExp= expression RPAREN )
            // USE.g:976:5: i= 'iterate' LPAREN decls= elemVarsDeclaration SEMI init= variableInitialization BAR nExp= expression RPAREN
            {
            i=(Token)match(input,90,FOLLOW_90_in_iterateExpression4666); if (state.failed) return n;

            match(input,LPAREN,FOLLOW_LPAREN_in_iterateExpression4672); if (state.failed) return n;

            pushFollow(FOLLOW_elemVarsDeclaration_in_iterateExpression4680);
            decls=elemVarsDeclaration();

            state._fsp--;
            if (state.failed) return n;

            match(input,SEMI,FOLLOW_SEMI_in_iterateExpression4682); if (state.failed) return n;

            pushFollow(FOLLOW_variableInitialization_in_iterateExpression4690);
            init=variableInitialization();

            state._fsp--;
            if (state.failed) return n;

            match(input,BAR,FOLLOW_BAR_in_iterateExpression4692); if (state.failed) return n;

            pushFollow(FOLLOW_expression_in_iterateExpression4700);
            nExp=expression();

            state._fsp--;
            if (state.failed) return n;

            match(input,RPAREN,FOLLOW_RPAREN_in_iterateExpression4706); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTIterateExpression(i, range, decls, init, (nExp!=null?nExp.n:null)); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "iterateExpression"


    public static class operationExpression_return extends ParserRuleReturnScope {
        public ASTOperationExpression n;
    };


    // $ANTLR start "operationExpression"
    // USE.g:997:1: operationExpression[ASTExpression source, boolean followsArrow] returns [ASTOperationExpression n] : name= IDENT ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK )? )? ( AT 'pre' )? ( LPAREN (e= expression ( COMMA e= expression )* )? RPAREN )? ;
    public final USEParser.operationExpression_return operationExpression(ASTExpression source, boolean followsArrow) throws RecognitionException {
        USEParser.operationExpression_return retval = new USEParser.operationExpression_return();
        retval.start = input.LT(1);


        Token name=null;
        USEParser.expression_return rolename =null;

        USEParser.expression_return e =null;


        try {
            // USE.g:999:5: (name= IDENT ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK )? )? ( AT 'pre' )? ( LPAREN (e= expression ( COMMA e= expression )* )? RPAREN )? )
            // USE.g:1000:5: name= IDENT ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK )? )? ( AT 'pre' )? ( LPAREN (e= expression ( COMMA e= expression )* )? RPAREN )?
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_operationExpression4750); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n = new ASTOperationExpression(name, source, followsArrow); }

            // USE.g:1006:5: ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK )? )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==LBRACK) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // USE.g:1006:7: LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK )?
                    {
                    match(input,LBRACK,FOLLOW_LBRACK_in_operationExpression4772); if (state.failed) return retval;

                    pushFollow(FOLLOW_expression_in_operationExpression4785);
                    rolename=expression();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.n.addExplicitRolenameOrQualifier((rolename!=null?rolename.n:null)); }

                    // USE.g:1008:9: ( COMMA rolename= expression )*
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==COMMA) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    // USE.g:1008:10: COMMA rolename= expression
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_operationExpression4798); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_expression_in_operationExpression4802);
                    	    rolename=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    if ( state.backtracking==0 ) { retval.n.addExplicitRolenameOrQualifier((rolename!=null?rolename.n:null)); }

                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);


                    match(input,RBRACK,FOLLOW_RBRACK_in_operationExpression4814); if (state.failed) return retval;

                    // USE.g:1011:7: ( LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==LBRACK) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // USE.g:1011:9: LBRACK rolename= expression ( COMMA rolename= expression )* RBRACK
                            {
                            match(input,LBRACK,FOLLOW_LBRACK_in_operationExpression4831); if (state.failed) return retval;

                            pushFollow(FOLLOW_expression_in_operationExpression4846);
                            rolename=expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            if ( state.backtracking==0 ) { retval.n.addQualifier((rolename!=null?rolename.n:null)); }

                            // USE.g:1013:11: ( COMMA rolename= expression )*
                            loop107:
                            do {
                                int alt107=2;
                                int LA107_0 = input.LA(1);

                                if ( (LA107_0==COMMA) ) {
                                    alt107=1;
                                }


                                switch (alt107) {
                            	case 1 :
                            	    // USE.g:1013:12: COMMA rolename= expression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_operationExpression4861); if (state.failed) return retval;

                            	    pushFollow(FOLLOW_expression_in_operationExpression4865);
                            	    rolename=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    if ( state.backtracking==0 ) { retval.n.addQualifier((rolename!=null?rolename.n:null)); }

                            	    }
                            	    break;

                            	default :
                            	    break loop107;
                                }
                            } while (true);


                            match(input,RBRACK,FOLLOW_RBRACK_in_operationExpression4879); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }


            // USE.g:1018:5: ( AT 'pre' )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==AT) ) {
                int LA110_1 = input.LA(2);

                if ( (LA110_1==106) ) {
                    alt110=1;
                }
            }
            switch (alt110) {
                case 1 :
                    // USE.g:1018:7: AT 'pre'
                    {
                    match(input,AT,FOLLOW_AT_in_operationExpression4904); if (state.failed) return retval;

                    match(input,106,FOLLOW_106_in_operationExpression4906); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.n.setIsPre(); }

                    }
                    break;

            }


            // USE.g:1020:5: ( LPAREN (e= expression ( COMMA e= expression )* )? RPAREN )?
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==LPAREN) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    // USE.g:1021:7: LPAREN (e= expression ( COMMA e= expression )* )? RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_operationExpression4931); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.n.hasParentheses(); }

                    // USE.g:1022:7: (e= expression ( COMMA e= expression )* )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==AT||LA112_0==HASH||(LA112_0 >= IDENT && LA112_0 <= INT)||(LA112_0 >= LPAREN && LA112_0 <= MINUS)||LA112_0==PLUS||LA112_0==REAL||(LA112_0 >= STAR && LA112_0 <= STRING)||(LA112_0 >= 45 && LA112_0 <= 46)||LA112_0==48||(LA112_0 >= 50 && LA112_0 <= 51)||LA112_0==53||LA112_0==55||LA112_0==81||LA112_0==84||(LA112_0 >= 90 && LA112_0 <= 91)||(LA112_0 >= 94 && LA112_0 <= 101)||(LA112_0 >= 109 && LA112_0 <= 110)||LA112_0==116) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // USE.g:1023:7: e= expression ( COMMA e= expression )*
                            {
                            pushFollow(FOLLOW_expression_in_operationExpression4952);
                            e=expression();

                            state._fsp--;
                            if (state.failed) return retval;

                            if ( state.backtracking==0 ) { retval.n.addArg((e!=null?e.n:null)); }

                            // USE.g:1024:7: ( COMMA e= expression )*
                            loop111:
                            do {
                                int alt111=2;
                                int LA111_0 = input.LA(1);

                                if ( (LA111_0==COMMA) ) {
                                    alt111=1;
                                }


                                switch (alt111) {
                            	case 1 :
                            	    // USE.g:1024:9: COMMA e= expression
                            	    {
                            	    match(input,COMMA,FOLLOW_COMMA_in_operationExpression4964); if (state.failed) return retval;

                            	    pushFollow(FOLLOW_expression_in_operationExpression4968);
                            	    e=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    if ( state.backtracking==0 ) { retval.n.addArg((e!=null?e.n:null)); }

                            	    }
                            	    break;

                            	default :
                            	    break loop111;
                                }
                            } while (true);


                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_operationExpression4988); if (state.failed) return retval;

                    }
                    break;

            }


            if ( state.backtracking==0 ) { retval.n.setStartToken(((Token)retval.start)); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "operationExpression"



    // $ANTLR start "inStateExpression"
    // USE.g:1031:1: inStateExpression[ASTExpression source, boolean followsArrow] returns [ASTInStateExpression n] : opToken= 'oclInState' LPAREN s= IDENT RPAREN ;
    public final ASTInStateExpression inStateExpression(ASTExpression source, boolean followsArrow) throws RecognitionException {
        ASTInStateExpression n = null;


        Token opToken=null;
        Token s=null;

        try {
            // USE.g:1032:35: (opToken= 'oclInState' LPAREN s= IDENT RPAREN )
            // USE.g:1033:4: opToken= 'oclInState' LPAREN s= IDENT RPAREN
            {
            opToken=(Token)match(input,98,FOLLOW_98_in_inStateExpression5025); if (state.failed) return n;

            match(input,LPAREN,FOLLOW_LPAREN_in_inStateExpression5030); if (state.failed) return n;

            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_inStateExpression5039); if (state.failed) return n;

            match(input,RPAREN,FOLLOW_RPAREN_in_inStateExpression5044); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTInStateExpression(opToken, source, s, followsArrow); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "inStateExpression"



    // $ANTLR start "typeExpression"
    // USE.g:1045:1: typeExpression[ASTExpression source, boolean followsArrow] returns [ASTTypeArgExpression n] : ( 'oclAsType' | 'oclIsKindOf' | 'oclIsTypeOf' | 'selectByType' | 'selectByKind' ) LPAREN t= type RPAREN ;
    public final ASTTypeArgExpression typeExpression(ASTExpression source, boolean followsArrow) throws RecognitionException {
        ASTTypeArgExpression n = null;


        ASTType t =null;


         Token opToken = null; 
        try {
            // USE.g:1048:2: ( ( 'oclAsType' | 'oclIsKindOf' | 'oclIsTypeOf' | 'selectByType' | 'selectByKind' ) LPAREN t= type RPAREN )
            // USE.g:1049:2: ( 'oclAsType' | 'oclIsKindOf' | 'oclIsTypeOf' | 'selectByType' | 'selectByKind' ) LPAREN t= type RPAREN
            {
            if ( state.backtracking==0 ) { opToken = input.LT(1); }

            if ( input.LA(1)==96||(input.LA(1) >= 99 && input.LA(1) <= 100)||(input.LA(1) >= 109 && input.LA(1) <= 110) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input,LPAREN,FOLLOW_LPAREN_in_typeExpression5104); if (state.failed) return n;

            pushFollow(FOLLOW_type_in_typeExpression5108);
            t=type();

            state._fsp--;
            if (state.failed) return n;

            match(input,RPAREN,FOLLOW_RPAREN_in_typeExpression5110); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTTypeArgExpression(opToken, source, t, followsArrow); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "typeExpression"



    // $ANTLR start "elemVarsDeclaration"
    // USE.g:1060:1: elemVarsDeclaration returns [ASTElemVarsDeclaration n] :var1= IDENT ( COLON t= type )? ( COMMA varN= IDENT ( COLON tN= type )? )* ;
    public final ASTElemVarsDeclaration elemVarsDeclaration() throws RecognitionException {
        ASTElemVarsDeclaration n = null;


        Token var1=null;
        Token varN=null;
        ASTType t =null;

        ASTType tN =null;


        try {
            // USE.g:1061:1: (var1= IDENT ( COLON t= type )? ( COMMA varN= IDENT ( COLON tN= type )? )* )
            // USE.g:1062:1: var1= IDENT ( COLON t= type )? ( COMMA varN= IDENT ( COLON tN= type )? )*
            {
            if ( state.backtracking==0 ) { n = new ASTElemVarsDeclaration(); }

            var1=(Token)match(input,IDENT,FOLLOW_IDENT_in_elemVarsDeclaration5148); if (state.failed) return n;

            // USE.g:1063:17: ( COLON t= type )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==COLON) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // USE.g:1063:18: COLON t= type
                    {
                    match(input,COLON,FOLLOW_COLON_in_elemVarsDeclaration5151); if (state.failed) return n;

                    pushFollow(FOLLOW_type_in_elemVarsDeclaration5155);
                    t=type();

                    state._fsp--;
                    if (state.failed) return n;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {n.addDeclaration(var1, t);}

            // USE.g:1064:4: ( COMMA varN= IDENT ( COLON tN= type )? )*
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( (LA116_0==COMMA) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    // USE.g:1064:5: COMMA varN= IDENT ( COLON tN= type )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_elemVarsDeclaration5165); if (state.failed) return n;

            	    varN=(Token)match(input,IDENT,FOLLOW_IDENT_in_elemVarsDeclaration5171); if (state.failed) return n;

            	    // USE.g:1064:24: ( COLON tN= type )?
            	    int alt115=2;
            	    int LA115_0 = input.LA(1);

            	    if ( (LA115_0==COLON) ) {
            	        alt115=1;
            	    }
            	    switch (alt115) {
            	        case 1 :
            	            // USE.g:1064:25: COLON tN= type
            	            {
            	            match(input,COLON,FOLLOW_COLON_in_elemVarsDeclaration5174); if (state.failed) return n;

            	            pushFollow(FOLLOW_type_in_elemVarsDeclaration5180);
            	            tN=type();

            	            state._fsp--;
            	            if (state.failed) return n;

            	            }
            	            break;

            	    }


            	    if ( state.backtracking==0 ) {n.addDeclaration(varN, tN); }

            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "elemVarsDeclaration"



    // $ANTLR start "variableInitialization"
    // USE.g:1072:1: variableInitialization returns [ASTVariableInitialization n] : name= IDENT COLON t= type EQUAL e= expression ;
    public final ASTVariableInitialization variableInitialization() throws RecognitionException {
        ASTVariableInitialization n = null;


        Token name=null;
        ASTType t =null;

        USEParser.expression_return e =null;


        try {
            // USE.g:1073:5: (name= IDENT COLON t= type EQUAL e= expression )
            // USE.g:1074:5: name= IDENT COLON t= type EQUAL e= expression
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_variableInitialization5208); if (state.failed) return n;

            match(input,COLON,FOLLOW_COLON_in_variableInitialization5210); if (state.failed) return n;

            pushFollow(FOLLOW_type_in_variableInitialization5214);
            t=type();

            state._fsp--;
            if (state.failed) return n;

            match(input,EQUAL,FOLLOW_EQUAL_in_variableInitialization5216); if (state.failed) return n;

            pushFollow(FOLLOW_expression_in_variableInitialization5220);
            e=expression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTVariableInitialization(name, t, (e!=null?e.n:null)); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "variableInitialization"



    // $ANTLR start "ifExpression"
    // USE.g:1083:1: ifExpression returns [ASTExpression n] : i= 'if' cond= expression 'then' t= expression 'else' e= expression 'endif' ;
    public final ASTExpression ifExpression() throws RecognitionException {
        ASTExpression n = null;


        Token i=null;
        USEParser.expression_return cond =null;

        USEParser.expression_return t =null;

        USEParser.expression_return e =null;


        try {
            // USE.g:1084:5: (i= 'if' cond= expression 'then' t= expression 'else' e= expression 'endif' )
            // USE.g:1085:5: i= 'if' cond= expression 'then' t= expression 'else' e= expression 'endif'
            {
            i=(Token)match(input,84,FOLLOW_84_in_ifExpression5252); if (state.failed) return n;

            pushFollow(FOLLOW_expression_in_ifExpression5256);
            cond=expression();

            state._fsp--;
            if (state.failed) return n;

            match(input,114,FOLLOW_114_in_ifExpression5258); if (state.failed) return n;

            pushFollow(FOLLOW_expression_in_ifExpression5262);
            t=expression();

            state._fsp--;
            if (state.failed) return n;

            match(input,76,FOLLOW_76_in_ifExpression5264); if (state.failed) return n;

            pushFollow(FOLLOW_expression_in_ifExpression5268);
            e=expression();

            state._fsp--;
            if (state.failed) return n;

            match(input,78,FOLLOW_78_in_ifExpression5270); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTIfExpression(i, (cond!=null?cond.n:null), (t!=null?t.n:null), (e!=null?e.n:null)); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "ifExpression"



    // $ANTLR start "literal"
    // USE.g:1104:1: literal returns [ASTExpression n] : (t= 'true' |f= 'false' |i= INT |r= REAL |s= STRING | HASH enumLit= IDENT |enumName= IDENT '::' enumLit= IDENT |nColIt= collectionLiteral |nEColIt= emptyCollectionLiteral |nUndLit= undefinedLiteral |nTupleLit= tupleLiteral |un= STAR );
    public final ASTExpression literal() throws RecognitionException {
        ASTExpression n = null;


        Token t=null;
        Token f=null;
        Token i=null;
        Token r=null;
        Token s=null;
        Token enumLit=null;
        Token enumName=null;
        Token un=null;
        ASTCollectionLiteral nColIt =null;

        ASTEmptyCollectionLiteral nEColIt =null;

        ASTUndefinedLiteral nUndLit =null;

        ASTTupleLiteral nTupleLit =null;


        try {
            // USE.g:1105:7: (t= 'true' |f= 'false' |i= INT |r= REAL |s= STRING | HASH enumLit= IDENT |enumName= IDENT '::' enumLit= IDENT |nColIt= collectionLiteral |nEColIt= emptyCollectionLiteral |nUndLit= undefinedLiteral |nTupleLit= tupleLiteral |un= STAR )
            int alt117=12;
            switch ( input.LA(1) ) {
            case 116:
                {
                alt117=1;
                }
                break;
            case 81:
                {
                alt117=2;
                }
                break;
            case INT:
                {
                alt117=3;
                }
                break;
            case REAL:
                {
                alt117=4;
                }
                break;
            case STRING:
                {
                alt117=5;
                }
                break;
            case HASH:
                {
                alt117=6;
                }
                break;
            case IDENT:
                {
                alt117=7;
                }
                break;
            case 45:
            case 48:
            case 50:
            case 51:
                {
                int LA117_8 = input.LA(2);

                if ( (LA117_8==LPAREN) ) {
                    alt117=9;
                }
                else if ( (LA117_8==LBRACE) ) {
                    alt117=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 117, 8, input);

                    throw nvae;

                }
                }
                break;
            case 46:
            case 97:
                {
                alt117=9;
                }
                break;
            case 55:
            case 95:
            case 101:
                {
                alt117=10;
                }
                break;
            case 53:
                {
                alt117=11;
                }
                break;
            case STAR:
                {
                alt117=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;

            }

            switch (alt117) {
                case 1 :
                    // USE.g:1106:7: t= 'true'
                    {
                    t=(Token)match(input,116,FOLLOW_116_in_literal5309); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTBooleanLiteral(true); }

                    }
                    break;
                case 2 :
                    // USE.g:1107:7: f= 'false'
                    {
                    f=(Token)match(input,81,FOLLOW_81_in_literal5323); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTBooleanLiteral(false); }

                    }
                    break;
                case 3 :
                    // USE.g:1108:7: i= INT
                    {
                    i=(Token)match(input,INT,FOLLOW_INT_in_literal5336); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTIntegerLiteral(i); }

                    }
                    break;
                case 4 :
                    // USE.g:1109:7: r= REAL
                    {
                    r=(Token)match(input,REAL,FOLLOW_REAL_in_literal5351); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTRealLiteral(r); }

                    }
                    break;
                case 5 :
                    // USE.g:1110:7: s= STRING
                    {
                    s=(Token)match(input,STRING,FOLLOW_STRING_in_literal5365); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTStringLiteral(s); }

                    }
                    break;
                case 6 :
                    // USE.g:1111:7: HASH enumLit= IDENT
                    {
                    match(input,HASH,FOLLOW_HASH_in_literal5375); if (state.failed) return n;

                    enumLit=(Token)match(input,IDENT,FOLLOW_IDENT_in_literal5379); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTEnumLiteral(enumLit);}

                    }
                    break;
                case 7 :
                    // USE.g:1112:7: enumName= IDENT '::' enumLit= IDENT
                    {
                    enumName=(Token)match(input,IDENT,FOLLOW_IDENT_in_literal5391); if (state.failed) return n;

                    match(input,COLON_COLON,FOLLOW_COLON_COLON_in_literal5393); if (state.failed) return n;

                    enumLit=(Token)match(input,IDENT,FOLLOW_IDENT_in_literal5397); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTEnumLiteral(enumName, enumLit); }

                    }
                    break;
                case 8 :
                    // USE.g:1113:7: nColIt= collectionLiteral
                    {
                    pushFollow(FOLLOW_collectionLiteral_in_literal5409);
                    nColIt=collectionLiteral();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nColIt; }

                    }
                    break;
                case 9 :
                    // USE.g:1114:7: nEColIt= emptyCollectionLiteral
                    {
                    pushFollow(FOLLOW_emptyCollectionLiteral_in_literal5421);
                    nEColIt=emptyCollectionLiteral();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nEColIt; }

                    }
                    break;
                case 10 :
                    // USE.g:1115:7: nUndLit= undefinedLiteral
                    {
                    pushFollow(FOLLOW_undefinedLiteral_in_literal5433);
                    nUndLit=undefinedLiteral();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) {n = nUndLit; }

                    }
                    break;
                case 11 :
                    // USE.g:1116:7: nTupleLit= tupleLiteral
                    {
                    pushFollow(FOLLOW_tupleLiteral_in_literal5445);
                    nTupleLit=tupleLiteral();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) {n = nTupleLit; }

                    }
                    break;
                case 12 :
                    // USE.g:1117:7: un= STAR
                    {
                    un=(Token)match(input,STAR,FOLLOW_STAR_in_literal5457); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTUnlimitedNaturalLiteral(un); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "literal"



    // $ANTLR start "collectionLiteral"
    // USE.g:1125:1: collectionLiteral returns [ASTCollectionLiteral n] : ( 'Set' | 'Sequence' | 'Bag' | 'OrderedSet' ) LBRACE (ci= collectionItem ( COMMA ci= collectionItem )* )? RBRACE ;
    public final ASTCollectionLiteral collectionLiteral() throws RecognitionException {
        ASTCollectionLiteral n = null;


        ASTCollectionItem ci =null;


         Token op = null; 
        try {
            // USE.g:1127:5: ( ( 'Set' | 'Sequence' | 'Bag' | 'OrderedSet' ) LBRACE (ci= collectionItem ( COMMA ci= collectionItem )* )? RBRACE )
            // USE.g:1128:5: ( 'Set' | 'Sequence' | 'Bag' | 'OrderedSet' ) LBRACE (ci= collectionItem ( COMMA ci= collectionItem )* )? RBRACE
            {
            if ( state.backtracking==0 ) { op = input.LT(1); }

            if ( input.LA(1)==45||input.LA(1)==48||(input.LA(1) >= 50 && input.LA(1) <= 51) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            if ( state.backtracking==0 ) { n = new ASTCollectionLiteral(op); }

            match(input,LBRACE,FOLLOW_LBRACE_in_collectionLiteral5524); if (state.failed) return n;

            // USE.g:1132:5: (ci= collectionItem ( COMMA ci= collectionItem )* )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==AT||LA119_0==HASH||(LA119_0 >= IDENT && LA119_0 <= INT)||(LA119_0 >= LPAREN && LA119_0 <= MINUS)||LA119_0==PLUS||LA119_0==REAL||(LA119_0 >= STAR && LA119_0 <= STRING)||(LA119_0 >= 45 && LA119_0 <= 46)||LA119_0==48||(LA119_0 >= 50 && LA119_0 <= 51)||LA119_0==53||LA119_0==55||LA119_0==81||LA119_0==84||(LA119_0 >= 90 && LA119_0 <= 91)||(LA119_0 >= 94 && LA119_0 <= 101)||(LA119_0 >= 109 && LA119_0 <= 110)||LA119_0==116) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // USE.g:1133:7: ci= collectionItem ( COMMA ci= collectionItem )*
                    {
                    pushFollow(FOLLOW_collectionItem_in_collectionLiteral5541);
                    ci=collectionItem();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.addItem(ci); }

                    // USE.g:1134:7: ( COMMA ci= collectionItem )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==COMMA) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // USE.g:1134:9: COMMA ci= collectionItem
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_collectionLiteral5554); if (state.failed) return n;

                    	    pushFollow(FOLLOW_collectionItem_in_collectionLiteral5558);
                    	    ci=collectionItem();

                    	    state._fsp--;
                    	    if (state.failed) return n;

                    	    if ( state.backtracking==0 ) { n.addItem(ci); }

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);


                    }
                    break;

            }


            match(input,RBRACE,FOLLOW_RBRACE_in_collectionLiteral5577); if (state.failed) return n;

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "collectionLiteral"



    // $ANTLR start "collectionItem"
    // USE.g:1143:1: collectionItem returns [ASTCollectionItem n] : e= expression ( DOTDOT e= expression )? ;
    public final ASTCollectionItem collectionItem() throws RecognitionException {
        ASTCollectionItem n = null;


        USEParser.expression_return e =null;


         n = new ASTCollectionItem(); 
        try {
            // USE.g:1145:5: (e= expression ( DOTDOT e= expression )? )
            // USE.g:1146:5: e= expression ( DOTDOT e= expression )?
            {
            pushFollow(FOLLOW_expression_in_collectionItem5606);
            e=expression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.setFirst((e!=null?e.n:null)); }

            // USE.g:1147:5: ( DOTDOT e= expression )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==DOTDOT) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // USE.g:1147:7: DOTDOT e= expression
                    {
                    match(input,DOTDOT,FOLLOW_DOTDOT_in_collectionItem5617); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_collectionItem5621);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n.setSecond((e!=null?e.n:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "collectionItem"



    // $ANTLR start "emptyCollectionLiteral"
    // USE.g:1157:1: emptyCollectionLiteral returns [ASTEmptyCollectionLiteral n] : ( 'oclEmpty' LPAREN t= collectionType RPAREN |t= collectionType LBRACE RBRACE );
    public final ASTEmptyCollectionLiteral emptyCollectionLiteral() throws RecognitionException {
        ASTEmptyCollectionLiteral n = null;


        ASTCollectionType t =null;


        try {
            // USE.g:1158:5: ( 'oclEmpty' LPAREN t= collectionType RPAREN |t= collectionType LBRACE RBRACE )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==97) ) {
                alt121=1;
            }
            else if ( ((LA121_0 >= 45 && LA121_0 <= 46)||LA121_0==48||(LA121_0 >= 50 && LA121_0 <= 51)) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;

            }
            switch (alt121) {
                case 1 :
                    // USE.g:1159:5: 'oclEmpty' LPAREN t= collectionType RPAREN
                    {
                    match(input,97,FOLLOW_97_in_emptyCollectionLiteral5650); if (state.failed) return n;

                    match(input,LPAREN,FOLLOW_LPAREN_in_emptyCollectionLiteral5652); if (state.failed) return n;

                    pushFollow(FOLLOW_collectionType_in_emptyCollectionLiteral5656);
                    t=collectionType();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,RPAREN,FOLLOW_RPAREN_in_emptyCollectionLiteral5658); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTEmptyCollectionLiteral(t); }

                    }
                    break;
                case 2 :
                    // USE.g:1162:5: t= collectionType LBRACE RBRACE
                    {
                    pushFollow(FOLLOW_collectionType_in_emptyCollectionLiteral5674);
                    t=collectionType();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,LBRACE,FOLLOW_LBRACE_in_emptyCollectionLiteral5676); if (state.failed) return n;

                    match(input,RBRACE,FOLLOW_RBRACE_in_emptyCollectionLiteral5678); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTEmptyCollectionLiteral(t); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "emptyCollectionLiteral"



    // $ANTLR start "undefinedLiteral"
    // USE.g:1173:1: undefinedLiteral returns [ASTUndefinedLiteral n] : ( 'oclUndefined' LPAREN t= type RPAREN | 'Undefined' | 'null' LPAREN t= type RPAREN | 'null' );
    public final ASTUndefinedLiteral undefinedLiteral() throws RecognitionException {
        ASTUndefinedLiteral n = null;


        ASTType t =null;


        try {
            // USE.g:1174:5: ( 'oclUndefined' LPAREN t= type RPAREN | 'Undefined' | 'null' LPAREN t= type RPAREN | 'null' )
            int alt122=4;
            switch ( input.LA(1) ) {
            case 101:
                {
                alt122=1;
                }
                break;
            case 55:
                {
                alt122=2;
                }
                break;
            case 95:
                {
                int LA122_3 = input.LA(2);

                if ( (LA122_3==LPAREN) ) {
                    alt122=3;
                }
                else if ( (LA122_3==EOF||(LA122_3 >= ARROW && LA122_3 <= AT)||LA122_3==BAR||(LA122_3 >= COMMA && LA122_3 <= EQUAL)||(LA122_3 >= GREATER && LA122_3 <= GREATER_EQUAL)||LA122_3==IDENT||LA122_3==LBRACE||(LA122_3 >= LESS && LA122_3 <= LESS_EQUAL)||LA122_3==MINUS||(LA122_3 >= NOT_EQUAL && LA122_3 <= PLUS)||(LA122_3 >= RBRACE && LA122_3 <= RBRACK)||(LA122_3 >= RPAREN && LA122_3 <= SLASH)||LA122_3==STAR||LA122_3==58||(LA122_3 >= 60 && LA122_3 <= 63)||(LA122_3 >= 67 && LA122_3 <= 68)||(LA122_3 >= 74 && LA122_3 <= 80)||(LA122_3 >= 85 && LA122_3 <= 86)||LA122_3==89||(LA122_3 >= 102 && LA122_3 <= 106)||LA122_3==108||LA122_3==111||(LA122_3 >= 113 && LA122_3 <= 114)||LA122_3==118) ) {
                    alt122=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 3, input);

                    throw nvae;

                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }

            switch (alt122) {
                case 1 :
                    // USE.g:1175:5: 'oclUndefined' LPAREN t= type RPAREN
                    {
                    match(input,101,FOLLOW_101_in_undefinedLiteral5708); if (state.failed) return n;

                    match(input,LPAREN,FOLLOW_LPAREN_in_undefinedLiteral5710); if (state.failed) return n;

                    pushFollow(FOLLOW_type_in_undefinedLiteral5714);
                    t=type();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,RPAREN,FOLLOW_RPAREN_in_undefinedLiteral5716); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTUndefinedLiteral(t); }

                    }
                    break;
                case 2 :
                    // USE.g:1178:5: 'Undefined'
                    {
                    match(input,55,FOLLOW_55_in_undefinedLiteral5730); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTUndefinedLiteral(); }

                    }
                    break;
                case 3 :
                    // USE.g:1181:5: 'null' LPAREN t= type RPAREN
                    {
                    match(input,95,FOLLOW_95_in_undefinedLiteral5744); if (state.failed) return n;

                    match(input,LPAREN,FOLLOW_LPAREN_in_undefinedLiteral5746); if (state.failed) return n;

                    pushFollow(FOLLOW_type_in_undefinedLiteral5750);
                    t=type();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,RPAREN,FOLLOW_RPAREN_in_undefinedLiteral5752); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTUndefinedLiteral(t); }

                    }
                    break;
                case 4 :
                    // USE.g:1184:5: 'null'
                    {
                    match(input,95,FOLLOW_95_in_undefinedLiteral5766); if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTUndefinedLiteral(); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "undefinedLiteral"



    // $ANTLR start "tupleLiteral"
    // USE.g:1194:1: tupleLiteral returns [ASTTupleLiteral n] : 'Tuple' LBRACE ti= tupleItem ( COMMA ti= tupleItem )* RBRACE ;
    public final ASTTupleLiteral tupleLiteral() throws RecognitionException {
        ASTTupleLiteral n = null;


        ASTTupleItem ti =null;


         List tiList = new ArrayList(); 
        try {
            // USE.g:1196:5: ( 'Tuple' LBRACE ti= tupleItem ( COMMA ti= tupleItem )* RBRACE )
            // USE.g:1197:5: 'Tuple' LBRACE ti= tupleItem ( COMMA ti= tupleItem )* RBRACE
            {
            match(input,53,FOLLOW_53_in_tupleLiteral5805); if (state.failed) return n;

            match(input,LBRACE,FOLLOW_LBRACE_in_tupleLiteral5811); if (state.failed) return n;

            pushFollow(FOLLOW_tupleItem_in_tupleLiteral5819);
            ti=tupleItem();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { tiList.add(ti); }

            // USE.g:1200:5: ( COMMA ti= tupleItem )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==COMMA) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // USE.g:1200:7: COMMA ti= tupleItem
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_tupleLiteral5830); if (state.failed) return n;

            	    pushFollow(FOLLOW_tupleItem_in_tupleLiteral5834);
            	    ti=tupleItem();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { tiList.add(ti); }

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            match(input,RBRACE,FOLLOW_RBRACE_in_tupleLiteral5845); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTTupleLiteral(tiList); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "tupleLiteral"



    // $ANTLR start "tupleItem"
    // USE.g:1208:1: tupleItem returns [ASTTupleItem n] : name= IDENT ( ( COLON type EQUAL )=> COLON t= type EQUAL e= expression | ( COLON | EQUAL ) e= expression ) ;
    public final ASTTupleItem tupleItem() throws RecognitionException {
        ASTTupleItem n = null;


        Token name=null;
        ASTType t =null;

        USEParser.expression_return e =null;


        try {
            // USE.g:1209:5: (name= IDENT ( ( COLON type EQUAL )=> COLON t= type EQUAL e= expression | ( COLON | EQUAL ) e= expression ) )
            // USE.g:1210:5: name= IDENT ( ( COLON type EQUAL )=> COLON t= type EQUAL e= expression | ( COLON | EQUAL ) e= expression )
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_tupleItem5876); if (state.failed) return n;

            // USE.g:1211:5: ( ( COLON type EQUAL )=> COLON t= type EQUAL e= expression | ( COLON | EQUAL ) e= expression )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==COLON) ) {
                int LA124_1 = input.LA(2);

                if ( (synpred1_USE()) ) {
                    alt124=1;
                }
                else if ( (true) ) {
                    alt124=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 124, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA124_0==EQUAL) ) {
                alt124=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // USE.g:1214:7: ( COLON type EQUAL )=> COLON t= type EQUAL e= expression
                    {
                    match(input,COLON,FOLLOW_COLON_in_tupleItem5915); if (state.failed) return n;

                    pushFollow(FOLLOW_type_in_tupleItem5919);
                    t=type();

                    state._fsp--;
                    if (state.failed) return n;

                    match(input,EQUAL,FOLLOW_EQUAL_in_tupleItem5921); if (state.failed) return n;

                    pushFollow(FOLLOW_expression_in_tupleItem5925);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTTupleItem(name, t, (e!=null?e.n:null)); }

                    }
                    break;
                case 2 :
                    // USE.g:1217:7: ( COLON | EQUAL ) e= expression
                    {
                    if ( input.LA(1)==COLON||input.LA(1)==EQUAL ) {
                        input.consume();
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return n;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_expression_in_tupleItem5957);
                    e=expression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTTupleItem(name, (e!=null?e.n:null)); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "tupleItem"



    // $ANTLR start "type"
    // USE.g:1228:1: type returns [ASTType n] : (nTSimple= simpleType |nTCollection= collectionType |nTTuple= tupleType ) ;
    public final ASTType type() throws RecognitionException {
        ASTType n = null;


        ASTSimpleType nTSimple =null;

        ASTCollectionType nTCollection =null;

        ASTTupleType nTTuple =null;


         Token tok = null; 
        try {
            // USE.g:1230:5: ( (nTSimple= simpleType |nTCollection= collectionType |nTTuple= tupleType ) )
            // USE.g:1231:5: (nTSimple= simpleType |nTCollection= collectionType |nTTuple= tupleType )
            {
            if ( state.backtracking==0 ) { tok = input.LT(1); /* remember start of type */ }

            // USE.g:1232:5: (nTSimple= simpleType |nTCollection= collectionType |nTTuple= tupleType )
            int alt125=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt125=1;
                }
                break;
            case 45:
            case 46:
            case 48:
            case 50:
            case 51:
                {
                alt125=2;
                }
                break;
            case 53:
                {
                alt125=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;

            }

            switch (alt125) {
                case 1 :
                    // USE.g:1233:7: nTSimple= simpleType
                    {
                    pushFollow(FOLLOW_simpleType_in_type6023);
                    nTSimple=simpleType();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nTSimple; if (n != null) n.setStartToken(tok); }

                    }
                    break;
                case 2 :
                    // USE.g:1234:7: nTCollection= collectionType
                    {
                    pushFollow(FOLLOW_collectionType_in_type6035);
                    nTCollection=collectionType();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nTCollection; if (n != null) n.setStartToken(tok); }

                    }
                    break;
                case 3 :
                    // USE.g:1235:7: nTTuple= tupleType
                    {
                    pushFollow(FOLLOW_tupleType_in_type6047);
                    nTTuple=tupleType();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = nTTuple; if (n != null) n.setStartToken(tok); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "type"



    // $ANTLR start "typeOnly"
    // USE.g:1240:1: typeOnly returns [ASTType n] : nT= type EOF ;
    public final ASTType typeOnly() throws RecognitionException {
        ASTType n = null;


        ASTType nT =null;


        try {
            // USE.g:1241:5: (nT= type EOF )
            // USE.g:1242:5: nT= type EOF
            {
            pushFollow(FOLLOW_type_in_typeOnly6079);
            nT=type();

            state._fsp--;
            if (state.failed) return n;

            match(input,EOF,FOLLOW_EOF_in_typeOnly6081); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = nT; }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "typeOnly"



    // $ANTLR start "simpleType"
    // USE.g:1252:1: simpleType returns [ASTSimpleType n] : name= IDENT ;
    public final ASTSimpleType simpleType() throws RecognitionException {
        ASTSimpleType n = null;


        Token name=null;

        try {
            // USE.g:1253:5: (name= IDENT )
            // USE.g:1254:5: name= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_simpleType6109); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTSimpleType(name); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "simpleType"



    // $ANTLR start "collectionType"
    // USE.g:1262:1: collectionType returns [ASTCollectionType n] : ( 'Collection' | 'Set' | 'Sequence' | 'Bag' | 'OrderedSet' ) LPAREN elemType= type RPAREN ;
    public final ASTCollectionType collectionType() throws RecognitionException {
        ASTCollectionType n = null;


        ASTType elemType =null;


         Token op = null; 
        try {
            // USE.g:1264:5: ( ( 'Collection' | 'Set' | 'Sequence' | 'Bag' | 'OrderedSet' ) LPAREN elemType= type RPAREN )
            // USE.g:1265:5: ( 'Collection' | 'Set' | 'Sequence' | 'Bag' | 'OrderedSet' ) LPAREN elemType= type RPAREN
            {
            if ( state.backtracking==0 ) { op = input.LT(1); }

            if ( (input.LA(1) >= 45 && input.LA(1) <= 46)||input.LA(1)==48||(input.LA(1) >= 50 && input.LA(1) <= 51) ) {
                input.consume();
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            match(input,LPAREN,FOLLOW_LPAREN_in_collectionType6174); if (state.failed) return n;

            pushFollow(FOLLOW_type_in_collectionType6178);
            elemType=type();

            state._fsp--;
            if (state.failed) return n;

            match(input,RPAREN,FOLLOW_RPAREN_in_collectionType6180); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTCollectionType(op, elemType); if (n != null) n.setStartToken(op);}

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "collectionType"



    // $ANTLR start "tupleType"
    // USE.g:1275:1: tupleType returns [ASTTupleType n] : 'Tuple' LPAREN tp= tuplePart ( COMMA tp= tuplePart )* RPAREN ;
    public final ASTTupleType tupleType() throws RecognitionException {
        ASTTupleType n = null;


        ASTTuplePart tp =null;


         List tpList = new ArrayList(); 
        try {
            // USE.g:1277:5: ( 'Tuple' LPAREN tp= tuplePart ( COMMA tp= tuplePart )* RPAREN )
            // USE.g:1278:5: 'Tuple' LPAREN tp= tuplePart ( COMMA tp= tuplePart )* RPAREN
            {
            match(input,53,FOLLOW_53_in_tupleType6214); if (state.failed) return n;

            match(input,LPAREN,FOLLOW_LPAREN_in_tupleType6216); if (state.failed) return n;

            pushFollow(FOLLOW_tuplePart_in_tupleType6225);
            tp=tuplePart();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { tpList.add(tp); }

            // USE.g:1280:5: ( COMMA tp= tuplePart )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==COMMA) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // USE.g:1280:7: COMMA tp= tuplePart
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_tupleType6236); if (state.failed) return n;

            	    pushFollow(FOLLOW_tuplePart_in_tupleType6240);
            	    tp=tuplePart();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { tpList.add(tp); }

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            match(input,RPAREN,FOLLOW_RPAREN_in_tupleType6252); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTTupleType(tpList); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "tupleType"



    // $ANTLR start "tuplePart"
    // USE.g:1289:1: tuplePart returns [ASTTuplePart n] : name= IDENT COLON t= type ;
    public final ASTTuplePart tuplePart() throws RecognitionException {
        ASTTuplePart n = null;


        Token name=null;
        ASTType t =null;


        try {
            // USE.g:1290:5: (name= IDENT COLON t= type )
            // USE.g:1291:5: name= IDENT COLON t= type
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_tuplePart6284); if (state.failed) return n;

            match(input,COLON,FOLLOW_COLON_in_tuplePart6286); if (state.failed) return n;

            pushFollow(FOLLOW_type_in_tuplePart6290);
            t=type();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTTuplePart(name, t); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "tuplePart"



    // $ANTLR start "statOnly"
    // USE.g:1330:1: statOnly returns [ASTStatement n] : s= stat EOF ;
    public final ASTStatement statOnly() throws RecognitionException {
        ASTStatement n = null;


        USEParser.stat_return s =null;


        try {
            // USE.g:1331:3: (s= stat EOF )
            // USE.g:1332:3: s= stat EOF
            {
            pushFollow(FOLLOW_stat_in_statOnly6339);
            s=stat();

            state._fsp--;
            if (state.failed) return n;

            match(input,EOF,FOLLOW_EOF_in_statOnly6343); if (state.failed) return n;

            if ( state.backtracking==0 ) { n = (s!=null?s.n:null); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "statOnly"


    public static class stat_return extends ParserRuleReturnScope {
        public ASTStatement n;
    };


    // $ANTLR start "stat"
    // USE.g:1342:1: stat returns [ASTStatement n] : s= singleStat ( SEMI s2= singleStat )* ;
    public final USEParser.stat_return stat() throws RecognitionException {
        USEParser.stat_return retval = new USEParser.stat_return();
        retval.start = input.LT(1);


        ASTStatement s =null;

        ASTStatement s2 =null;



          ASTSequenceStatement seq = new ASTSequenceStatement(((Token)retval.start));

        try {
            // USE.g:1346:3: (s= singleStat ( SEMI s2= singleStat )* )
            // USE.g:1347:3: s= singleStat ( SEMI s2= singleStat )*
            {
            pushFollow(FOLLOW_singleStat_in_stat6378);
            s=singleStat();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) {seq.addStatement(s);}

            // USE.g:1348:3: ( SEMI s2= singleStat )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==SEMI) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // USE.g:1349:5: SEMI s2= singleStat
            	    {
            	    match(input,SEMI,FOLLOW_SEMI_in_stat6390); if (state.failed) return retval;

            	    pushFollow(FOLLOW_singleStat_in_stat6400);
            	    s2=singleStat();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    if ( state.backtracking==0 ) {seq.addStatement(s2); }

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);


            if ( state.backtracking==0 ) { 
                retval.n = seq.simplify();
              }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "stat"



    // $ANTLR start "singleStat"
    // USE.g:1361:1: singleStat returns [ASTStatement n] : (emp= emptyStat | ( statStartingWithExpr )=>sse= statStartingWithExpr |vas= varAssignStat |ocs= objCreateStat |ods= objDestroyStat |lis= lnkInsStat |lds= lnkDelStat |ces= condExStat |its= iterStat |whs= whileStat |blk= blockStat );
    public final ASTStatement singleStat() throws RecognitionException {
        ASTStatement n = null;


        ASTEmptyStatement emp =null;

        USEParser.statStartingWithExpr_return sse =null;

        ASTStatement vas =null;

        USEParser.objCreateStat_return ocs =null;

        USEParser.objDestroyStat_return ods =null;

        USEParser.lnkInsStat_return lis =null;

        USEParser.lnkDelStat_return lds =null;

        USEParser.condExStat_return ces =null;

        USEParser.iterStat_return its =null;

        USEParser.whileStat_return whs =null;

        USEParser.blockStat_return blk =null;


        try {
            // USE.g:1362:5: (emp= emptyStat | ( statStartingWithExpr )=>sse= statStartingWithExpr |vas= varAssignStat |ocs= objCreateStat |ods= objDestroyStat |lis= lnkInsStat |lds= lnkDelStat |ces= condExStat |its= iterStat |whs= whileStat |blk= blockStat )
            int alt128=11;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==EOF||LA128_0==SEMI||(LA128_0 >= 76 && LA128_0 <= 77)) ) {
                alt128=1;
            }
            else if ( (LA128_0==91) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==MINUS||LA128_0==PLUS||LA128_0==94) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==116) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==81) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==INT) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==REAL) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==STRING) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==HASH) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==IDENT) ) {
                int LA128_13 = input.LA(2);

                if ( (synpred2_USE()) ) {
                    alt128=2;
                }
                else if ( (true) ) {
                    alt128=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 13, input);

                    throw nvae;

                }
            }
            else if ( (LA128_0==45||LA128_0==48||(LA128_0 >= 50 && LA128_0 <= 51)) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==97) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==46) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==101) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==55) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==95) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==53) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==STAR) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==AT) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==90) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==96||(LA128_0 >= 99 && LA128_0 <= 100)||(LA128_0 >= 109 && LA128_0 <= 110)) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==98) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==LPAREN) && (synpred2_USE())) {
                alt128=2;
            }
            else if ( (LA128_0==84) ) {
                int LA128_27 = input.LA(2);

                if ( (synpred2_USE()) ) {
                    alt128=2;
                }
                else if ( (true) ) {
                    alt128=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return n;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 27, input);

                    throw nvae;

                }
            }
            else if ( (LA128_0==93) ) {
                alt128=4;
            }
            else if ( (LA128_0==73) ) {
                alt128=5;
            }
            else if ( (LA128_0==87) ) {
                alt128=6;
            }
            else if ( (LA128_0==72) ) {
                alt128=7;
            }
            else if ( (LA128_0==82) ) {
                alt128=9;
            }
            else if ( (LA128_0==117) ) {
                alt128=10;
            }
            else if ( (LA128_0==64) ) {
                alt128=11;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }
            switch (alt128) {
                case 1 :
                    // USE.g:1363:5: emp= emptyStat
                    {
                    pushFollow(FOLLOW_emptyStat_in_singleStat6440);
                    emp=emptyStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = emp; }

                    }
                    break;
                case 2 :
                    // USE.g:1365:5: ( statStartingWithExpr )=>sse= statStartingWithExpr
                    {
                    pushFollow(FOLLOW_statStartingWithExpr_in_singleStat6466);
                    sse=statStartingWithExpr();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (sse!=null?sse.n:null); }

                    }
                    break;
                case 3 :
                    // USE.g:1366:5: vas= varAssignStat
                    {
                    pushFollow(FOLLOW_varAssignStat_in_singleStat6478);
                    vas=varAssignStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = vas; }

                    }
                    break;
                case 4 :
                    // USE.g:1367:5: ocs= objCreateStat
                    {
                    pushFollow(FOLLOW_objCreateStat_in_singleStat6492);
                    ocs=objCreateStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (ocs!=null?ocs.n:null); }

                    }
                    break;
                case 5 :
                    // USE.g:1368:5: ods= objDestroyStat
                    {
                    pushFollow(FOLLOW_objDestroyStat_in_singleStat6506);
                    ods=objDestroyStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (ods!=null?ods.n:null); }

                    }
                    break;
                case 6 :
                    // USE.g:1369:5: lis= lnkInsStat
                    {
                    pushFollow(FOLLOW_lnkInsStat_in_singleStat6519);
                    lis=lnkInsStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (lis!=null?lis.n:null); }

                    }
                    break;
                case 7 :
                    // USE.g:1370:5: lds= lnkDelStat
                    {
                    pushFollow(FOLLOW_lnkDelStat_in_singleStat6536);
                    lds=lnkDelStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (lds!=null?lds.n:null); }

                    }
                    break;
                case 8 :
                    // USE.g:1371:5: ces= condExStat
                    {
                    pushFollow(FOLLOW_condExStat_in_singleStat6553);
                    ces=condExStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (ces!=null?ces.n:null); }

                    }
                    break;
                case 9 :
                    // USE.g:1372:5: its= iterStat
                    {
                    pushFollow(FOLLOW_iterStat_in_singleStat6570);
                    its=iterStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (its!=null?its.n:null); }

                    }
                    break;
                case 10 :
                    // USE.g:1374:5: whs= whileStat
                    {
                    pushFollow(FOLLOW_whileStat_in_singleStat6592);
                    whs=whileStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (whs!=null?whs.n:null); }

                    }
                    break;
                case 11 :
                    // USE.g:1375:5: blk= blockStat
                    {
                    pushFollow(FOLLOW_blockStat_in_singleStat6610);
                    blk=blockStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (blk!=null?blk.n:null); }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "singleStat"



    // $ANTLR start "emptyStat"
    // USE.g:1382:1: emptyStat returns [ASTEmptyStatement n] : nothing ;
    public final ASTEmptyStatement emptyStat() throws RecognitionException {
        ASTEmptyStatement n = null;


        try {
            // USE.g:1383:3: ( nothing )
            // USE.g:1384:3: nothing
            {
            pushFollow(FOLLOW_nothing_in_emptyStat6637);
            nothing();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTEmptyStatement(); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "emptyStat"


    public static class statStartingWithExpr_return extends ParserRuleReturnScope {
        public ASTStatement n;
    };


    // $ANTLR start "statStartingWithExpr"
    // USE.g:1389:1: statStartingWithExpr returns [ASTStatement n] : expr= inSoilExpression (aas= attAssignStat[$expr.n] )? ;
    public final USEParser.statStartingWithExpr_return statStartingWithExpr() throws RecognitionException {
        USEParser.statStartingWithExpr_return retval = new USEParser.statStartingWithExpr_return();
        retval.start = input.LT(1);


        ASTExpression expr =null;

        ASTAttributeAssignmentStatement aas =null;


        try {
            // USE.g:1390:3: (expr= inSoilExpression (aas= attAssignStat[$expr.n] )? )
            // USE.g:1391:3: expr= inSoilExpression (aas= attAssignStat[$expr.n] )?
            {
            pushFollow(FOLLOW_inSoilExpression_in_statStartingWithExpr6663);
            expr=inSoilExpression();

            state._fsp--;
            if (state.failed) return retval;

            // USE.g:1392:3: (aas= attAssignStat[$expr.n] )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==DOT) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // USE.g:1393:5: aas= attAssignStat[$expr.n]
                    {
                    pushFollow(FOLLOW_attAssignStat_in_statStartingWithExpr6677);
                    aas=attAssignStat(expr);

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.n = aas; }

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                if (aas == null) {
                  retval.n = new ASTOperationCallStatement(((Token)retval.start), expr); 
                }
              }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "statStartingWithExpr"



    // $ANTLR start "varAssignStat"
    // USE.g:1405:1: varAssignStat returns [ASTStatement n] : varName= IDENT COLON_EQUAL rVal= rValue ;
    public final ASTStatement varAssignStat() throws RecognitionException {
        ASTStatement n = null;


        Token varName=null;
        ASTRValue rVal =null;


        try {
            // USE.g:1406:3: (varName= IDENT COLON_EQUAL rVal= rValue )
            // USE.g:1407:3: varName= IDENT COLON_EQUAL rVal= rValue
            {
            varName=(Token)match(input,IDENT,FOLLOW_IDENT_in_varAssignStat6715); if (state.failed) return n;

            match(input,COLON_EQUAL,FOLLOW_COLON_EQUAL_in_varAssignStat6719); if (state.failed) return n;

            pushFollow(FOLLOW_rValue_in_varAssignStat6727);
            rVal=rValue();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) {
                n = new ASTVariableAssignmentStatement(varName, (varName!=null?varName.getText():null), rVal);
              }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "varAssignStat"



    // $ANTLR start "attAssignStat"
    // USE.g:1419:1: attAssignStat[ASTExpression exp] returns [ASTAttributeAssignmentStatement n] : DOT attName= IDENT COLON_EQUAL r= rValue ;
    public final ASTAttributeAssignmentStatement attAssignStat(ASTExpression exp) throws RecognitionException {
        ASTAttributeAssignmentStatement n = null;


        Token attName=null;
        ASTRValue r =null;


        try {
            // USE.g:1420:3: ( DOT attName= IDENT COLON_EQUAL r= rValue )
            // USE.g:1421:3: DOT attName= IDENT COLON_EQUAL r= rValue
            {
            match(input,DOT,FOLLOW_DOT_in_attAssignStat6751); if (state.failed) return n;

            attName=(Token)match(input,IDENT,FOLLOW_IDENT_in_attAssignStat6760); if (state.failed) return n;

            match(input,COLON_EQUAL,FOLLOW_COLON_EQUAL_in_attAssignStat6764); if (state.failed) return n;

            pushFollow(FOLLOW_rValue_in_attAssignStat6772);
            r=rValue();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n = new ASTAttributeAssignmentStatement(attName, exp, (attName!=null?attName.getText():null), r); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "attAssignStat"


    public static class objCreateStat_return extends ParserRuleReturnScope {
        public ASTStatement n;
    };


    // $ANTLR start "objCreateStat"
    // USE.g:1433:1: objCreateStat returns [ASTStatement n] : 'new' ident= simpleType ( LPAREN (objName= inSoilExpression )? RPAREN )? ( 'between' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN )? ;
    public final USEParser.objCreateStat_return objCreateStat() throws RecognitionException {
        USEParser.objCreateStat_return retval = new USEParser.objCreateStat_return();
        retval.start = input.LT(1);


        ASTSimpleType ident =null;

        ASTExpression objName =null;

        USEParser.rValListMin2WithOptionalQualifiers_return p =null;


        try {
            // USE.g:1434:3: ( 'new' ident= simpleType ( LPAREN (objName= inSoilExpression )? RPAREN )? ( 'between' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN )? )
            // USE.g:1435:3: 'new' ident= simpleType ( LPAREN (objName= inSoilExpression )? RPAREN )? ( 'between' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN )?
            {
            match(input,93,FOLLOW_93_in_objCreateStat6798); if (state.failed) return retval;

            pushFollow(FOLLOW_simpleType_in_objCreateStat6806);
            ident=simpleType();

            state._fsp--;
            if (state.failed) return retval;

            // USE.g:1437:3: ( LPAREN (objName= inSoilExpression )? RPAREN )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==LPAREN) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // USE.g:1438:5: LPAREN (objName= inSoilExpression )? RPAREN
                    {
                    match(input,LPAREN,FOLLOW_LPAREN_in_objCreateStat6816); if (state.failed) return retval;

                    // USE.g:1439:7: (objName= inSoilExpression )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==AT||LA130_0==HASH||(LA130_0 >= IDENT && LA130_0 <= INT)||(LA130_0 >= LPAREN && LA130_0 <= MINUS)||LA130_0==PLUS||LA130_0==REAL||(LA130_0 >= STAR && LA130_0 <= STRING)||(LA130_0 >= 45 && LA130_0 <= 46)||LA130_0==48||(LA130_0 >= 50 && LA130_0 <= 51)||LA130_0==53||LA130_0==55||LA130_0==81||LA130_0==84||(LA130_0 >= 90 && LA130_0 <= 91)||(LA130_0 >= 94 && LA130_0 <= 101)||(LA130_0 >= 109 && LA130_0 <= 110)||LA130_0==116) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // USE.g:1439:8: objName= inSoilExpression
                            {
                            pushFollow(FOLLOW_inSoilExpression_in_objCreateStat6829);
                            objName=inSoilExpression();

                            state._fsp--;
                            if (state.failed) return retval;

                            }
                            break;

                    }


                    match(input,RPAREN,FOLLOW_RPAREN_in_objCreateStat6837); if (state.failed) return retval;

                    }
                    break;

            }


            // USE.g:1443:3: ( 'between' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==65) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // USE.g:1444:5: 'between' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN
                    {
                    match(input,65,FOLLOW_65_in_objCreateStat6855); if (state.failed) return retval;

                    match(input,LPAREN,FOLLOW_LPAREN_in_objCreateStat6863); if (state.failed) return retval;

                    pushFollow(FOLLOW_rValListMin2WithOptionalQualifiers_in_objCreateStat6877);
                    p=rValListMin2WithOptionalQualifiers();

                    state._fsp--;
                    if (state.failed) return retval;

                    match(input,RPAREN,FOLLOW_RPAREN_in_objCreateStat6885); if (state.failed) return retval;

                    if ( state.backtracking==0 ) { 
                        retval.n = new ASTNewLinkObjectStatement(((Token)retval.start), ident, (p!=null?p.participans:null), (p!=null?p.qualifiers:null), objName);
                        }

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                if (retval.n == null) {
                  retval.n = new ASTNewObjectStatement(((Token)retval.start), ident, objName);
                }
              }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objCreateStat"


    public static class objDestroyStat_return extends ParserRuleReturnScope {
        public ASTStatement n;
    };


    // $ANTLR start "objDestroyStat"
    // USE.g:1463:1: objDestroyStat returns [ASTStatement n] : 'destroy' el= exprListMin1 ;
    public final USEParser.objDestroyStat_return objDestroyStat() throws RecognitionException {
        USEParser.objDestroyStat_return retval = new USEParser.objDestroyStat_return();
        retval.start = input.LT(1);


        List<ASTExpression> el =null;


        try {
            // USE.g:1464:3: ( 'destroy' el= exprListMin1 )
            // USE.g:1465:3: 'destroy' el= exprListMin1
            {
            match(input,73,FOLLOW_73_in_objDestroyStat6921); if (state.failed) return retval;

            pushFollow(FOLLOW_exprListMin1_in_objDestroyStat6929);
            el=exprListMin1();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) {
                ASTSequenceStatement seq = new ASTSequenceStatement(((Token)retval.start));
                
                for (ASTExpression expression : el) {
                  seq.addStatement(
                    new ASTObjectDestructionStatement(((Token)retval.start), expression));
                }
                
                retval.n = seq.simplify();
              }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "objDestroyStat"


    public static class lnkInsStat_return extends ParserRuleReturnScope {
        public ASTLinkInsertionStatement n;
    };


    // $ANTLR start "lnkInsStat"
    // USE.g:1484:1: lnkInsStat returns [ASTLinkInsertionStatement n] : 'insert' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN 'into' ass= IDENT ;
    public final USEParser.lnkInsStat_return lnkInsStat() throws RecognitionException {
        USEParser.lnkInsStat_return retval = new USEParser.lnkInsStat_return();
        retval.start = input.LT(1);


        Token ass=null;
        USEParser.rValListMin2WithOptionalQualifiers_return p =null;


        try {
            // USE.g:1485:3: ( 'insert' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN 'into' ass= IDENT )
            // USE.g:1486:3: 'insert' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN 'into' ass= IDENT
            {
            match(input,87,FOLLOW_87_in_lnkInsStat6955); if (state.failed) return retval;

            match(input,LPAREN,FOLLOW_LPAREN_in_lnkInsStat6959); if (state.failed) return retval;

            pushFollow(FOLLOW_rValListMin2WithOptionalQualifiers_in_lnkInsStat6969);
            p=rValListMin2WithOptionalQualifiers();

            state._fsp--;
            if (state.failed) return retval;

            match(input,RPAREN,FOLLOW_RPAREN_in_lnkInsStat6973); if (state.failed) return retval;

            match(input,88,FOLLOW_88_in_lnkInsStat6977); if (state.failed) return retval;

            ass=(Token)match(input,IDENT,FOLLOW_IDENT_in_lnkInsStat6985); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n = new ASTLinkInsertionStatement(((Token)retval.start), (ass!=null?ass.getText():null), (p!=null?p.participans:null), (p!=null?p.qualifiers:null)); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lnkInsStat"


    public static class rValListMin2WithOptionalQualifiers_return extends ParserRuleReturnScope {
        public List<ASTRValue> participans;
        public List<List<ASTRValue>> qualifiers;
    };


    // $ANTLR start "rValListMin2WithOptionalQualifiers"
    // USE.g:1496:1: rValListMin2WithOptionalQualifiers returns [List<ASTRValue> participans, List<List<ASTRValue>> qualifiers] : r= rValue ( LBRACE qualifierValues= rValList RBRACE )? COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? ( COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? )* ;
    public final USEParser.rValListMin2WithOptionalQualifiers_return rValListMin2WithOptionalQualifiers() throws RecognitionException {
        USEParser.rValListMin2WithOptionalQualifiers_return retval = new USEParser.rValListMin2WithOptionalQualifiers_return();
        retval.start = input.LT(1);


        ASTRValue r =null;

        List<ASTRValue> qualifierValues =null;



          retval.participans = new ArrayList<ASTRValue>();
          retval.qualifiers = new ArrayList<List<ASTRValue>>();
          List<ASTRValue> currentQualifiers = Collections.emptyList();

        try {
            // USE.g:1502:3: (r= rValue ( LBRACE qualifierValues= rValList RBRACE )? COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? ( COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? )* )
            // USE.g:1503:3: r= rValue ( LBRACE qualifierValues= rValList RBRACE )? COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? ( COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? )*
            {
            pushFollow(FOLLOW_rValue_in_rValListMin2WithOptionalQualifiers7014);
            r=rValue();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.participans.add(r); }

            // USE.g:1504:3: ( LBRACE qualifierValues= rValList RBRACE )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==LBRACE) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // USE.g:1505:4: LBRACE qualifierValues= rValList RBRACE
                    {
                    match(input,LBRACE,FOLLOW_LBRACE_in_rValListMin2WithOptionalQualifiers7025); if (state.failed) return retval;

                    pushFollow(FOLLOW_rValList_in_rValListMin2WithOptionalQualifiers7034);
                    qualifierValues=rValList();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {currentQualifiers = qualifierValues;}

                    match(input,RBRACE,FOLLOW_RBRACE_in_rValListMin2WithOptionalQualifiers7041); if (state.failed) return retval;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                retval.qualifiers.add(currentQualifiers);
                currentQualifiers = Collections.emptyList();
              }

            match(input,COMMA,FOLLOW_COMMA_in_rValListMin2WithOptionalQualifiers7057); if (state.failed) return retval;

            pushFollow(FOLLOW_rValue_in_rValListMin2WithOptionalQualifiers7068);
            r=rValue();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.participans.add(r); }

            // USE.g:1517:3: ( LBRACE qualifierValues= rValList RBRACE )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LBRACE) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // USE.g:1518:4: LBRACE qualifierValues= rValList RBRACE
                    {
                    match(input,LBRACE,FOLLOW_LBRACE_in_rValListMin2WithOptionalQualifiers7079); if (state.failed) return retval;

                    pushFollow(FOLLOW_rValList_in_rValListMin2WithOptionalQualifiers7088);
                    qualifierValues=rValList();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) {currentQualifiers = qualifierValues;}

                    match(input,RBRACE,FOLLOW_RBRACE_in_rValListMin2WithOptionalQualifiers7095); if (state.failed) return retval;

                    }
                    break;

            }


            if ( state.backtracking==0 ) {
                retval.qualifiers.add(currentQualifiers);
                currentQualifiers = Collections.emptyList();
              }

            // USE.g:1527:3: ( COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )? )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==COMMA) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    // USE.g:1528:5: COMMA r= rValue ( LBRACE qualifierValues= rValList RBRACE )?
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_rValListMin2WithOptionalQualifiers7117); if (state.failed) return retval;

            	    pushFollow(FOLLOW_rValue_in_rValListMin2WithOptionalQualifiers7132);
            	    r=rValue();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    if ( state.backtracking==0 ) { retval.participans.add(r); }

            	    // USE.g:1532:5: ( LBRACE qualifierValues= rValList RBRACE )?
            	    int alt135=2;
            	    int LA135_0 = input.LA(1);

            	    if ( (LA135_0==LBRACE) ) {
            	        alt135=1;
            	    }
            	    switch (alt135) {
            	        case 1 :
            	            // USE.g:1533:6: LBRACE qualifierValues= rValList RBRACE
            	            {
            	            match(input,LBRACE,FOLLOW_LBRACE_in_rValListMin2WithOptionalQualifiers7152); if (state.failed) return retval;

            	            pushFollow(FOLLOW_rValList_in_rValListMin2WithOptionalQualifiers7163);
            	            qualifierValues=rValList();

            	            state._fsp--;
            	            if (state.failed) return retval;

            	            if ( state.backtracking==0 ) {currentQualifiers = qualifierValues;}

            	            match(input,RBRACE,FOLLOW_RBRACE_in_rValListMin2WithOptionalQualifiers7172); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    if ( state.backtracking==0 ) {
            	          retval.qualifiers.add(currentQualifiers);
            	          currentQualifiers = Collections.emptyList();
            	        }

            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "rValListMin2WithOptionalQualifiers"


    public static class lnkDelStat_return extends ParserRuleReturnScope {
        public ASTLinkDeletionStatement n;
    };


    // $ANTLR start "lnkDelStat"
    // USE.g:1548:1: lnkDelStat returns [ASTLinkDeletionStatement n] : 'delete' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN 'from' ass= IDENT ;
    public final USEParser.lnkDelStat_return lnkDelStat() throws RecognitionException {
        USEParser.lnkDelStat_return retval = new USEParser.lnkDelStat_return();
        retval.start = input.LT(1);


        Token ass=null;
        USEParser.rValListMin2WithOptionalQualifiers_return p =null;


        try {
            // USE.g:1549:3: ( 'delete' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN 'from' ass= IDENT )
            // USE.g:1550:3: 'delete' LPAREN p= rValListMin2WithOptionalQualifiers RPAREN 'from' ass= IDENT
            {
            match(input,72,FOLLOW_72_in_lnkDelStat7213); if (state.failed) return retval;

            match(input,LPAREN,FOLLOW_LPAREN_in_lnkDelStat7217); if (state.failed) return retval;

            pushFollow(FOLLOW_rValListMin2WithOptionalQualifiers_in_lnkDelStat7227);
            p=rValListMin2WithOptionalQualifiers();

            state._fsp--;
            if (state.failed) return retval;

            match(input,RPAREN,FOLLOW_RPAREN_in_lnkDelStat7231); if (state.failed) return retval;

            match(input,83,FOLLOW_83_in_lnkDelStat7235); if (state.failed) return retval;

            ass=(Token)match(input,IDENT,FOLLOW_IDENT_in_lnkDelStat7244); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n = new ASTLinkDeletionStatement(((Token)retval.start), (ass!=null?ass.getText():null), (p!=null?p.participans:null), (p!=null?p.qualifiers:null)); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lnkDelStat"


    public static class condExStat_return extends ParserRuleReturnScope {
        public ASTConditionalExecutionStatement n;
    };


    // $ANTLR start "condExStat"
    // USE.g:1564:1: condExStat returns [ASTConditionalExecutionStatement n] : 'if' con= inSoilExpression 'then' ts= statOrImplicitBlock ( 'else' es= statOrImplicitBlock )? 'end' ;
    public final USEParser.condExStat_return condExStat() throws RecognitionException {
        USEParser.condExStat_return retval = new USEParser.condExStat_return();
        retval.start = input.LT(1);


        ASTExpression con =null;

        ASTStatement ts =null;

        ASTStatement es =null;



          ASTStatement elseStat = new ASTEmptyStatement();

        try {
            // USE.g:1568:3: ( 'if' con= inSoilExpression 'then' ts= statOrImplicitBlock ( 'else' es= statOrImplicitBlock )? 'end' )
            // USE.g:1569:3: 'if' con= inSoilExpression 'then' ts= statOrImplicitBlock ( 'else' es= statOrImplicitBlock )? 'end'
            {
            match(input,84,FOLLOW_84_in_condExStat7275); if (state.failed) return retval;

            pushFollow(FOLLOW_inSoilExpression_in_condExStat7284);
            con=inSoilExpression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,114,FOLLOW_114_in_condExStat7288); if (state.failed) return retval;

            pushFollow(FOLLOW_statOrImplicitBlock_in_condExStat7297);
            ts=statOrImplicitBlock();

            state._fsp--;
            if (state.failed) return retval;

            // USE.g:1573:3: ( 'else' es= statOrImplicitBlock )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==76) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // USE.g:1574:5: 'else' es= statOrImplicitBlock
                    {
                    match(input,76,FOLLOW_76_in_condExStat7308); if (state.failed) return retval;

                    pushFollow(FOLLOW_statOrImplicitBlock_in_condExStat7320);
                    es=statOrImplicitBlock();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { elseStat = es; }

                    }
                    break;

            }


            match(input,77,FOLLOW_77_in_condExStat7332); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n = new ASTConditionalExecutionStatement(((Token)retval.start), con, ts, elseStat); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "condExStat"


    public static class iterStat_return extends ParserRuleReturnScope {
        public ASTIterationStatement n;
    };


    // $ANTLR start "iterStat"
    // USE.g:1585:1: iterStat returns [ASTIterationStatement n] : 'for' var= IDENT 'in' set= inSoilExpression 'do' s= statOrImplicitBlock 'end' ;
    public final USEParser.iterStat_return iterStat() throws RecognitionException {
        USEParser.iterStat_return retval = new USEParser.iterStat_return();
        retval.start = input.LT(1);


        Token var=null;
        ASTExpression set =null;

        ASTStatement s =null;


        try {
            // USE.g:1586:3: ( 'for' var= IDENT 'in' set= inSoilExpression 'do' s= statOrImplicitBlock 'end' )
            // USE.g:1587:3: 'for' var= IDENT 'in' set= inSoilExpression 'do' s= statOrImplicitBlock 'end'
            {
            match(input,82,FOLLOW_82_in_iterStat7357); if (state.failed) return retval;

            var=(Token)match(input,IDENT,FOLLOW_IDENT_in_iterStat7365); if (state.failed) return retval;

            match(input,86,FOLLOW_86_in_iterStat7369); if (state.failed) return retval;

            pushFollow(FOLLOW_inSoilExpression_in_iterStat7377);
            set=inSoilExpression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,75,FOLLOW_75_in_iterStat7381); if (state.failed) return retval;

            pushFollow(FOLLOW_statOrImplicitBlock_in_iterStat7389);
            s=statOrImplicitBlock();

            state._fsp--;
            if (state.failed) return retval;

            match(input,77,FOLLOW_77_in_iterStat7394); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n = new ASTIterationStatement(((Token)retval.start), (var!=null?var.getText():null), set, s); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "iterStat"


    public static class whileStat_return extends ParserRuleReturnScope {
        public ASTWhileStatement n;
    };


    // $ANTLR start "whileStat"
    // USE.g:1602:1: whileStat returns [ASTWhileStatement n] : 'while' cond= inSoilExpression 'do' s= statOrImplicitBlock 'end' ;
    public final USEParser.whileStat_return whileStat() throws RecognitionException {
        USEParser.whileStat_return retval = new USEParser.whileStat_return();
        retval.start = input.LT(1);


        ASTExpression cond =null;

        ASTStatement s =null;


        try {
            // USE.g:1603:3: ( 'while' cond= inSoilExpression 'do' s= statOrImplicitBlock 'end' )
            // USE.g:1604:3: 'while' cond= inSoilExpression 'do' s= statOrImplicitBlock 'end'
            {
            match(input,117,FOLLOW_117_in_whileStat7420); if (state.failed) return retval;

            pushFollow(FOLLOW_inSoilExpression_in_whileStat7428);
            cond=inSoilExpression();

            state._fsp--;
            if (state.failed) return retval;

            match(input,75,FOLLOW_75_in_whileStat7432); if (state.failed) return retval;

            pushFollow(FOLLOW_statOrImplicitBlock_in_whileStat7440);
            s=statOrImplicitBlock();

            state._fsp--;
            if (state.failed) return retval;

            match(input,77,FOLLOW_77_in_whileStat7445); if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n = new ASTWhileStatement(((Token)retval.start), cond, s); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "whileStat"


    public static class blockStat_return extends ParserRuleReturnScope {
        public ASTBlockStatement n;
    };


    // $ANTLR start "blockStat"
    // USE.g:1616:1: blockStat returns [ASTBlockStatement n] : 'begin' ( 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI )? s= stat 'end' ;
    public final USEParser.blockStat_return blockStat() throws RecognitionException {
        USEParser.blockStat_return retval = new USEParser.blockStat_return();
        retval.start = input.LT(1);


        ASTVariableDeclaration vd =null;

        ASTVariableDeclaration vd1 =null;

        USEParser.stat_return s =null;



          retval.n = new ASTBlockStatement(((Token)retval.start), org.tzi.use.config.Options.explicitVariableDeclarations);

        try {
            // USE.g:1620:2: ( 'begin' ( 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI )? s= stat 'end' )
            // USE.g:1621:2: 'begin' ( 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI )? s= stat 'end'
            {
            match(input,64,FOLLOW_64_in_blockStat7475); if (state.failed) return retval;

            // USE.g:1622:2: ( 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==70) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // USE.g:1622:4: 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI
                    {
                    match(input,70,FOLLOW_70_in_blockStat7480); if (state.failed) return retval;

                    pushFollow(FOLLOW_variableDeclaration_in_blockStat7486);
                    vd=variableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;

                    if ( state.backtracking==0 ) { retval.n.addVariableDeclaration(vd);}

                    // USE.g:1622:73: ( COMMA vd1= variableDeclaration )*
                    loop138:
                    do {
                        int alt138=2;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==COMMA) ) {
                            alt138=1;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // USE.g:1622:75: COMMA vd1= variableDeclaration
                    	    {
                    	    match(input,COMMA,FOLLOW_COMMA_in_blockStat7492); if (state.failed) return retval;

                    	    pushFollow(FOLLOW_variableDeclaration_in_blockStat7498);
                    	    vd1=variableDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    if ( state.backtracking==0 ) { retval.n.addVariableDeclaration(vd1);}

                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);


                    match(input,SEMI,FOLLOW_SEMI_in_blockStat7505); if (state.failed) return retval;

                    }
                    break;

            }


            pushFollow(FOLLOW_stat_in_blockStat7515);
            s=stat();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n.setBody((s!=null?s.n:null)); }

            match(input,77,FOLLOW_77_in_blockStat7520); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "blockStat"


    public static class implicitBlockStat_return extends ParserRuleReturnScope {
        public ASTBlockStatement n;
    };


    // $ANTLR start "implicitBlockStat"
    // USE.g:1631:1: implicitBlockStat returns [ASTBlockStatement n] : 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI s= stat ;
    public final USEParser.implicitBlockStat_return implicitBlockStat() throws RecognitionException {
        USEParser.implicitBlockStat_return retval = new USEParser.implicitBlockStat_return();
        retval.start = input.LT(1);


        ASTVariableDeclaration vd =null;

        ASTVariableDeclaration vd1 =null;

        USEParser.stat_return s =null;



          retval.n = new ASTBlockStatement(((Token)retval.start), false);

        try {
            // USE.g:1635:3: ( 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI s= stat )
            // USE.g:1636:3: 'declare' vd= variableDeclaration ( COMMA vd1= variableDeclaration )* SEMI s= stat
            {
            match(input,70,FOLLOW_70_in_implicitBlockStat7546); if (state.failed) return retval;

            pushFollow(FOLLOW_variableDeclaration_in_implicitBlockStat7552);
            vd=variableDeclaration();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n.addVariableDeclaration(vd);}

            // USE.g:1636:72: ( COMMA vd1= variableDeclaration )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==COMMA) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // USE.g:1636:74: COMMA vd1= variableDeclaration
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_implicitBlockStat7558); if (state.failed) return retval;

            	    pushFollow(FOLLOW_variableDeclaration_in_implicitBlockStat7564);
            	    vd1=variableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    if ( state.backtracking==0 ) { retval.n.addVariableDeclaration(vd1);}

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            match(input,SEMI,FOLLOW_SEMI_in_implicitBlockStat7571); if (state.failed) return retval;

            pushFollow(FOLLOW_stat_in_implicitBlockStat7579);
            s=stat();

            state._fsp--;
            if (state.failed) return retval;

            if ( state.backtracking==0 ) { retval.n.setBody((s!=null?s.n:null)); }

            }

            retval.stop = input.LT(-1);


        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implicitBlockStat"



    // $ANTLR start "statOrImplicitBlock"
    // USE.g:1640:1: statOrImplicitBlock returns [ASTStatement n] : (s1= stat |s2= implicitBlockStat ) ;
    public final ASTStatement statOrImplicitBlock() throws RecognitionException {
        ASTStatement n = null;


        USEParser.stat_return s1 =null;

        USEParser.implicitBlockStat_return s2 =null;


        try {
            // USE.g:1641:3: ( (s1= stat |s2= implicitBlockStat ) )
            // USE.g:1642:3: (s1= stat |s2= implicitBlockStat )
            {
            // USE.g:1642:3: (s1= stat |s2= implicitBlockStat )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==AT||LA141_0==HASH||(LA141_0 >= IDENT && LA141_0 <= INT)||(LA141_0 >= LPAREN && LA141_0 <= MINUS)||LA141_0==PLUS||LA141_0==REAL||LA141_0==SEMI||(LA141_0 >= STAR && LA141_0 <= STRING)||(LA141_0 >= 45 && LA141_0 <= 46)||LA141_0==48||(LA141_0 >= 50 && LA141_0 <= 51)||LA141_0==53||LA141_0==55||LA141_0==64||(LA141_0 >= 72 && LA141_0 <= 73)||(LA141_0 >= 76 && LA141_0 <= 77)||(LA141_0 >= 81 && LA141_0 <= 82)||LA141_0==84||LA141_0==87||(LA141_0 >= 90 && LA141_0 <= 91)||(LA141_0 >= 93 && LA141_0 <= 101)||(LA141_0 >= 109 && LA141_0 <= 110)||(LA141_0 >= 116 && LA141_0 <= 117)) ) {
                alt141=1;
            }
            else if ( (LA141_0==70) ) {
                alt141=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // USE.g:1642:4: s1= stat
                    {
                    pushFollow(FOLLOW_stat_in_statOrImplicitBlock7602);
                    s1=stat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (s1!=null?s1.n:null); }

                    }
                    break;
                case 2 :
                    // USE.g:1642:31: s2= implicitBlockStat
                    {
                    pushFollow(FOLLOW_implicitBlockStat_in_statOrImplicitBlock7612);
                    s2=implicitBlockStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = (s2!=null?s2.n:null); }

                    }
                    break;

            }


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "statOrImplicitBlock"



    // $ANTLR start "nothing"
    // USE.g:1656:1: nothing :;
    public final void nothing() throws RecognitionException {
        try {
            // USE.g:1657:1: ()
            // USE.g:1658:1: 
            {
            }

        }
        finally {
        	// do for sure before leaving
        }
        return ;
    }
    // $ANTLR end "nothing"



    // $ANTLR start "rValue"
    // USE.g:1664:1: rValue returns [ASTRValue n] : (e= inSoilExpression |oc= objCreateStat );
    public final ASTRValue rValue() throws RecognitionException {
        ASTRValue n = null;


        ASTExpression e =null;

        USEParser.objCreateStat_return oc =null;


        try {
            // USE.g:1665:5: (e= inSoilExpression |oc= objCreateStat )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==AT||LA142_0==HASH||(LA142_0 >= IDENT && LA142_0 <= INT)||(LA142_0 >= LPAREN && LA142_0 <= MINUS)||LA142_0==PLUS||LA142_0==REAL||(LA142_0 >= STAR && LA142_0 <= STRING)||(LA142_0 >= 45 && LA142_0 <= 46)||LA142_0==48||(LA142_0 >= 50 && LA142_0 <= 51)||LA142_0==53||LA142_0==55||LA142_0==81||LA142_0==84||(LA142_0 >= 90 && LA142_0 <= 91)||(LA142_0 >= 94 && LA142_0 <= 101)||(LA142_0 >= 109 && LA142_0 <= 110)||LA142_0==116) ) {
                alt142=1;
            }
            else if ( (LA142_0==93) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // USE.g:1666:5: e= inSoilExpression
                    {
                    pushFollow(FOLLOW_inSoilExpression_in_rValue7658);
                    e=inSoilExpression();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ASTRValueExpressionOrOpCall(e); }

                    }
                    break;
                case 2 :
                    // USE.g:1667:5: oc= objCreateStat
                    {
                    pushFollow(FOLLOW_objCreateStat_in_rValue7670);
                    oc=objCreateStat();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { 
                        if ((oc!=null?oc.n:null) instanceof ASTNewLinkObjectStatement)
                        	n = new ASTRValueNewLinkObject((ASTNewLinkObjectStatement)(oc!=null?oc.n:null));
                        else
                        	n = new ASTRValueNewObject((ASTNewObjectStatement)(oc!=null?oc.n:null));
                      }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "rValue"



    // $ANTLR start "rValList"
    // USE.g:1680:1: rValList returns [List<ASTRValue> n] : ( nothing |rl= rValListMin1 );
    public final List<ASTRValue> rValList() throws RecognitionException {
        List<ASTRValue> n = null;


        List<ASTRValue> rl =null;


        try {
            // USE.g:1681:3: ( nothing |rl= rValListMin1 )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==RBRACE) ) {
                alt143=1;
            }
            else if ( (LA143_0==AT||LA143_0==HASH||(LA143_0 >= IDENT && LA143_0 <= INT)||(LA143_0 >= LPAREN && LA143_0 <= MINUS)||LA143_0==PLUS||LA143_0==REAL||(LA143_0 >= STAR && LA143_0 <= STRING)||(LA143_0 >= 45 && LA143_0 <= 46)||LA143_0==48||(LA143_0 >= 50 && LA143_0 <= 51)||LA143_0==53||LA143_0==55||LA143_0==81||LA143_0==84||(LA143_0 >= 90 && LA143_0 <= 91)||(LA143_0 >= 93 && LA143_0 <= 101)||(LA143_0 >= 109 && LA143_0 <= 110)||LA143_0==116) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;

            }
            switch (alt143) {
                case 1 :
                    // USE.g:1682:3: nothing
                    {
                    pushFollow(FOLLOW_nothing_in_rValList7693);
                    nothing();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = Collections.<ASTRValue>emptyList(); }

                    }
                    break;
                case 2 :
                    // USE.g:1685:3: rl= rValListMin1
                    {
                    pushFollow(FOLLOW_rValListMin1_in_rValList7720);
                    rl=rValListMin1();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = rl; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "rValList"



    // $ANTLR start "rValListMin1"
    // USE.g:1693:1: rValListMin1 returns [List<ASTRValue> n] : r= rValue ( COMMA r= rValue )* ;
    public final List<ASTRValue> rValListMin1() throws RecognitionException {
        List<ASTRValue> n = null;


        ASTRValue r =null;



          n = new ArrayList<ASTRValue>();

        try {
            // USE.g:1697:3: (r= rValue ( COMMA r= rValue )* )
            // USE.g:1698:3: r= rValue ( COMMA r= rValue )*
            {
            pushFollow(FOLLOW_rValue_in_rValListMin17753);
            r=rValue();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.add(r); }

            // USE.g:1700:3: ( COMMA r= rValue )*
            loop144:
            do {
                int alt144=2;
                int LA144_0 = input.LA(1);

                if ( (LA144_0==COMMA) ) {
                    alt144=1;
                }


                switch (alt144) {
            	case 1 :
            	    // USE.g:1701:5: COMMA r= rValue
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_rValListMin17767); if (state.failed) return n;

            	    pushFollow(FOLLOW_rValue_in_rValListMin17777);
            	    r=rValue();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.add(r); }

            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "rValListMin1"



    // $ANTLR start "rValListMin2"
    // USE.g:1711:1: rValListMin2 returns [List<ASTRValue> n] : r= rValue COMMA r= rValue ( COMMA r= rValue )* ;
    public final List<ASTRValue> rValListMin2() throws RecognitionException {
        List<ASTRValue> n = null;


        ASTRValue r =null;



          n = new ArrayList<ASTRValue>();

        try {
            // USE.g:1715:3: (r= rValue COMMA r= rValue ( COMMA r= rValue )* )
            // USE.g:1716:3: r= rValue COMMA r= rValue ( COMMA r= rValue )*
            {
            pushFollow(FOLLOW_rValue_in_rValListMin27816);
            r=rValue();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.add(r); }

            match(input,COMMA,FOLLOW_COMMA_in_rValListMin27824); if (state.failed) return n;

            pushFollow(FOLLOW_rValue_in_rValListMin27832);
            r=rValue();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { n.add(r); }

            // USE.g:1721:3: ( COMMA r= rValue )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==COMMA) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    // USE.g:1722:5: COMMA r= rValue
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_rValListMin27846); if (state.failed) return n;

            	    pushFollow(FOLLOW_rValue_in_rValListMin27856);
            	    r=rValue();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { n.add(r); }

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "rValListMin2"



    // $ANTLR start "inSoilExpression"
    // USE.g:1732:1: inSoilExpression returns [ASTExpression n] : e= expression ;
    public final ASTExpression inSoilExpression() throws RecognitionException {
        ASTExpression n = null;


        USEParser.expression_return e =null;


        try {
            // USE.g:1733:3: (e= expression )
            // USE.g:1734:3: e= expression
            {
            pushFollow(FOLLOW_expression_in_inSoilExpression7890);
            e=expression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { if ((e!=null?e.n:null) != null) (e!=null?e.n:null).setStringRep((e!=null?input.toString(e.start,e.stop):null)); }

            if ( state.backtracking==0 ) { n = (e!=null?e.n:null); }

            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "inSoilExpression"



    // $ANTLR start "exprList"
    // USE.g:1743:1: exprList returns [List<ASTExpression> n] : ( nothing |el= exprListMin1 );
    public final List<ASTExpression> exprList() throws RecognitionException {
        List<ASTExpression> n = null;


        List<ASTExpression> el =null;


        try {
            // USE.g:1744:3: ( nothing |el= exprListMin1 )
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==EOF) ) {
                alt146=1;
            }
            else if ( (LA146_0==AT||LA146_0==HASH||(LA146_0 >= IDENT && LA146_0 <= INT)||(LA146_0 >= LPAREN && LA146_0 <= MINUS)||LA146_0==PLUS||LA146_0==REAL||(LA146_0 >= STAR && LA146_0 <= STRING)||(LA146_0 >= 45 && LA146_0 <= 46)||LA146_0==48||(LA146_0 >= 50 && LA146_0 <= 51)||LA146_0==53||LA146_0==55||LA146_0==81||LA146_0==84||(LA146_0 >= 90 && LA146_0 <= 91)||(LA146_0 >= 94 && LA146_0 <= 101)||(LA146_0 >= 109 && LA146_0 <= 110)||LA146_0==116) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;

            }
            switch (alt146) {
                case 1 :
                    // USE.g:1745:3: nothing
                    {
                    pushFollow(FOLLOW_nothing_in_exprList7919);
                    nothing();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ArrayList<ASTExpression>(); }

                    }
                    break;
                case 2 :
                    // USE.g:1748:3: el= exprListMin1
                    {
                    pushFollow(FOLLOW_exprListMin1_in_exprList7937);
                    el=exprListMin1();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = el; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "exprList"



    // $ANTLR start "exprListMin1"
    // USE.g:1756:1: exprListMin1 returns [List<ASTExpression> n] : e= inSoilExpression ( COMMA e= inSoilExpression )* ;
    public final List<ASTExpression> exprListMin1() throws RecognitionException {
        List<ASTExpression> n = null;


        ASTExpression e =null;



          n = new ArrayList<ASTExpression>();

        try {
            // USE.g:1760:3: (e= inSoilExpression ( COMMA e= inSoilExpression )* )
            // USE.g:1761:3: e= inSoilExpression ( COMMA e= inSoilExpression )*
            {
            pushFollow(FOLLOW_inSoilExpression_in_exprListMin17970);
            e=inSoilExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { if (e != null) n.add(e); }

            // USE.g:1763:3: ( COMMA e= inSoilExpression )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==COMMA) ) {
                    alt147=1;
                }


                switch (alt147) {
            	case 1 :
            	    // USE.g:1764:5: COMMA e= inSoilExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_exprListMin17985); if (state.failed) return n;

            	    pushFollow(FOLLOW_inSoilExpression_in_exprListMin17995);
            	    e=inSoilExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { if (e != null) n.add(e); }

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "exprListMin1"



    // $ANTLR start "exprListMin2"
    // USE.g:1774:1: exprListMin2 returns [List<ASTExpression> n] : e= inSoilExpression COMMA e= inSoilExpression ( COMMA e= inSoilExpression )* ;
    public final List<ASTExpression> exprListMin2() throws RecognitionException {
        List<ASTExpression> n = null;


        ASTExpression e =null;



          n = new ArrayList<ASTExpression>();

        try {
            // USE.g:1778:3: (e= inSoilExpression COMMA e= inSoilExpression ( COMMA e= inSoilExpression )* )
            // USE.g:1779:3: e= inSoilExpression COMMA e= inSoilExpression ( COMMA e= inSoilExpression )*
            {
            pushFollow(FOLLOW_inSoilExpression_in_exprListMin28035);
            e=inSoilExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { if (e != null) n.add(e); }

            match(input,COMMA,FOLLOW_COMMA_in_exprListMin28043); if (state.failed) return n;

            pushFollow(FOLLOW_inSoilExpression_in_exprListMin28051);
            e=inSoilExpression();

            state._fsp--;
            if (state.failed) return n;

            if ( state.backtracking==0 ) { if (e != null) n.add(e); }

            // USE.g:1784:3: ( COMMA e= inSoilExpression )*
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==COMMA) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // USE.g:1785:5: COMMA e= inSoilExpression
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_exprListMin28065); if (state.failed) return n;

            	    pushFollow(FOLLOW_inSoilExpression_in_exprListMin28075);
            	    e=inSoilExpression();

            	    state._fsp--;
            	    if (state.failed) return n;

            	    if ( state.backtracking==0 ) { if (e != null) n.add(e); }

            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "exprListMin2"



    // $ANTLR start "identList"
    // USE.g:1795:1: identList returns [List<String> n] : ( nothing |il= identListMin1 );
    public final List<String> identList() throws RecognitionException {
        List<String> n = null;


        List<String> il =null;


        try {
            // USE.g:1796:3: ( nothing |il= identListMin1 )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==EOF||LA149_0==RBRACE||LA149_0==SEMI||(LA149_0 >= 76 && LA149_0 <= 77)) ) {
                alt149=1;
            }
            else if ( (LA149_0==IDENT) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return n;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }
            switch (alt149) {
                case 1 :
                    // USE.g:1797:3: nothing
                    {
                    pushFollow(FOLLOW_nothing_in_identList8105);
                    nothing();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = new ArrayList<String>(); }

                    }
                    break;
                case 2 :
                    // USE.g:1800:3: il= identListMin1
                    {
                    pushFollow(FOLLOW_identListMin1_in_identList8122);
                    il=identListMin1();

                    state._fsp--;
                    if (state.failed) return n;

                    if ( state.backtracking==0 ) { n = il; }

                    }
                    break;

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "identList"



    // $ANTLR start "identListMin1"
    // USE.g:1808:1: identListMin1 returns [List<String> n] : id= IDENT ( COMMA id= IDENT )* ;
    public final List<String> identListMin1() throws RecognitionException {
        List<String> n = null;


        Token id=null;


          n = new ArrayList<String>();

        try {
            // USE.g:1812:3: (id= IDENT ( COMMA id= IDENT )* )
            // USE.g:1813:3: id= IDENT ( COMMA id= IDENT )*
            {
            id=(Token)match(input,IDENT,FOLLOW_IDENT_in_identListMin18156); if (state.failed) return n;

            if ( state.backtracking==0 ) { n.add((id!=null?id.getText():null)); }

            // USE.g:1815:3: ( COMMA id= IDENT )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( (LA150_0==COMMA) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // USE.g:1816:5: COMMA id= IDENT
            	    {
            	    match(input,COMMA,FOLLOW_COMMA_in_identListMin18170); if (state.failed) return n;

            	    id=(Token)match(input,IDENT,FOLLOW_IDENT_in_identListMin18180); if (state.failed) return n;

            	    if ( state.backtracking==0 ) {
            	        n.add((id!=null?id.getText():null)); }

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }

        finally {
        	// do for sure before leaving
        }
        return n;
    }
    // $ANTLR end "identListMin1"

    // $ANTLR start synpred1_USE
    public final void synpred1_USE_fragment() throws RecognitionException {
        // USE.g:1214:7: ( COLON type EQUAL )
        // USE.g:1214:8: COLON type EQUAL
        {
        match(input,COLON,FOLLOW_COLON_in_synpred1_USE5906); if (state.failed) return ;

        pushFollow(FOLLOW_type_in_synpred1_USE5908);
        type();

        state._fsp--;
        if (state.failed) return ;

        match(input,EQUAL,FOLLOW_EQUAL_in_synpred1_USE5910); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_USE

    // $ANTLR start synpred2_USE
    public final void synpred2_USE_fragment() throws RecognitionException {
        // USE.g:1365:5: ( statStartingWithExpr )
        // USE.g:1365:6: statStartingWithExpr
        {
        pushFollow(FOLLOW_statStartingWithExpr_in_synpred2_USE6458);
        statStartingWithExpr();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_USE

    // Delegated rules

    public final boolean synpred1_USE() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_USE_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_USE() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_USE_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA63 dfa63 = new DFA63(this);
    static final String DFA2_eotS =
        "\25\uffff";
    static final String DFA2_eofS =
        "\1\1\24\uffff";
    static final String DFA2_minS =
        "\1\5\1\uffff\1\24\1\uffff\1\24\2\uffff\1\26\1\30\1\13\1\uffff\1"+
        "\16\1\24\1\5\1\36\1\16\1\24\1\13\1\36\1\30\1\13";
    static final String DFA2_maxS =
        "\1\117\1\uffff\1\24\1\uffff\1\24\2\uffff\1\32\1\157\1\45\1\uffff"+
        "\1\16\1\24\1\117\1\36\1\16\1\24\1\45\1\36\1\157\1\45";
    static final String DFA2_acceptS =
        "\1\uffff\1\5\1\uffff\1\1\1\uffff\1\3\1\4\3\uffff\1\2\12\uffff";
    static final String DFA2_specialS =
        "\25\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\16\uffff\1\4\45\uffff\1\3\2\uffff\2\3\4\uffff\1\5\13\uffff"+
            "\1\6",
            "",
            "\1\7",
            "",
            "\1\10",
            "",
            "",
            "\1\3\3\uffff\1\11",
            "\1\3\46\uffff\1\3\1\uffff\1\12\1\uffff\1\3\11\uffff\1\3\30"+
            "\uffff\1\3\10\uffff\1\3",
            "\1\14\10\uffff\1\13\20\uffff\1\15",
            "",
            "\1\16",
            "\1\17",
            "\1\2\16\uffff\1\20\45\uffff\1\3\2\uffff\2\3\20\uffff\1\6",
            "\1\21",
            "\1\22",
            "\1\23",
            "\1\14\31\uffff\1\15",
            "\1\24",
            "\1\3\46\uffff\1\3\1\uffff\1\12\1\uffff\1\3\11\uffff\1\3\30"+
            "\uffff\1\3\10\uffff\1\3",
            "\1\14\31\uffff\1\15"
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "()* loopback of 135:5: ( generalClassifierDefinition[$n] |a= associationDefinition | ( 'constraints' (cons= invariant |ppc= prePost )* ) |e= enumTypeDefinition )*";
        }
    }
    static final String DFA34_eotS =
        "\16\uffff";
    static final String DFA34_eofS =
        "\16\uffff";
    static final String DFA34_minS =
        "\1\5\1\uffff\1\24\1\uffff\1\32\1\13\1\16\1\24\1\5\1\36\1\16\1\13"+
        "\1\36\1\13";
    static final String DFA34_maxS =
        "\1\157\1\uffff\1\24\1\uffff\1\32\1\45\1\16\1\24\1\152\1\36\1\16"+
        "\1\45\1\36\1\45";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\12\uffff";
    static final String DFA34_specialS =
        "\16\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\2\16\uffff\1\1\21\uffff\1\1\34\uffff\1\1\11\uffff\1\1\33"+
            "\uffff\2\3\4\uffff\1\1",
            "",
            "\1\4",
            "",
            "\1\5",
            "\1\7\10\uffff\1\6\20\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\2\16\uffff\1\1\124\uffff\2\3",
            "\1\13",
            "\1\14",
            "\1\7\31\uffff\1\10",
            "\1\15",
            "\1\7\31\uffff\1\10"
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()* loopback of 321:5: (ppc= prePostClause )*";
        }
    }
    static final String DFA57_eotS =
        "\20\uffff";
    static final String DFA57_eofS =
        "\1\1\17\uffff";
    static final String DFA57_minS =
        "\1\5\1\uffff\1\24\1\uffff\1\26\1\13\1\16\1\24\1\5\1\36\1\16\1\24"+
        "\1\13\1\36\1\26\1\13";
    static final String DFA57_maxS =
        "\1\131\1\uffff\1\71\1\uffff\1\32\1\45\1\16\1\24\1\131\1\36\1\16"+
        "\1\24\1\45\1\36\1\32\1\45";
    static final String DFA57_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\14\uffff";
    static final String DFA57_specialS =
        "\20\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\2\16\uffff\1\1\45\uffff\1\1\2\uffff\2\1\4\uffff\2\1\12\uffff"+
            "\1\1\1\3\10\uffff\1\3",
            "",
            "\1\4\32\uffff\1\3\1\uffff\1\3\4\uffff\1\3\2\uffff\1\3",
            "",
            "\1\1\3\uffff\1\5",
            "\1\7\10\uffff\1\6\20\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13\16\uffff\1\1\45\uffff\1\1\2\uffff\2\1\20\uffff\1\1\11"+
            "\uffff\1\3",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\7\31\uffff\1\10",
            "\1\17",
            "\1\1\3\uffff\1\5",
            "\1\7\31\uffff\1\10"
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 478:5: (inv= invariantClause )*";
        }
    }
    static final String DFA63_eotS =
        "\20\uffff";
    static final String DFA63_eofS =
        "\1\1\17\uffff";
    static final String DFA63_minS =
        "\1\5\1\uffff\1\24\1\uffff\1\26\1\13\1\16\1\24\1\5\1\36\1\16\1\24"+
        "\1\13\1\36\1\26\1\13";
    static final String DFA63_maxS =
        "\1\152\1\uffff\1\24\1\uffff\1\32\1\45\1\16\1\24\1\152\1\36\1\16"+
        "\1\24\1\45\1\36\1\32\1\45";
    static final String DFA63_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\14\uffff";
    static final String DFA63_specialS =
        "\20\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\2\16\uffff\1\1\45\uffff\1\1\2\uffff\2\1\4\uffff\2\1\12\uffff"+
            "\1\1\31\uffff\2\3",
            "",
            "\1\4",
            "",
            "\1\1\3\uffff\1\5",
            "\1\7\10\uffff\1\6\20\uffff\1\10",
            "\1\11",
            "\1\12",
            "\1\13\16\uffff\1\1\45\uffff\1\1\2\uffff\2\1\20\uffff\1\1\31"+
            "\uffff\2\3",
            "\1\14",
            "\1\15",
            "\1\16",
            "\1\7\31\uffff\1\10",
            "\1\17",
            "\1\1\3\uffff\1\5",
            "\1\7\31\uffff\1\10"
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()+ loopback of 507:5: (ppc= prePostClause )+";
        }
    }
 

    public static final BitSet FOLLOW_annotationSet_in_model71 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_model77 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_model81 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008008L});
    public static final BitSet FOLLOW_generalClassifierDefinition_in_model93 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008008L});
    public static final BitSet FOLLOW_associationDefinition_in_model106 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008008L});
    public static final BitSet FOLLOW_67_in_model120 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008018L});
    public static final BitSet FOLLOW_invariant_in_model138 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008018L});
    public static final BitSet FOLLOW_prePost_in_model159 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008018L});
    public static final BitSet FOLLOW_enumTypeDefinition_in_model199 = new BitSet(new long[]{0x6400000000100020L,0x0000000000008008L});
    public static final BitSet FOLLOW_EOF_in_model214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationSet_in_enumTypeDefinition242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_enumTypeDefinition248 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_enumTypeDefinition252 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACE_in_enumTypeDefinition254 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_idList_in_enumTypeDefinition258 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_enumTypeDefinition260 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_SEMI_in_enumTypeDefinition264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationSet_in_generalClassifierDefinition302 = new BitSet(new long[]{0x6400000000100020L});
    public static final BitSet FOLLOW_58_in_generalClassifierDefinition310 = new BitSet(new long[]{0x6000000000100020L});
    public static final BitSet FOLLOW_classDefinition_in_generalClassifierDefinition338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_associationClassDefinition_in_generalClassifierDefinition376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_signalDefinition_in_generalClassifierDefinition421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_classDefinition473 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_keyClass_in_classDefinition482 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_classDefinition486 = new BitSet(new long[]{0x8000000001000000L,0x0000804000002008L});
    public static final BitSet FOLLOW_LESS_in_classDefinition496 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_idList_in_classDefinition500 = new BitSet(new long[]{0x8000000000000000L,0x0000804000002008L});
    public static final BitSet FOLLOW_63_in_classDefinition513 = new BitSet(new long[]{0x0000000000100020L,0x0000804000002008L});
    public static final BitSet FOLLOW_attributeDefinition_in_classDefinition526 = new BitSet(new long[]{0x0000000000100020L,0x0000804000002008L});
    public static final BitSet FOLLOW_102_in_classDefinition547 = new BitSet(new long[]{0x0000000000100020L,0x0000800000002008L});
    public static final BitSet FOLLOW_operationDefinition_in_classDefinition560 = new BitSet(new long[]{0x0000000000100020L,0x0000800000002008L});
    public static final BitSet FOLLOW_67_in_classDefinition581 = new BitSet(new long[]{0x0000000000000020L,0x0000800002012000L});
    public static final BitSet FOLLOW_invariantClause_in_classDefinition601 = new BitSet(new long[]{0x0000000000000020L,0x0000800002012000L});
    public static final BitSet FOLLOW_111_in_classDefinition627 = new BitSet(new long[]{0x0000000000000000L,0x0000080000002000L});
    public static final BitSet FOLLOW_stateMachine_in_classDefinition647 = new BitSet(new long[]{0x0000000000000000L,0x0000080000002000L});
    public static final BitSet FOLLOW_77_in_classDefinition671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_associationClassDefinition704 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_associationClassDefinition730 = new BitSet(new long[]{0x8000000001100000L,0x000080400000200AL});
    public static final BitSet FOLLOW_LESS_in_associationClassDefinition740 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_idList_in_associationClassDefinition744 = new BitSet(new long[]{0x8000000000100000L,0x000080400000200AL});
    public static final BitSet FOLLOW_65_in_associationClassDefinition756 = new BitSet(new long[]{0x0000000000100020L});
    public static final BitSet FOLLOW_associationEnd_in_associationClassDefinition764 = new BitSet(new long[]{0x0000000000100020L});
    public static final BitSet FOLLOW_associationEnd_in_associationClassDefinition776 = new BitSet(new long[]{0x8000000000100020L,0x0000804000002008L});
    public static final BitSet FOLLOW_63_in_associationClassDefinition796 = new BitSet(new long[]{0x0000000000100020L,0x0000804000002008L});
    public static final BitSet FOLLOW_attributeDefinition_in_associationClassDefinition809 = new BitSet(new long[]{0x0000000000100020L,0x0000804000002008L});
    public static final BitSet FOLLOW_102_in_associationClassDefinition830 = new BitSet(new long[]{0x0000000000100020L,0x0000800000002008L});
    public static final BitSet FOLLOW_operationDefinition_in_associationClassDefinition843 = new BitSet(new long[]{0x0000000000100020L,0x0000800000002008L});
    public static final BitSet FOLLOW_67_in_associationClassDefinition864 = new BitSet(new long[]{0x0000000000100020L,0x0000800002012000L});
    public static final BitSet FOLLOW_invariantClause_in_associationClassDefinition884 = new BitSet(new long[]{0x0000000000100020L,0x0000800002012000L});
    public static final BitSet FOLLOW_111_in_associationClassDefinition910 = new BitSet(new long[]{0x0000000000100000L,0x0000080000002000L});
    public static final BitSet FOLLOW_stateMachine_in_associationClassDefinition930 = new BitSet(new long[]{0x0000000000100000L,0x0000080000002000L});
    public static final BitSet FOLLOW_keyAggregation_in_associationClassDefinition971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_keyComposition_in_associationClassDefinition975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_associationClassDefinition998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationSet_in_attributeDefinition1026 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_attributeDefinition1034 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_attributeDefinition1036 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_attributeDefinition1040 = new BitSet(new long[]{0x0000004000100002L});
    public static final BitSet FOLLOW_keyDerive_in_attributeDefinition1064 = new BitSet(new long[]{0x0000000000004100L});
    public static final BitSet FOLLOW_keyDerived_in_attributeDefinition1066 = new BitSet(new long[]{0x0000000000004100L});
    public static final BitSet FOLLOW_set_in_attributeDefinition1069 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_attributeDefinition1079 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_keyInit_in_attributeDefinition1099 = new BitSet(new long[]{0x0000000000004100L});
    public static final BitSet FOLLOW_set_in_attributeDefinition1103 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_attributeDefinition1115 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_SEMI_in_attributeDefinition1129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationSet_in_operationDefinition1160 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_operationDefinition1170 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_paramList_in_operationDefinition1180 = new BitSet(new long[]{0x0000004000004122L,0x0000060000000001L});
    public static final BitSet FOLLOW_COLON_in_operationDefinition1194 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_operationDefinition1200 = new BitSet(new long[]{0x0000004000004022L,0x0000060000000001L});
    public static final BitSet FOLLOW_EQUAL_in_operationDefinition1228 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationDefinition1234 = new BitSet(new long[]{0x0000004000000022L,0x0000060000000000L});
    public static final BitSet FOLLOW_blockStat_in_operationDefinition1256 = new BitSet(new long[]{0x0000004000000022L,0x0000060000000000L});
    public static final BitSet FOLLOW_prePostClause_in_operationDefinition1278 = new BitSet(new long[]{0x0000004000000022L,0x0000060000000000L});
    public static final BitSet FOLLOW_SEMI_in_operationDefinition1291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationSet_in_associationDefinition1322 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_keyAssociation_in_associationDefinition1336 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_keyAggregation_in_associationDefinition1340 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_keyComposition_in_associationDefinition1344 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_associationDefinition1354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_associationDefinition1362 = new BitSet(new long[]{0x0000000000100020L});
    public static final BitSet FOLLOW_associationEnd_in_associationDefinition1370 = new BitSet(new long[]{0x0000000000100020L});
    public static final BitSet FOLLOW_associationEnd_in_associationDefinition1382 = new BitSet(new long[]{0x0000000000100020L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_associationDefinition1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationSet_in_associationEnd1418 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_associationEnd1426 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_LBRACK_in_associationEnd1428 = new BitSet(new long[]{0x0000020000200000L});
    public static final BitSet FOLLOW_multiplicity_in_associationEnd1432 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_associationEnd1434 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_keyRole_in_associationEnd1445 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_associationEnd1449 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_104_in_associationEnd1470 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_113_in_associationEnd1482 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_associationEnd1486 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_keyUnion_in_associationEnd1498 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_108_in_associationEnd1510 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_associationEnd1514 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_keyDerived_in_associationEnd1527 = new BitSet(new long[]{0x0000000004004000L});
    public static final BitSet FOLLOW_keyDerive_in_associationEnd1529 = new BitSet(new long[]{0x0000000004004000L});
    public static final BitSet FOLLOW_LPAREN_in_associationEnd1534 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_elemVarsDeclaration_in_associationEnd1540 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_associationEnd1542 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_associationEnd1546 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_associationEnd1550 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_keyQualifier_in_associationEnd1562 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_paramList_in_associationEnd1568 = new BitSet(new long[]{0x0000004000100002L,0x0002110000000000L});
    public static final BitSet FOLLOW_SEMI_in_associationEnd1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicityRange_in_multiplicity1620 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_multiplicity1630 = new BitSet(new long[]{0x0000020000200000L});
    public static final BitSet FOLLOW_multiplicityRange_in_multiplicity1634 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_multiplicitySpec_in_multiplicityRange1663 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOTDOT_in_multiplicityRange1673 = new BitSet(new long[]{0x0000020000200000L});
    public static final BitSet FOLLOW_multiplicitySpec_in_multiplicityRange1677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_multiplicitySpec1711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_multiplicitySpec1721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_annotationSpec1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_line_annotation_in_annotationSpec1743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_block_annotation1761 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_block_annotation1763 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACE_in_block_annotation1765 = new BitSet(new long[]{0x0000000400000040L});
    public static final BitSet FOLLOW_AnnotationTag_in_block_annotation1770 = new BitSet(new long[]{0x0240800000000000L});
    public static final BitSet FOLLOW_annotation_tag_in_block_annotation1774 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_block_annotation1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_line_annotation1791 = new BitSet(new long[]{0x0242800000000000L});
    public static final BitSet FOLLOW_annotation_tag_in_line_annotation1794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_override_in_line_annotation1798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_comment_in_annotation_tag1816 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_annotation_tag1818 = new BitSet(new long[]{0x0000000040000020L});
    public static final BitSet FOLLOW_NON_OCL_STRING_in_annotation_tag1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_ref_in_annotation_tag1827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_weight_in_annotation_tag1833 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_annotation_tag1835 = new BitSet(new long[]{0x0000000000200020L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotation_def_in_annotation_tag1838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_annotation_tag1842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_ref_in_annotation_tag1848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_type_in_annotation_tag1854 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_annotation_tag1856 = new BitSet(new long[]{0x0110000000000020L});
    public static final BitSet FOLLOW_annotation_enum_type_in_annotation_tag1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_ref_in_annotation_tag1863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_annotation_comment1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_annotation_weight1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_annotation_type1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_annotation_override1914 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotation_override1916 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACE_in_annotation_override1918 = new BitSet(new long[]{0x0240800000000000L});
    public static final BitSet FOLLOW_annotation_term_in_annotation_override1920 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_annotation_override1922 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotation_override1924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_tag_in_annotation_term1933 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotation_term1936 = new BitSet(new long[]{0x0240800000000000L});
    public static final BitSet FOLLOW_annotation_tag_in_annotation_term1938 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AT_in_annotation_ref1949 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_annotation_ref1951 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_annotation_ref1953 = new BitSet(new long[]{0x0240800000000000L});
    public static final BitSet FOLLOW_annotation_predefined_in_annotation_ref1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_annotation_def1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_annotation_in_invariant2009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_invariant2018 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_invariant2028 = new BitSet(new long[]{0x0000000000000900L});
    public static final BitSet FOLLOW_COMMA_in_invariant2041 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_invariant2045 = new BitSet(new long[]{0x0000000000000900L});
    public static final BitSet FOLLOW_COLON_in_invariant2053 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_simpleType_in_invariant2065 = new BitSet(new long[]{0x0000000000000022L,0x0000000002010000L});
    public static final BitSet FOLLOW_invariantClause_in_invariant2077 = new BitSet(new long[]{0x0000000000000022L,0x0000000002010000L});
    public static final BitSet FOLLOW_line_annotation_in_invariantClause2104 = new BitSet(new long[]{0x0000000000000020L,0x0000000002000000L});
    public static final BitSet FOLLOW_annotationSet_in_invariantClause2113 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_invariantClause2120 = new BitSet(new long[]{0x0000000000100100L});
    public static final BitSet FOLLOW_IDENT_in_invariantClause2126 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_invariantClause2131 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_invariantClause2135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_invariantClause2152 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_invariantClause2154 = new BitSet(new long[]{0x0000000000100100L});
    public static final BitSet FOLLOW_IDENT_in_invariantClause2160 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_invariantClause2165 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_invariantClause2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_prePost2202 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_prePost2206 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COLON_COLON_in_prePost2208 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_prePost2212 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_paramList_in_prePost2216 = new BitSet(new long[]{0x0000000000000120L,0x0000060000000000L});
    public static final BitSet FOLLOW_COLON_in_prePost2220 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_prePost2224 = new BitSet(new long[]{0x0000000000000020L,0x0000060000000000L});
    public static final BitSet FOLLOW_prePostClause_in_prePost2243 = new BitSet(new long[]{0x0000000000000022L,0x0000060000000000L});
    public static final BitSet FOLLOW_annotationSet_in_prePostClause2277 = new BitSet(new long[]{0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_set_in_prePostClause2289 = new BitSet(new long[]{0x0000000000100100L});
    public static final BitSet FOLLOW_IDENT_in_prePostClause2304 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_prePostClause2309 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_prePostClause2313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotationSet2340 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AT_in_annotation2359 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_annotation2363 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotation2369 = new BitSet(new long[]{0x0000002000100800L});
    public static final BitSet FOLLOW_annotationValues_in_annotation2378 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotation2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationValue_in_annotationValues2406 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_annotationValues2414 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_annotationValue_in_annotationValues2418 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_IDENT_in_annotationValue2437 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_annotationValue2442 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_NON_OCL_STRING_in_annotationValue2448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_stateMachine2478 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_stateMachine2511 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_stateMachine2524 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_stateDefinition_in_stateMachine2540 = new BitSet(new long[]{0x0000000000100000L,0x0008000000000000L});
    public static final BitSet FOLLOW_115_in_stateMachine2550 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_transitionDefinition_in_stateMachine2566 = new BitSet(new long[]{0x0000000000100000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_stateMachine2576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_stateDefinition2592 = new BitSet(new long[]{0x0000000000800102L});
    public static final BitSet FOLLOW_COLON_in_stateDefinition2600 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_stateDefinition2604 = new BitSet(new long[]{0x0000000000800002L});
    public static final BitSet FOLLOW_LBRACK_in_stateDefinition2615 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_stateDefinition2621 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_stateDefinition2623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_transitionDefinition2644 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ARROW_in_transitionDefinition2646 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_transitionDefinition2650 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_LBRACE_in_transitionDefinition2660 = new BitSet(new long[]{0x0000000000900000L,0x0000000000000020L});
    public static final BitSet FOLLOW_LBRACK_in_transitionDefinition2670 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_transitionDefinition2674 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_transitionDefinition2678 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000020L});
    public static final BitSet FOLLOW_event_in_transitionDefinition2702 = new BitSet(new long[]{0x0000000400800000L});
    public static final BitSet FOLLOW_IDENT_in_transitionDefinition2718 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_transitionDefinition2722 = new BitSet(new long[]{0x0000002004000000L});
    public static final BitSet FOLLOW_paramList_in_transitionDefinition2727 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_transitionDefinition2734 = new BitSet(new long[]{0x0000000400800000L});
    public static final BitSet FOLLOW_LBRACK_in_transitionDefinition2751 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_transitionDefinition2755 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RBRACK_in_transitionDefinition2759 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_transitionDefinition2767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_event2789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keySignal_in_signalDefinition2809 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_signalDefinition2813 = new BitSet(new long[]{0x8000000001000000L,0x0000000000002008L});
    public static final BitSet FOLLOW_LESS_in_signalDefinition2828 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_idList_in_signalDefinition2832 = new BitSet(new long[]{0x8000000000000000L,0x0000000000002008L});
    public static final BitSet FOLLOW_63_in_signalDefinition2845 = new BitSet(new long[]{0x0000000000100020L,0x0000000000002008L});
    public static final BitSet FOLLOW_attributeDefinition_in_signalDefinition2858 = new BitSet(new long[]{0x0000000000100020L,0x0000000000002008L});
    public static final BitSet FOLLOW_67_in_signalDefinition2879 = new BitSet(new long[]{0x0000000000000020L,0x0000000002012000L});
    public static final BitSet FOLLOW_invariantClause_in_signalDefinition2899 = new BitSet(new long[]{0x0000000000000020L,0x0000000002012000L});
    public static final BitSet FOLLOW_77_in_signalDefinition2923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyUnion2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyAssociation2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyRole2969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyComposition2981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyAggregation2993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyClass3007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keySignal3019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyDerived3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyDerive3047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyInit3059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keyQualifier3075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionOnly3103 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_expressionOnly3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_expression3153 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_expression3164 = new BitSet(new long[]{0x0000000000004100L});
    public static final BitSet FOLLOW_COLON_in_expression3168 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_expression3172 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_expression3177 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_expression3181 = new BitSet(new long[]{0x0000000000000800L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_expression3219 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_expression3231 = new BitSet(new long[]{0x0000000000004100L});
    public static final BitSet FOLLOW_COLON_in_expression3235 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_expression3239 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_expression3244 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_expression3248 = new BitSet(new long[]{0x0000000000000800L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_expression3289 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_conditionalImpliesExpression_in_expression3305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_paramList3338 = new BitSet(new long[]{0x0000002000100000L});
    public static final BitSet FOLLOW_variableDeclaration_in_paramList3355 = new BitSet(new long[]{0x0000002000000800L});
    public static final BitSet FOLLOW_COMMA_in_paramList3367 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_variableDeclaration_in_paramList3371 = new BitSet(new long[]{0x0000002000000800L});
    public static final BitSet FOLLOW_RPAREN_in_paramList3391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_idList3420 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_idList3430 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_idList3434 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_IDENT_in_variableDeclaration3465 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_variableDeclaration3467 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_variableDeclaration3471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalImpliesExpression3507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_85_in_conditionalImpliesExpression3520 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalImpliesExpression3524 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_conditionalXOrExpression_in_conditionalOrExpression3569 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_103_in_conditionalOrExpression3582 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_conditionalXOrExpression_in_conditionalOrExpression3586 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalXOrExpression3630 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_conditionalXOrExpression3643 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalXOrExpression3647 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_conditionalAndExpression3691 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_60_in_conditionalAndExpression3704 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_equalityExpression_in_conditionalAndExpression3708 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_equalityExpression3756 = new BitSet(new long[]{0x0000000080004002L});
    public static final BitSet FOLLOW_set_in_equalityExpression3775 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_relationalExpression_in_equalityExpression3785 = new BitSet(new long[]{0x0000000080004002L});
    public static final BitSet FOLLOW_additiveExpression_in_relationalExpression3834 = new BitSet(new long[]{0x0000000003030002L});
    public static final BitSet FOLLOW_set_in_relationalExpression3852 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_additiveExpression_in_relationalExpression3870 = new BitSet(new long[]{0x0000000003030002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression3920 = new BitSet(new long[]{0x0000000108000002L});
    public static final BitSet FOLLOW_set_in_additiveExpression3938 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression3948 = new BitSet(new long[]{0x0000000108000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression3998 = new BitSet(new long[]{0x0000028000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_multiplicativeExpression4016 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression4030 = new BitSet(new long[]{0x0000028000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_set_in_unaryExpression4092 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FC4120000L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression4116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_postfixExpression_in_unaryExpression4136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primaryExpression_in_postfixExpression4169 = new BitSet(new long[]{0x0000000000001012L});
    public static final BitSet FOLLOW_ARROW_in_postfixExpression4187 = new BitSet(new long[]{0x0000000000100000L,0x0000601D04000000L});
    public static final BitSet FOLLOW_DOT_in_postfixExpression4193 = new BitSet(new long[]{0x0000000000100000L,0x0000601D04000000L});
    public static final BitSet FOLLOW_propertyCall_in_postfixExpression4204 = new BitSet(new long[]{0x0000000000001012L});
    public static final BitSet FOLLOW_literal_in_primaryExpression4244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectReference_in_primaryExpression4258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyCall_in_primaryExpression4270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_primaryExpression4281 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_primaryExpression4285 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primaryExpression4287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifExpression_in_primaryExpression4299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression4311 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression4313 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_primaryExpression4315 = new BitSet(new long[]{0x0000000004000022L});
    public static final BitSet FOLLOW_AT_in_primaryExpression4338 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_primaryExpression4340 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_primaryExpression4358 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primaryExpression4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_primaryExpression4373 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_primaryExpression4375 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_primaryExpression4377 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_primaryExpression4381 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_primaryExpression4385 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_primaryExpression4387 = new BitSet(new long[]{0x0000000000000022L});
    public static final BitSet FOLLOW_AT_in_primaryExpression4407 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_primaryExpression4409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_objectReference4435 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_objectReference4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryExpression_in_propertyCall4508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterateExpression_in_propertyCall4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_operationExpression_in_propertyCall4534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeExpression_in_propertyCall4547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inStateExpression_in_propertyCall4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_queryExpression4595 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_queryExpression4602 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_elemVarsDeclaration_in_queryExpression4613 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_BAR_in_queryExpression4617 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_queryExpression4628 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_queryExpression4634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_iterateExpression4666 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_iterateExpression4672 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_elemVarsDeclaration_in_iterateExpression4680 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_SEMI_in_iterateExpression4682 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_variableInitialization_in_iterateExpression4690 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_BAR_in_iterateExpression4692 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_iterateExpression4700 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_iterateExpression4706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_operationExpression4750 = new BitSet(new long[]{0x0000000004800022L});
    public static final BitSet FOLLOW_LBRACK_in_operationExpression4772 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationExpression4785 = new BitSet(new long[]{0x0000000800000800L});
    public static final BitSet FOLLOW_COMMA_in_operationExpression4798 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationExpression4802 = new BitSet(new long[]{0x0000000800000800L});
    public static final BitSet FOLLOW_RBRACK_in_operationExpression4814 = new BitSet(new long[]{0x0000000004800022L});
    public static final BitSet FOLLOW_LBRACK_in_operationExpression4831 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationExpression4846 = new BitSet(new long[]{0x0000000800000800L});
    public static final BitSet FOLLOW_COMMA_in_operationExpression4861 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationExpression4865 = new BitSet(new long[]{0x0000000800000800L});
    public static final BitSet FOLLOW_RBRACK_in_operationExpression4879 = new BitSet(new long[]{0x0000000004000022L});
    public static final BitSet FOLLOW_AT_in_operationExpression4904 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_operationExpression4906 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_LPAREN_in_operationExpression4931 = new BitSet(new long[]{0x00AD66310C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationExpression4952 = new BitSet(new long[]{0x0000002000000800L});
    public static final BitSet FOLLOW_COMMA_in_operationExpression4964 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_operationExpression4968 = new BitSet(new long[]{0x0000002000000800L});
    public static final BitSet FOLLOW_RPAREN_in_operationExpression4988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_inStateExpression5025 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_inStateExpression5030 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_inStateExpression5039 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_inStateExpression5044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_typeExpression5080 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_typeExpression5104 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_typeExpression5108 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_typeExpression5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elemVarsDeclaration5148 = new BitSet(new long[]{0x0000000000000902L});
    public static final BitSet FOLLOW_COLON_in_elemVarsDeclaration5151 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_elemVarsDeclaration5155 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_elemVarsDeclaration5165 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_elemVarsDeclaration5171 = new BitSet(new long[]{0x0000000000000902L});
    public static final BitSet FOLLOW_COLON_in_elemVarsDeclaration5174 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_elemVarsDeclaration5180 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_IDENT_in_variableInitialization5208 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_variableInitialization5210 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_variableInitialization5214 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_variableInitialization5216 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_variableInitialization5220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_ifExpression5252 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_ifExpression5256 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_ifExpression5258 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_ifExpression5262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_76_in_ifExpression5264 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_ifExpression5268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_ifExpression5270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_literal5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_literal5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_literal5336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REAL_in_literal5351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_literal5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HASH_in_literal5375 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_literal5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_literal5391 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_COLON_COLON_in_literal5393 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_literal5397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionLiteral_in_literal5409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_emptyCollectionLiteral_in_literal5421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_undefinedLiteral_in_literal5433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tupleLiteral_in_literal5445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_literal5457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_collectionLiteral5495 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACE_in_collectionLiteral5524 = new BitSet(new long[]{0x00AD66150C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_collectionItem_in_collectionLiteral5541 = new BitSet(new long[]{0x0000000400000800L});
    public static final BitSet FOLLOW_COMMA_in_collectionLiteral5554 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_collectionItem_in_collectionLiteral5558 = new BitSet(new long[]{0x0000000400000800L});
    public static final BitSet FOLLOW_RBRACE_in_collectionLiteral5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_collectionItem5606 = new BitSet(new long[]{0x0000000000002002L});
    public static final BitSet FOLLOW_DOTDOT_in_collectionItem5617 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_collectionItem5621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_emptyCollectionLiteral5650 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_emptyCollectionLiteral5652 = new BitSet(new long[]{0x000D600000000000L});
    public static final BitSet FOLLOW_collectionType_in_emptyCollectionLiteral5656 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_emptyCollectionLiteral5658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionType_in_emptyCollectionLiteral5674 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACE_in_emptyCollectionLiteral5676 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_emptyCollectionLiteral5678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_undefinedLiteral5708 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_undefinedLiteral5710 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_undefinedLiteral5714 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_undefinedLiteral5716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_undefinedLiteral5730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_undefinedLiteral5744 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_undefinedLiteral5746 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_undefinedLiteral5750 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_undefinedLiteral5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_undefinedLiteral5766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_tupleLiteral5805 = new BitSet(new long[]{0x0000000000400000L});
    public static final BitSet FOLLOW_LBRACE_in_tupleLiteral5811 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_tupleItem_in_tupleLiteral5819 = new BitSet(new long[]{0x0000000400000800L});
    public static final BitSet FOLLOW_COMMA_in_tupleLiteral5830 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_tupleItem_in_tupleLiteral5834 = new BitSet(new long[]{0x0000000400000800L});
    public static final BitSet FOLLOW_RBRACE_in_tupleLiteral5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_tupleItem5876 = new BitSet(new long[]{0x0000000000004100L});
    public static final BitSet FOLLOW_COLON_in_tupleItem5915 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_tupleItem5919 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_tupleItem5921 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_tupleItem5925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_tupleItem5947 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_expression_in_tupleItem5957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type6023 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_collectionType_in_type6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tupleType_in_type6047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeOnly6079 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_typeOnly6081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_simpleType6109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_collectionType6147 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_collectionType6174 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_collectionType6178 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_collectionType6180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_tupleType6214 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_tupleType6216 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_tuplePart_in_tupleType6225 = new BitSet(new long[]{0x0000002000000800L});
    public static final BitSet FOLLOW_COMMA_in_tupleType6236 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_tuplePart_in_tupleType6240 = new BitSet(new long[]{0x0000002000000800L});
    public static final BitSet FOLLOW_RPAREN_in_tupleType6252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_tuplePart6284 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_COLON_in_tuplePart6286 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_tuplePart6290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stat_in_statOnly6339 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statOnly6343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_singleStat_in_stat6378 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_SEMI_in_stat6390 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960301L});
    public static final BitSet FOLLOW_singleStat_in_stat6400 = new BitSet(new long[]{0x0000004000000002L});
    public static final BitSet FOLLOW_emptyStat_in_singleStat6440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statStartingWithExpr_in_singleStat6466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varAssignStat_in_singleStat6478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objCreateStat_in_singleStat6492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objDestroyStat_in_singleStat6506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lnkInsStat_in_singleStat6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lnkDelStat_in_singleStat6536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_condExStat_in_singleStat6553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_iterStat_in_singleStat6570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStat_in_singleStat6592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_blockStat_in_singleStat6610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nothing_in_emptyStat6637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inSoilExpression_in_statStartingWithExpr6663 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_attAssignStat_in_statStartingWithExpr6677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_varAssignStat6715 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_EQUAL_in_varAssignStat6719 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_varAssignStat6727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_attAssignStat6751 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_attAssignStat6760 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_COLON_EQUAL_in_attAssignStat6764 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_attAssignStat6772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_objCreateStat6798 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_simpleType_in_objCreateStat6806 = new BitSet(new long[]{0x0000000004000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_objCreateStat6816 = new BitSet(new long[]{0x00AD66310C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_objCreateStat6829 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_objCreateStat6837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_objCreateStat6855 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_objCreateStat6863 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValListMin2WithOptionalQualifiers_in_objCreateStat6877 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_objCreateStat6885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_objDestroyStat6921 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_exprListMin1_in_objDestroyStat6929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_lnkInsStat6955 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_lnkInsStat6959 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValListMin2WithOptionalQualifiers_in_lnkInsStat6969 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lnkInsStat6973 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_lnkInsStat6977 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_lnkInsStat6985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rValue_in_rValListMin2WithOptionalQualifiers7014 = new BitSet(new long[]{0x0000000000400800L});
    public static final BitSet FOLLOW_LBRACE_in_rValListMin2WithOptionalQualifiers7025 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValList_in_rValListMin2WithOptionalQualifiers7034 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_rValListMin2WithOptionalQualifiers7041 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_rValListMin2WithOptionalQualifiers7057 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_rValListMin2WithOptionalQualifiers7068 = new BitSet(new long[]{0x0000000000400802L});
    public static final BitSet FOLLOW_LBRACE_in_rValListMin2WithOptionalQualifiers7079 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValList_in_rValListMin2WithOptionalQualifiers7088 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_rValListMin2WithOptionalQualifiers7095 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_rValListMin2WithOptionalQualifiers7117 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_rValListMin2WithOptionalQualifiers7132 = new BitSet(new long[]{0x0000000000400802L});
    public static final BitSet FOLLOW_LBRACE_in_rValListMin2WithOptionalQualifiers7152 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValList_in_rValListMin2WithOptionalQualifiers7163 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_RBRACE_in_rValListMin2WithOptionalQualifiers7172 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_72_in_lnkDelStat7213 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_LPAREN_in_lnkDelStat7217 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValListMin2WithOptionalQualifiers_in_lnkDelStat7227 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lnkDelStat7231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_83_in_lnkDelStat7235 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_lnkDelStat7244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_condExStat7275 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_condExStat7284 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_condExStat7288 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960341L});
    public static final BitSet FOLLOW_statOrImplicitBlock_in_condExStat7297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000003000L});
    public static final BitSet FOLLOW_76_in_condExStat7308 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960341L});
    public static final BitSet FOLLOW_statOrImplicitBlock_in_condExStat7320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_condExStat7332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_iterStat7357 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_iterStat7365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_86_in_iterStat7369 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_iterStat7377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_iterStat7381 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960341L});
    public static final BitSet FOLLOW_statOrImplicitBlock_in_iterStat7389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_iterStat7394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_whileStat7420 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_whileStat7428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_whileStat7432 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960341L});
    public static final BitSet FOLLOW_statOrImplicitBlock_in_whileStat7440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_whileStat7445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_blockStat7475 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960341L});
    public static final BitSet FOLLOW_70_in_blockStat7480 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_variableDeclaration_in_blockStat7486 = new BitSet(new long[]{0x0000004000000800L});
    public static final BitSet FOLLOW_COMMA_in_blockStat7492 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_variableDeclaration_in_blockStat7498 = new BitSet(new long[]{0x0000004000000800L});
    public static final BitSet FOLLOW_SEMI_in_blockStat7505 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960301L});
    public static final BitSet FOLLOW_stat_in_blockStat7515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_blockStat7520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_implicitBlockStat7546 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_variableDeclaration_in_implicitBlockStat7552 = new BitSet(new long[]{0x0000004000000800L});
    public static final BitSet FOLLOW_COMMA_in_implicitBlockStat7558 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_variableDeclaration_in_implicitBlockStat7564 = new BitSet(new long[]{0x0000004000000800L});
    public static final BitSet FOLLOW_SEMI_in_implicitBlockStat7571 = new BitSet(new long[]{0x00AD66110C340020L,0x0030603FEC960301L});
    public static final BitSet FOLLOW_stat_in_implicitBlockStat7579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stat_in_statOrImplicitBlock7602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implicitBlockStat_in_statOrImplicitBlock7612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inSoilExpression_in_rValue7658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objCreateStat_in_rValue7670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nothing_in_rValList7693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rValListMin1_in_rValList7720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rValue_in_rValListMin17753 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_rValListMin17767 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_rValListMin17777 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_rValue_in_rValListMin27816 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_rValListMin27824 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_rValListMin27832 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_rValListMin27846 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FEC120000L});
    public static final BitSet FOLLOW_rValue_in_rValListMin27856 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_expression_in_inSoilExpression7890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nothing_in_exprList7919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exprListMin1_in_exprList7937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inSoilExpression_in_exprListMin17970 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_exprListMin17985 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_exprListMin17995 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_inSoilExpression_in_exprListMin28035 = new BitSet(new long[]{0x0000000000000800L});
    public static final BitSet FOLLOW_COMMA_in_exprListMin28043 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_exprListMin28051 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_exprListMin28065 = new BitSet(new long[]{0x00AD66110C340020L,0x0010603FCC120000L});
    public static final BitSet FOLLOW_inSoilExpression_in_exprListMin28075 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_nothing_in_identList8105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identListMin1_in_identList8122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_identListMin18156 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COMMA_in_identListMin18170 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_IDENT_in_identListMin18180 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_COLON_in_synpred1_USE5906 = new BitSet(new long[]{0x002D600000100000L});
    public static final BitSet FOLLOW_type_in_synpred1_USE5908 = new BitSet(new long[]{0x0000000000004000L});
    public static final BitSet FOLLOW_EQUAL_in_synpred1_USE5910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statStartingWithExpr_in_synpred2_USE6458 = new BitSet(new long[]{0x0000000000000002L});

}